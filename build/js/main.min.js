
!function(t){var i={};function r(n){if(i[n])return i[n].exports;var e=i[n]={i:n,l:!1,exports:{}};return t[n].call(e.exports,e,e.exports,r),e.l=!0,e.exports}r.m=t,r.c=i,r.d=function(n,e,t){r.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:t})},r.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},r.t=function(e,n){if(1&n&&(e=r(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(r.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var i in e)r.d(t,i,function(n){return e[n]}.bind(null,i));return t},r.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return r.d(e,"a",e),e},r.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},r.p="",r(r.s="./js/main.js")}({"./js/main.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _utils_ie_fix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/ie-fix */ "./js/utils/ie-fix.js");\n/* harmony import */ var _modules_views_app__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modules/views/app */ "./js/modules/views/app.js");\n // Utils\n// ---------------------------------\n\nObject(_utils_ie_fix__WEBPACK_IMPORTED_MODULE_0__["ieFix"])(); // Modules\n// ---------------------------------\n\n\nnew _modules_views_app__WEBPACK_IMPORTED_MODULE_1__["appView"](document.body).init(); // import appView from \'./views/app\';\n\n//# sourceURL=webpack:///./js/main.js?')},"./js/modules/controllers/Controller.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Controller\", function() { return Controller; });\n/* harmony import */ var _models_SVGCanvas__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/SVGCanvas */ \"./js/modules/models/SVGCanvas.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\nvar FILE_TYPE = 'svg';\nvar Controller = /*#__PURE__*/function () {\n  function Controller(appView, placeForSVGCanvas) {\n    _classCallCheck(this, Controller);\n\n    this.fill = 'none';\n    this.stroke = 'black';\n    this.activToolsLeftBtn = 'select';\n    this.select = null;\n    this.mouse = null;\n    this.placeForSVGCanvas = placeForSVGCanvas;\n    this.appView = appView;\n    this.canvas = new _models_SVGCanvas__WEBPACK_IMPORTED_MODULE_0__[\"SVGCanvas\"](this.appView, this.placeForSVGCanvas);\n    this.onMenuButtonsClick = this.onMenuButtonsClick.bind(this);\n    this.onSaveModalClick = this.onSaveModalClick.bind(this);\n    this.onSettingsModalClick = this.onSettingsModalClick.bind(this);\n    this.onImportSvgChange = this.onImportSvgChange.bind(this);\n  }\n\n  _createClass(Controller, [{\n    key: \"init\",\n    value: function init() {\n      this.getActivToolsLeftBtn();\n      this.getFill();\n      this.appView.menuContainer.addEventListener('click', this.onMenuButtonsClick);\n      this.appView.menuContainer.addEventListener('change', this.onImportSvgChange);\n      this.appView.saveModalWindow.addEventListener('click', this.onSaveModalClick);\n      this.appView.settingsModalWindow.addEventListener('click', this.onSettingsModalClick);\n      this.canvas.init();\n    }\n  }, {\n    key: \"getActivToolsLeftBtn\",\n    value: function getActivToolsLeftBtn() {\n      var _this = this;\n\n      var toolsLeft = document.querySelector('.tools-left');\n      toolsLeft.addEventListener('click', function (event) {\n        var target = event.target;\n\n        while (target !== toolsLeft) {\n          if (target.nodeName === 'BUTTON') {\n            _this.activToolsLeftBtn = target.id; // console.log(this.activToolsLeftBtn);\n\n            _this.canvas.removeLastEvent();\n\n            _this.canvas.drawElem(target.id);\n\n            return;\n          }\n\n          target = target.parentNode;\n        }\n      });\n    }\n  }, {\n    key: \"getFill\",\n    value: function getFill() {\n      var _this2 = this;\n\n      var toolsBottom = document.querySelector('.tools-bottom');\n      toolsBottom.addEventListener('click', function (event) {\n        var target = event.target;\n\n        while (target !== toolsBottom) {\n          if (target.nodeName === 'BUTTON') {\n            _this2.fill = target.id;\n            console.log(_this2.fill);\n\n            _this2.canvas.removeLastEvent();\n\n            _this2.canvas.fillElem(target.id);\n\n            return;\n          }\n\n          target = target.parentNode;\n        }\n      });\n    }\n  }, {\n    key: \"onImportSvgChange\",\n    value: function onImportSvgChange(_ref) {\n      var target = _ref.target;\n\n      if (target.dataset['menu'] === 'Import SVG') {\n        this.uploadSVG(target);\n      }\n    }\n  }, {\n    key: \"onMenuButtonsClick\",\n    value: function onMenuButtonsClick(_ref2) {\n      var target = _ref2.target;\n\n      if (target.dataset['menu'] === 'New Image') {\n        this.createNewImage();\n      }\n\n      if (target.dataset['menu'] === 'Save SVG') {\n        this.openModalSave();\n      }\n\n      if (target.dataset['menu'] === 'Document Properties') {\n        this.openModalSettings();\n      }\n\n      if (target.dataset['menu'] === 'Get SVG-code') {\n        this.openModalSvgCode();\n      }\n    }\n  }, {\n    key: \"openModalSvgCode\",\n    value: function openModalSvgCode() {\n      this.appView.svgCodeModalWindow.innerHTML = '';\n      this.appView.svgCodeModalWindow.classList.toggle('modal-svg-code--show');\n      this.appView.svgCodeModalWindow.textContent = this.appView.sheet.innerHTML;\n    }\n  }, {\n    key: \"openModalSettings\",\n    value: function openModalSettings() {\n      this.appView.settingsModalWindow.classList.add('modal-settings--show');\n    }\n  }, {\n    key: \"closeModalSettings\",\n    value: function closeModalSettings() {\n      this.appView.settingsModalWindow.classList.remove('modal-settings--show');\n    }\n  }, {\n    key: \"onSettingsModalClick\",\n    value: function onSettingsModalClick(_ref3) {\n      var target = _ref3.target;\n\n      if (target.dataset['modalSettings'] === 'save') {\n        this.changeProperties();\n        this.closeModalSettings();\n      }\n\n      if (target.dataset['modalSettings'] === 'close') {\n        this.closeModalSettings();\n      }\n    }\n  }, {\n    key: \"changeProperties\",\n    value: function changeProperties() {\n      var svgWidth = this.appView.settingsModalWindow.querySelector('[data-modal-settings=\"width\"]').value;\n      var svgHeight = this.appView.settingsModalWindow.querySelector('[data-modal-settings=\"height\"]').value;\n      this.placeForSVGCanvas.innerHTML = '';\n      this.canvas.createSvgWorkArea(svgWidth, svgHeight);\n    }\n  }, {\n    key: \"onSaveModalClick\",\n    value: function onSaveModalClick(_ref4) {\n      var target = _ref4.target;\n\n      if (target.dataset['modalSave'] === 'save') {\n        this.saveFile(this.appView.inputFileName.value);\n      }\n\n      if (target.dataset['modalSave'] === 'close') {\n        this.closeModalSave();\n      }\n    }\n  }, {\n    key: \"openModalSave\",\n    value: function openModalSave() {\n      this.appView.saveModalWindow.classList.add('modal-save--show');\n    }\n  }, {\n    key: \"closeModalSave\",\n    value: function closeModalSave() {\n      this.appView.inputFileName.value = '';\n      this.appView.errorMessage.style.visibility = 'hidden';\n      this.appView.saveModalWindow.classList.remove('modal-save--show');\n    }\n  }, {\n    key: \"createNewImage\",\n    value: function createNewImage() {\n      this.placeForSVGCanvas.innerHTML = '';\n      this.canvas.createSvgWorkArea('600', '400');\n    }\n  }, {\n    key: \"saveFile\",\n    value: function saveFile(fileName) {\n      if (fileName === '') {\n        this.appView.errorMessage.style.visibility = 'visible';\n        return;\n      }\n\n      this.closeModalSave();\n      this.download(this.canvas.canvas.svg(), fileName, 'image/svg+xml');\n    }\n  }, {\n    key: \"download\",\n    value: function download(data, filename, type) {\n      var file = new Blob([data], {\n        type: type\n      });\n\n      if (window.navigator.msSaveOrOpenBlob) {\n        // IE10+\n        window.navigator.msSaveOrOpenBlob(file, filename);\n      } else {\n        // Others\n        var a = document.createElement('a');\n        var url = URL.createObjectURL(file);\n        a.href = url;\n        a.download = filename;\n        document.body.appendChild(a);\n        a.click();\n        setTimeout(function () {\n          document.body.removeChild(a);\n          window.URL.revokeObjectURL(url);\n        }, 0);\n      }\n    }\n  }, {\n    key: \"uploadSVG\",\n    value: function uploadSVG(input) {\n      var _this3 = this;\n\n      var file = input.files[0];\n      var fileName = file.name.toLowerCase();\n\n      if (fileName.endsWith(FILE_TYPE)) {\n        var reader = new FileReader();\n        reader.addEventListener('load', function () {\n          _this3.canvas.canvas.svg(reader.result);\n        });\n        reader.readAsText(file);\n      }\n    }\n  }, {\n    key: \"onKeyDownProperties\",\n    value: function onKeyDownProperties() {\n      console.log(this.appView);\n    }\n  }]);\n\n  return Controller;\n}();\n\n//# sourceURL=webpack:///./js/modules/controllers/Controller.js?")},"./js/modules/models/SVGCanvas.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SVGCanvas\", function() { return SVGCanvas; });\n/* harmony import */ var _vendor_svg_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../vendor/svg.js */ \"./js/vendor/svg.js\");\n/* harmony import */ var _vendor_svg_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_vendor_svg_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _vendor_svg_select_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../vendor/svg.select.js */ \"./js/vendor/svg.select.js\");\n/* harmony import */ var _vendor_svg_select_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_vendor_svg_select_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _vendor_svg_resize_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../vendor/svg.resize.js */ \"./js/vendor/svg.resize.js\");\n/* harmony import */ var _vendor_svg_resize_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_vendor_svg_resize_js__WEBPACK_IMPORTED_MODULE_2__);\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\n\nvar SVGCanvas = /*#__PURE__*/function () {\n  function SVGCanvas(app, rootElement) {\n    _classCallCheck(this, SVGCanvas);\n\n    this.rootElement = rootElement;\n    this.canvas = null;\n    this.app = app;\n  }\n\n  _createClass(SVGCanvas, [{\n    key: \"init\",\n    value: function init() {\n      this.createSvgWorkArea('600', '400');\n    }\n  }, {\n    key: \"createSvgWorkArea\",\n    value: function createSvgWorkArea(svgWidth, svgHeight) {\n      this.canvas = SVG(this.rootElement).size(svgWidth, svgHeight);\n      this.canvas.node.classList.add('svg-work-area');\n    }\n  }, {\n    key: \"drawElem\",\n    value: function drawElem(type) {\n      var canvas = this.canvas;\n      var mouse = {\n        getX: function getX(e) {\n          return e.offsetX;\n        },\n        getY: function getY(e) {\n          return e.offsetY;\n        }\n      };\n      var selectElements = [];\n      var isDraw = false;\n      var pressKey = '';\n      var x, y, cxLast, cyLast, line, circle, rect, ellipse, text;\n      document.addEventListener('keydown', function (event) {\n        pressKey = event.key; //console.log(pressKey);\n      });\n      document.addEventListener('keyup', function (event) {\n        pressKey = 'null'; //console.log(pressKey);\n      });\n      var viewApp = this.app;\n      this.canvas.mousedown(function (e) {\n        if (pressKey !== 'Control') {\n          canvas.each(function (i, children) {\n            if (this.hasClass('selectedElem') && !this.inside(e.offsetX, e.offsetY)) {\n              this.removeClass('selectedElem');\n              this.resize('stop').selectize(false);\n              selectElements = [];\n              console.log(this.node.tagName);\n            }\n\n            if (this.hasClass('inputText') && !this.inside(e.offsetX, e.offsetY)) {\n              this.removeClass('inputText');\n            }\n          });\n        }\n\n        isDraw = true;\n        x = mouse.getX(e);\n        y = mouse.getY(e);\n\n        switch (type) {\n          case 'line':\n            line = canvas.line(x, y, x, y).stroke('black');\n            break;\n\n          case 'circle':\n            circle = canvas.circle(0).move(x, y).stroke('black').fill('transparent');\n            break;\n\n          case 'ellipse':\n            ellipse = canvas.ellipse(0, 0).move(x, y).stroke('black').fill('transparent');\n            break;\n\n          case 'rect':\n            rect = canvas.rect(0, 0).move(x, y).stroke('black').fill('transparent');\n            break;\n\n          case 'text':\n            text = canvas.text('input text').move(x, y).stroke('none').fill('black');\n            text.addClass('inputText'); //text.width = text.length();\n            //text.height = text.size();\n\n            text.font({\n              family: 'Helvetica',\n              size: 16,\n              anchor: 'left',\n              leading: '0em'\n            });\n            var textInput = '';\n            document.addEventListener('keydown', function (event) {\n              if (text.hasClass('inputText') && event.key.length < 2) {\n                textInput += event.key;\n                text.plain(\"\".concat(textInput));\n              }\n            });\n            break;\n\n          case 'select':\n            canvas.each(function (i, children) {\n              if (this.inside(e.offsetX, e.offsetY) && !this.hasClass('selectedElem')) {\n                //console.log('************');\n                //console.log(this.length());\n                selectElements.push(this);\n                this.addClass('selectedElem');\n                this.selectize().resize();\n\n                var arrayG = _toConsumableArray(document.querySelector('#SvgjsSvg1001').childNodes).filter(function (value) {\n                  return value.tagName === 'g';\n                });\n\n                var arrayElementG = _toConsumableArray(arrayG[0].childNodes);\n\n                arrayElementG.shift();\n\n                for (var _i = 0; _i < arrayElementG.length; _i += 1) {\n                  arrayElementG[_i].addEventListener('mousemove', function () {\n                    viewApp.updateFunctionalArea(selectElements[0], true, false);\n                  });\n                }\n\n                cxLast = this.cx();\n                cyLast = this.cy();\n              }\n            });\n            viewApp.functionalAreaContainer.classList.remove('visibility');\n\n            if (selectElements.length === 1) {\n              (function () {\n                viewApp.updateFunctionalArea(selectElements[0], true, true);\n\n                var arraySelect = _toConsumableArray(viewApp.functionalAreaContainer.childNodes).filter(function (value) {\n                  return value.tagName === 'SELECT';\n                });\n\n                if (arraySelect.length !== 0) {\n                  viewApp.createEventForSelect(arraySelect[0], selectElements[0], 'family');\n                } // Delete SVG Element\n\n\n                var deleteBtn = _toConsumableArray(viewApp.functionalAreaContainer.childNodes).filter(function (value) {\n                  return value.tagName === 'BUTTON';\n                })[0];\n\n                deleteBtn.addEventListener('click', function () {\n                  for (var i = 0; i < selectElements.length; i += 1) {\n                    selectElements[i].resize('stop').selectize(false);\n                    selectElements[i].remove();\n                    selectElements = [];\n                  }\n\n                  viewApp.removeFunctionalAreaDataElements();\n                });\n\n                var arrayProperties = _toConsumableArray(viewApp.functionalAreaContainer.childNodes).filter(function (value) {\n                  return value.tagName === 'LABEL';\n                });\n\n                var _loop = function _loop(i) {\n                  arrayProperties[i].childNodes[1].addEventListener('keyup', function () {\n                    var objSVG = selectElements[0];\n\n                    if (arrayProperties[i].childNodes[1].value.length === 0) {\n                      switch (arrayProperties[i].textContent) {\n                        case 'angle':\n                          objSVG.rotate(\"\".concat(arrayProperties[i].childNodes[1].value));\n                          break;\n\n                        case 'blur':\n                          break;\n\n                        case 'size':\n                          objSVG.attr('font-size', arrayProperties[i].childNodes[1].getAttribute('placeholder'));\n                          break;\n\n                        default:\n                          objSVG.attr(\"\".concat(arrayProperties[i].textContent), arrayProperties[i].childNodes[1].getAttribute('placeholder'));\n                          break;\n                      }\n                    } else {\n                      console.log(arrayProperties[i].childNodes[1].value);\n\n                      switch (arrayProperties[i].textContent) {\n                        case 'angle':\n                          objSVG.rotate(\"\".concat(arrayProperties[i].childNodes[1].value));\n                          break;\n\n                        case 'blur':\n                          break;\n\n                        case 'size':\n                          objSVG.attr('font-size', arrayProperties[i].childNodes[1].value);\n                          break;\n\n                        default:\n                          objSVG.attr(\"\".concat(arrayProperties[i].textContent), arrayProperties[i].childNodes[1].value);\n                          break;\n                      }\n                    }\n                  });\n                };\n\n                for (var i = 0; i < arrayProperties.length; i += 1) {\n                  _loop(i);\n                }\n              })();\n            } else if (selectElements.length > 1) {\n              viewApp.updateFunctionalArea(selectElements, false, true);\n              var arrayAlignment = viewApp.functionalAreaContainer.childNodes;\n\n              var _loop2 = function _loop2(i) {\n                arrayAlignment[i].addEventListener('click', function () {\n                  console.log(i);\n\n                  switch (i) {\n                    case 0:\n                      selectElements.forEach(function (item) {\n                        return item.resize('stop').selectize(false).remove();\n                      });\n                      break;\n\n                    case 2:\n                      selectElements.forEach(function (item) {\n                        return item.x(0);\n                      });\n                      break;\n\n                    case 3:\n                      selectElements.forEach(function (item) {\n                        if (item.node.tagName === 'text') {\n                          item.x(canvas.width() - item.length());\n                        } else item.x(canvas.width() - item.width());\n                      });\n                      break;\n\n                    case 4:\n                      selectElements.forEach(function (item) {\n                        return item.y(0);\n                      });\n                      break;\n\n                    case 5:\n                      selectElements.forEach(function (item) {\n                        if (item.node.tagName === 'text') {\n                          item.y(canvas.height() - 1.11 * item.attr('size'));\n                        } else item.y(canvas.height() - item.height());\n                      });\n                      break;\n\n                    case 6:\n                      selectElements.forEach(function (item) {\n                        return item.cx(canvas.width() / 2);\n                      });\n                      break;\n\n                    case 7:\n                      selectElements.forEach(function (item) {\n                        return item.cy(canvas.height() / 2);\n                      });\n                      break;\n                  }\n                  /*\n                  for (let j = 0; j < selectElements.length; j += 1) {\n                    const x = selectElements[j].attr().x;\n                    const y = selectElements[j].attr().y;\n                    switch (i) {\n                      case 2:\n                        selectElements[j].attr('x', 0);\n                        break;\n                      case 3:\n                        selectElements[j].attr('x', canvas.attr().width - selectElements[j].attr().width);\n                        break;\n                      case 4:\n                        selectElements[j].attr('y', 0);\n                        break;\n                      case 5:\n                        selectElements[j].attr('y', canvas.attr().height - selectElements[j].attr().height);\n                        break;\n                      case 6:\n                        selectElements[j].attr('x', (canvas.attr().width - selectElements[j].attr().width) / 2);\n                        break;\n                      case 7:\n                        selectElements[j].attr('y', (canvas.attr().height - selectElements[j].attr().height) / 2);\n                        break;\n                    }\n                  }*/\n\n                });\n              };\n\n              for (var i = 0; i < arrayAlignment.length; i += 1) {\n                _loop2(i);\n              }\n            } else {\n              viewApp.removeFunctionalAreaDataElements();\n            }\n\n            break;\n        }\n      });\n      this.canvas.mousemove(function (e) {\n        if (isDraw) {\n          switch (type) {\n            case 'line':\n              line.attr({\n                x2: mouse.getX(e),\n                y2: mouse.getY(e)\n              });\n              break;\n\n            case 'circle':\n              circle.attr({\n                r: Math.sqrt(Math.pow(mouse.getX(e) - x, 2) + Math.pow(mouse.getY(e) - y, 2))\n              });\n              break;\n\n            case 'ellipse':\n              ellipse.attr({\n                rx: Math.abs(mouse.getX(e) - x),\n                ry: Math.abs(mouse.getY(e) - y)\n              });\n              break;\n\n            case 'rect':\n              var xNew, yNew;\n\n              if (mouse.getX(e) < x) {\n                xNew = mouse.getX(e);\n              } else if (mouse.getX(e) >= x) {\n                xNew = x;\n              }\n\n              if (mouse.getY(e) < y) {\n                yNew = mouse.getY(e);\n              } else if (mouse.getY(e) >= y) {\n                yNew = y;\n              }\n\n              rect.attr({\n                width: Math.abs(mouse.getX(e) - x),\n                height: Math.abs(mouse.getY(e) - y),\n                x: xNew,\n                y: yNew\n              });\n              break;\n\n            case 'text':\n              text.font({\n                family: 'Helvetica',\n                size: Math.abs(mouse.getY(e) - y) //anchor:   'middle',\n                //leading:  '1.5em'\n\n              });\n              break;\n\n            case 'select':\n              if (pressKey !== 'Control') {\n                canvas.each(function (i, children) {\n                  if (this.hasClass('selectedElem')) {\n                    this.cx(mouse.getX(e) - x + cxLast);\n                    this.cy(mouse.getY(e) - y + cyLast);\n                    viewApp.updateFunctionalArea(this, true, false);\n                  }\n                });\n              }\n\n              break;\n          }\n        }\n      });\n      this.canvas.mouseup(function (e) {\n        isDraw = false; //console.log('reload block')\n      });\n    }\n  }, {\n    key: \"removeLastEvent\",\n    value: function removeLastEvent() {\n      this.canvas.mousedown(null);\n      this.canvas.mousemove(null);\n    }\n  }, {\n    key: \"fillElem\",\n    value: function fillElem(color) {\n      var canvas = this.canvas;\n      this.canvas.mousedown(function (e) {\n        canvas.each(function (i, children) {\n          if (this.inside(e.offsetX, e.offsetY)) this.fill(color);\n        }); //canvas.children().filter((item) => item.inside(e.offsetX, e.offsetY)).fill(color);\n      });\n    }\n  }]);\n\n  return SVGCanvas;\n}();\n\n//# sourceURL=webpack:///./js/modules/models/SVGCanvas.js?")},"./js/modules/views/app.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"appView\", function() { return appView; });\n/* harmony import */ var _controllers_Controller__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../controllers/Controller */ \"./js/modules/controllers/Controller.js\");\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\nvar toolsBottomBtnName = ['red', 'green', 'blue'];\nvar toolsLeftBtnName = ['select', 'rect', 'circle', 'line', 'polyline', 'text', 'path', 'ellipse'];\nvar MENU_BUTTONS_NAMES = ['New Image', 'Save SVG', 'Import SVG', 'Document Properties', 'Get SVG-code', 'Undo', 'Redo'];\nvar appView = /*#__PURE__*/function () {\n  function appView(rootElement) {\n    _classCallCheck(this, appView);\n\n    this.rootElement = rootElement;\n    this.headerElement = null;\n    this.headerContainer = null;\n    this.footerElement = null;\n    this.footerContainer = null;\n    this.contentElement = null;\n    this.contentContainer = null;\n    this.toolsTopContainer = null;\n    this.toolsBottomContainer = null;\n    this.toolsLeftContainer = null;\n    this.workAreaContainer = null;\n    this.menuContainer = null;\n    this.functionalAreaContainer = null;\n    this.saveModalWindow = null;\n    this.inputFileName = null;\n    this.sheet = null;\n    this.settingsModalWindow = null;\n    this.svgCodeModalWindow = null;\n    this.menuButtonsDataAttribute = 'menu';\n    this.saveElementsDataAttribute = 'modalSave';\n    this.settingsElementsDataAttribute = 'modalSettings';\n    this.countFamily = 5; // this.countAnchor = 3;\n  }\n\n  _createClass(appView, [{\n    key: \"init\",\n    value: function init() {\n      var wrapper = this.createWrapper();\n      this.renderHeader();\n      this.renderContent();\n      this.renderFooter();\n      this.rootElement.appendChild(wrapper);\n      wrapper.append(this.headerElement, this.contentElement, this.footerElement);\n      var controller = new _controllers_Controller__WEBPACK_IMPORTED_MODULE_0__[\"Controller\"](this, this.sheet);\n      controller.init();\n    }\n  }, {\n    key: \"getCurrentRotation\",\n    value: function getCurrentRotation(item) {\n      var transform = item.attr().transform;\n\n      if (typeof transform !== 'undefined') {\n        var values = transform.split('(')[1].split(')')[0].split(',');\n        var angle = Math.round(Math.atan2(values[1], values[0]) * (180 / Math.PI));\n        return angle < 0 ? angle + 360 : angle;\n      }\n\n      return 0;\n    }\n  }, {\n    key: \"createSelectElement\",\n    value: function createSelectElement(typeElement) {\n      var select = document.createElement('select');\n      select.classList.add(\"tools-top__functional-area__select-\".concat(typeElement));\n\n      if (typeElement === 'family') {\n        var familyClasses = ['serif', 'sans-serif', 'cursive', 'fantasy', 'monospace'];\n\n        for (var i = 0; i < this.countFamily; i += 1) {\n          var option = document.createElement('option');\n          option.textContent = familyClasses[i];\n          select.append(option);\n        }\n      }\n\n      return select;\n    }\n  }, {\n    key: \"createEventForSelect\",\n    value: function createEventForSelect(elementEvent, item, typeElement) {\n      elementEvent.addEventListener('change', function () {\n        if (typeElement === 'family') {\n          item.attr('font-family', elementEvent.value);\n        } else if (typeElement === 'anchor') {\n          item.attr('text-anchor', elementEvent.value);\n        }\n      });\n    }\n  }, {\n    key: \"createFunctionalAreaDataElements\",\n    value: function createFunctionalAreaDataElements(type) {\n      var arrayNameBtn;\n\n      switch (type) {\n        case 'rect':\n          arrayNameBtn = ['delete', 'convert', 'id', 'class', 'angle', 'blur', 'x', 'y', 'width', 'height'];\n          break;\n\n        case 'circle':\n          arrayNameBtn = ['delete', 'convert', 'id', 'class', 'angle', 'blur', 'cx', 'cy', 'r'];\n          break;\n\n        case 'line':\n          arrayNameBtn = ['delete', 'convert', 'id', 'class', 'angle', 'blur', 'x1', 'y1', 'x2', 'y2'];\n          break;\n\n        case 'text':\n          arrayNameBtn = ['delete', 'convert', 'id', 'class', 'angle', 'blur', 'x', 'y', 'size', 'family', 'mark'];\n          break;\n\n        case 'ellipse':\n          arrayNameBtn = ['delete', 'convert', 'id', 'class', 'angle', 'blur', 'cx', 'cy', 'rx', 'ry'];\n          break;\n      }\n\n      for (var i = 0; i < arrayNameBtn.length; i += 1) {\n        if (arrayNameBtn[i] === 'delete' || arrayNameBtn[i] === 'convert') {\n          var btn = document.createElement('button');\n          btn.setAttribute('type', 'button');\n          btn.classList.add(\"tools-top__functional-area__btn-\".concat(arrayNameBtn[i]));\n          this.functionalAreaContainer.append(btn);\n\n          if (arrayNameBtn[i] === 'delete') {\n            btn.innerHTML = '<i class=\"material-icons\">disabled_by_default</i>';\n          } else {\n            btn.innerHTML = '<i class=\"material-icons\">timeline</i>';\n          }\n        } else if (arrayNameBtn[i] === 'family') {\n          this.functionalAreaContainer.append(this.createSelectElement(arrayNameBtn[i]));\n        } else {\n          var _btn = document.createElement('input');\n\n          var label = document.createElement('label');\n          var span = document.createElement('span');\n          span.textContent = arrayNameBtn[i];\n\n          _btn.setAttribute('type', 'text');\n\n          _btn.setAttribute('placeholder', \"\".concat(arrayNameBtn[i]));\n\n          _btn.classList.add(\"tools-top__functional-area__btn-\".concat(arrayNameBtn[i]));\n\n          label.append(span, _btn);\n          this.functionalAreaContainer.append(label);\n        }\n      }\n    }\n  }, {\n    key: \"createFunctionalAreaAlignmentElements\",\n    value: function createFunctionalAreaAlignmentElements() {\n      var alignment = ['delete', 'convert', 'left', 'right', 'top', 'bottom', 'center', 'middle'];\n      var alignmentIcons = ['disabled_by_default', 'timeline', 'align_horizontal_left', 'align_horizontal_right', 'align_vertical_top', 'align_vertical_bottom', 'align_horizontal_center', 'align_vertical_center'];\n\n      for (var i = 0; i < alignment.length; i += 1) {\n        var btn = document.createElement('button');\n        btn.setAttribute('type', 'button');\n        btn.classList.add(\"tools-top__functional-area__btn-\".concat(alignment[i]));\n        btn.innerHTML = \"<i class=\\\"material-icons\\\">\".concat(alignmentIcons[i], \"</i>\");\n        this.functionalAreaContainer.append(btn);\n      }\n    }\n  }, {\n    key: \"removeFunctionalAreaDataElements\",\n    value: function removeFunctionalAreaDataElements() {\n      for (var i = 0; i < this.functionalAreaContainer.childNodes.length; i += 1) {\n        this.functionalAreaContainer.childNodes[i].remove();\n        i -= 1;\n      }\n    }\n  }, {\n    key: \"updateFunctionalArea\",\n    value: function updateFunctionalArea(item, flag, flagCreate) {\n      if (flagCreate) {\n        this.removeFunctionalAreaDataElements();\n      }\n\n      if (flag) {\n        var attribute = item.attr();\n\n        if (flagCreate) {\n          this.createFunctionalAreaDataElements(item.type, item);\n        }\n\n        var arrayChildFunctionalArea = _toConsumableArray(this.functionalAreaContainer.childNodes).filter(function (value) {\n          return value.tagName === 'LABEL';\n        });\n\n        switch (item.type) {\n          case 'rect':\n            arrayChildFunctionalArea[0].childNodes[1].setAttribute('placeholder', attribute.id); // id\n\n            arrayChildFunctionalArea[2].childNodes[1].setAttribute('placeholder', this.getCurrentRotation(item)); // angle\n\n            arrayChildFunctionalArea[3].childNodes[1].setAttribute('placeholder', 0); // blur\n\n            arrayChildFunctionalArea[4].childNodes[1].setAttribute('placeholder', attribute.x); // x\n\n            arrayChildFunctionalArea[5].childNodes[1].setAttribute('placeholder', attribute.y); // y\n\n            arrayChildFunctionalArea[6].childNodes[1].setAttribute('placeholder', attribute.width); // width\n\n            arrayChildFunctionalArea[7].childNodes[1].setAttribute('placeholder', attribute.height); // height\n\n            break;\n\n          case 'circle':\n            arrayChildFunctionalArea[0].childNodes[1].setAttribute('placeholder', attribute.id); // id\n\n            arrayChildFunctionalArea[2].childNodes[1].setAttribute('placeholder', this.getCurrentRotation(item)); // angle\n\n            arrayChildFunctionalArea[3].childNodes[1].setAttribute('placeholder', 0); // blur\n\n            arrayChildFunctionalArea[4].childNodes[1].setAttribute('placeholder', attribute.cx); // cx\n\n            arrayChildFunctionalArea[5].childNodes[1].setAttribute('placeholder', attribute.cy); // cy\n\n            arrayChildFunctionalArea[6].childNodes[1].setAttribute('placeholder', attribute.r); // r\n\n            break;\n\n          case 'line':\n            arrayChildFunctionalArea[0].childNodes[1].setAttribute('placeholder', attribute.id); // id\n\n            arrayChildFunctionalArea[2].childNodes[1].setAttribute('placeholder', this.getCurrentRotation(item)); // angle\n\n            arrayChildFunctionalArea[3].childNodes[1].setAttribute('placeholder', 0); // blur\n\n            arrayChildFunctionalArea[4].childNodes[1].setAttribute('placeholder', attribute.x1);\n            arrayChildFunctionalArea[5].childNodes[1].setAttribute('placeholder', attribute.y1);\n            arrayChildFunctionalArea[6].childNodes[1].setAttribute('placeholder', attribute.x2);\n            arrayChildFunctionalArea[7].childNodes[1].setAttribute('placeholder', attribute.y1);\n            break;\n\n          case 'text':\n            console.log(item.attr());\n            arrayChildFunctionalArea[0].childNodes[1].setAttribute('placeholder', attribute.id); // id\n\n            arrayChildFunctionalArea[2].childNodes[1].setAttribute('placeholder', this.getCurrentRotation(item)); // angle\n\n            arrayChildFunctionalArea[3].childNodes[1].setAttribute('placeholder', 0); // blur\n\n            arrayChildFunctionalArea[4].childNodes[1].setAttribute('placeholder', attribute.x);\n            arrayChildFunctionalArea[5].childNodes[1].setAttribute('placeholder', attribute.y);\n            arrayChildFunctionalArea[6].childNodes[1].setAttribute('placeholder', attribute.size); // здесь долджно быть начертание\n\n            break;\n\n          case 'ellipse':\n            arrayChildFunctionalArea[0].childNodes[1].setAttribute('placeholder', attribute.id); // id\n\n            arrayChildFunctionalArea[2].childNodes[1].setAttribute('placeholder', this.getCurrentRotation(item)); // angle\n\n            arrayChildFunctionalArea[3].childNodes[1].setAttribute('placeholder', 0); // blur\n\n            arrayChildFunctionalArea[4].childNodes[1].setAttribute('placeholder', attribute.cx);\n            arrayChildFunctionalArea[5].childNodes[1].setAttribute('placeholder', attribute.cy);\n            arrayChildFunctionalArea[6].childNodes[1].setAttribute('placeholder', attribute.rx);\n            arrayChildFunctionalArea[7].childNodes[1].setAttribute('placeholder', attribute.ry);\n        }\n      } else {\n        this.createFunctionalAreaAlignmentElements();\n      }\n    }\n  }, {\n    key: \"createSvgCodeModal\",\n    value: function createSvgCodeModal() {\n      var svgCodeModal = document.createElement('div');\n      svgCodeModal.classList.add('modal-svg-code'); // const preElement = document.createElement('pre');\n      // const codeElement = document.createElement('code');\n      // preElement.appendChild(codeElement);\n      // svgCodeModal.appendChild(preElement);\n      // console.log(svgCodeModal)\n\n      return svgCodeModal;\n    }\n  }, {\n    key: \"createSettingsModal\",\n    value: function createSettingsModal() {\n      var settingsModal = document.createElement('div');\n      settingsModal.classList.add('modal-settings');\n      var modalTitle = document.createElement('div');\n      modalTitle.textContent = 'SVG-Document Settings';\n      modalTitle.classList.add('modal-settings__title');\n      var widthSvg = document.createElement('div');\n      widthSvg.classList.add('modal-settings__svg-width');\n      var widthSvgInput = document.createElement('input');\n      widthSvgInput.setAttribute('type', 'text');\n      widthSvgInput.setAttribute('id', 'svg-width-input');\n      widthSvgInput.dataset[\"\".concat(this.settingsElementsDataAttribute)] = 'width';\n      var widthSvgLabel = document.createElement('label');\n      widthSvgLabel.setAttribute('for', 'svg-width-input');\n      widthSvgLabel.textContent = 'SVG-area Width';\n      widthSvg.append(widthSvgLabel, widthSvgInput);\n      var heightSvg = document.createElement('div');\n      heightSvg.classList.add('modal-settings__svg-height');\n      var heightSvgInput = document.createElement('input');\n      heightSvgInput.setAttribute('type', 'text');\n      heightSvgInput.setAttribute('id', 'svg-height-input');\n      heightSvgInput.dataset[\"\".concat(this.settingsElementsDataAttribute)] = 'height';\n      var heightSvgLabel = document.createElement('label');\n      heightSvgLabel.setAttribute('for', 'svg-height-input');\n      heightSvgLabel.textContent = 'SVG-area Height';\n      heightSvg.append(heightSvgLabel, heightSvgInput);\n      var saveButton = document.createElement('button');\n      saveButton.setAttribute('type', 'button');\n      saveButton.textContent = 'Save';\n      saveButton.classList.add('modal-settings__save-btn');\n      saveButton.dataset[\"\".concat(this.settingsElementsDataAttribute)] = 'save';\n      var closeButton = document.createElement('button');\n      closeButton.setAttribute('type', 'button');\n      closeButton.textContent = 'Close';\n      closeButton.classList.add('modal-settings__close-btn');\n      closeButton.dataset[\"\".concat(this.settingsElementsDataAttribute)] = 'close';\n      settingsModal.append(modalTitle, widthSvg, heightSvg, saveButton, closeButton);\n      return settingsModal;\n    }\n  }, {\n    key: \"createSaveModal\",\n    value: function createSaveModal() {\n      var saveModal = document.createElement('div');\n      saveModal.classList.add('modal-save');\n      this.inputFileName = document.createElement('input');\n      this.inputFileName.setAttribute('type', 'text');\n      this.inputFileName.classList.add('modal-save__file-name');\n      this.inputFileName.dataset[\"\".concat(this.saveElementsDataAttribute)] = 'name';\n      var saveButton = document.createElement('button');\n      saveButton.setAttribute('type', 'button');\n      saveButton.textContent = 'Save';\n      saveButton.classList.add('modal-save__save-btn');\n      saveButton.dataset[\"\".concat(this.saveElementsDataAttribute)] = 'save';\n      var closeButton = document.createElement('button');\n      closeButton.setAttribute('type', 'button');\n      closeButton.textContent = 'Close';\n      closeButton.classList.add('modal-save__close-btn');\n      closeButton.dataset[\"\".concat(this.saveElementsDataAttribute)] = 'close';\n      this.errorMessage = document.createElement('div');\n      this.errorMessage.textContent = 'Please enter the file name';\n      this.errorMessage.style.visibility = 'hidden';\n      saveModal.append(this.errorMessage, this.inputFileName, saveButton, closeButton);\n      return saveModal;\n    }\n  }, {\n    key: \"createMenuContainer\",\n    value: function createMenuContainer() {\n      var _this = this;\n\n      var menuContainer = document.createElement('div');\n      menuContainer.classList.add('tools-top__menu-area');\n      MENU_BUTTONS_NAMES.forEach(function (item) {\n        if (item !== 'Import SVG') {\n          var button = document.createElement('button');\n          button.setAttribute('type', 'button');\n          button.dataset[\"\".concat(_this.menuButtonsDataAttribute)] = \"\".concat(item);\n          button.textContent = item;\n          menuContainer.appendChild(button);\n        } else {\n          var inputFileUpload = document.createElement('input');\n          inputFileUpload.setAttribute('type', 'file');\n          inputFileUpload.setAttribute('id', 'upload-file');\n          inputFileUpload.dataset[\"\".concat(_this.menuButtonsDataAttribute)] = \"\".concat(item);\n          inputFileUpload.style.display = 'none';\n          var labelFileUpload = document.createElement('label');\n          labelFileUpload.setAttribute('for', 'upload-file');\n          labelFileUpload.textContent = item;\n          menuContainer.append(labelFileUpload, inputFileUpload);\n        }\n      });\n      return menuContainer;\n    }\n  }, {\n    key: \"createFunctionalArea\",\n    value: function createFunctionalArea() {\n      var functionalArea = document.createElement('div');\n      functionalArea.classList.add('tools-top__functional-area');\n      return functionalArea;\n    }\n  }, {\n    key: \"createToolsTop\",\n    value: function createToolsTop() {\n      var toolsTop = document.createElement('div');\n      toolsTop.classList.add('tools-top');\n      this.menuContainer = this.createMenuContainer();\n      this.functionalAreaContainer = this.createFunctionalArea();\n      toolsTop.append(this.menuContainer, this.functionalAreaContainer);\n      return toolsTop;\n    }\n  }, {\n    key: \"createWorkArea\",\n    value: function createWorkArea() {\n      var workAreaContainer = document.createElement('div');\n      workAreaContainer.className = 'work-area';\n      var field = document.createElement('div');\n      field.id = 'field';\n      workAreaContainer.append(field);\n      this.sheet = document.createElement('div');\n      this.sheet.className = 'sheet';\n      this.sheet.id = 'sheet';\n      field.append(this.sheet);\n      return workAreaContainer;\n    }\n  }, {\n    key: \"createToolsBottom\",\n    value: function createToolsBottom() {\n      var toolsBottomContainer = document.createElement('div');\n      toolsBottomContainer.className = 'tools-bottom';\n      toolsBottomBtnName.forEach(function (item) {\n        var btn = document.createElement('button');\n        btn.id = \"\".concat(item);\n        btn.style.background = item;\n        toolsBottomContainer.append(btn);\n      });\n      return toolsBottomContainer;\n    }\n  }, {\n    key: \"createToolsLeft\",\n    value: function createToolsLeft() {\n      var toolsLeftContainer = document.createElement('div');\n      toolsLeftContainer.className = 'tools-left';\n      toolsLeftBtnName.forEach(function (item) {\n        var btn = document.createElement('button');\n        btn.id = \"\".concat(item);\n        btn.innerHTML = item;\n        toolsLeftContainer.append(btn);\n      });\n      return toolsLeftContainer;\n    }\n  }, {\n    key: \"createWrapper\",\n    value: function createWrapper() {\n      var wrapper = document.createElement('div');\n      wrapper.classList.add('wrapper');\n      return wrapper;\n    }\n  }, {\n    key: \"renderHeader\",\n    value: function renderHeader() {\n      this.headerElement = document.createElement('header');\n      this.headerElement.classList.add('header');\n      this.headerContainer = document.createElement('div');\n      this.headerContainer.classList.add('container');\n      this.headerContainer.textContent = 'SVG EDITOR';\n      this.headerElement.appendChild(this.headerContainer);\n    }\n  }, {\n    key: \"renderContent\",\n    value: function renderContent() {\n      this.svgCodeModalWindow = this.createSvgCodeModal();\n      this.settingsModalWindow = this.createSettingsModal();\n      this.saveModalWindow = this.createSaveModal();\n      this.toolsTopContainer = this.createToolsTop();\n      this.toolsBottomContainer = this.createToolsBottom();\n      this.toolsLeftContainer = this.createToolsLeft();\n      this.workAreaContainer = this.createWorkArea();\n      this.contentElement = document.createElement('main');\n      this.contentElement.classList.add('main');\n      this.contentContainer = document.createElement('div');\n      this.contentContainer.classList.add('container');\n      this.contentElement.appendChild(this.contentContainer);\n      this.toolsRightContainer = document.createElement('div');\n      this.toolsRightContainer.className = 'tools-right';\n      this.contentContainer.append(this.toolsTopContainer, this.toolsLeftContainer, this.toolsRightContainer, this.toolsBottomContainer, this.workAreaContainer, this.saveModalWindow, this.settingsModalWindow, this.svgCodeModalWindow);\n    }\n  }, {\n    key: \"renderFooter\",\n    value: function renderFooter() {\n      var yearSpan = document.createElement('span');\n      yearSpan.classList.add('copyright__year');\n      yearSpan.textContent = '2020 ©';\n      var by = document.createElement('span');\n      by.textContent = 'by';\n      var student1Link = document.createElement('a');\n      student1Link.classList.add('copyright__student-link');\n      student1Link.setAttribute('href', 'https://github.com/alexk08');\n      student1Link.setAttribute('target', '__blank');\n      student1Link.textContent = 'Aleksandr Krasinikov';\n      var student2Link = document.createElement('a');\n      student2Link.classList.add('copyright__student-link');\n      student2Link.setAttribute('href', 'https://github.com/11alexey11');\n      student2Link.setAttribute('target', '__blank');\n      student2Link.textContent = 'Alexey Yanvarev';\n      var student3Link = document.createElement('a');\n      student3Link.classList.add('copyright__student-link');\n      student3Link.setAttribute('href', 'https://github.com/gtm003');\n      student3Link.setAttribute('target', '__blank');\n      student3Link.textContent = 'Tatyana Grigorovich';\n      var logo = document.createElement('img');\n      logo.classList.add('copyright__logo-rs');\n      logo.setAttribute('src', 'img/svg/rs_school_js.svg');\n      logo.setAttribute('alt', 'Logo RS School');\n      logo.setAttribute('width', '100px');\n      var courseLink = document.createElement('a');\n      courseLink.classList.add('copyright__course-link');\n      courseLink.setAttribute('href', 'https://rs.school/js/');\n      courseLink.setAttribute('target', '__blank');\n      courseLink.appendChild(logo);\n      var copyrightElement = document.createElement('div');\n      copyrightElement.classList.add('copyright');\n      copyrightElement.append(yearSpan, by, student1Link, student2Link, student3Link, courseLink);\n      this.footerElement = document.createElement('footer');\n      this.footerElement.classList.add('footer');\n      this.footerContainer = document.createElement('div');\n      this.footerContainer.classList.add('container');\n      this.footerContainer.append(copyrightElement);\n      this.footerElement.appendChild(this.footerContainer);\n    }\n  }]);\n\n  return appView;\n}();\n\n//# sourceURL=webpack:///./js/modules/views/app.js?")},"./js/utils/ie-fix.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ieFix", function() { return ieFix; });\n/* eslint-disable */\nvar ieFix = function ieFix() {\n  // Polyfills\n  //---------------------------------\n  // forEach\n  if (window.NodeList && !NodeList.prototype.forEach) {\n    NodeList.prototype.forEach = function (callback, thisArg) {\n      thisArg = thisArg || window;\n\n      for (var i = 0; i < this.length; i++) {\n        callback.call(thisArg, this[i], i, this);\n      }\n    };\n  } // includes\n\n\n  if (!Array.prototype.includes) {\n    Object.defineProperty(Array.prototype, \'includes\', {\n      value: function value(searchElement, fromIndex) {\n        if (this == null) {\n          throw new TypeError(\'"this" is null or not defined\');\n        }\n\n        var o = Object(this);\n        var len = o.length >>> 0;\n\n        if (len === 0) {\n          return false;\n        }\n\n        var n = fromIndex | 0;\n        var k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);\n\n        function sameValueZero(x, y) {\n          return x === y || typeof x === \'number\' && typeof y === \'number\' && isNaN(x) && isNaN(y);\n        }\n\n        while (k < len) {\n          if (sameValueZero(o[k], searchElement)) {\n            return true;\n          }\n\n          k++;\n        }\n\n        return false;\n      }\n    });\n  } // matches\n\n\n  if (!Element.prototype.matches) {\n    Element.prototype.matches = Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector || function (s) {\n      var matches = (this.document || this.ownerDocument).querySelectorAll(s);\n      var i = matches.length; // eslint-disable-next-line no-empty\n\n      while (--i >= 0 && matches.item(i) !== this) {}\n\n      return i > -1;\n    };\n  } // closest\n\n\n  if (!Element.prototype.matches) {\n    Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\n  }\n\n  if (!Element.prototype.closest) {\n    Element.prototype.closest = function (s) {\n      var el = this;\n\n      do {\n        if (el.matches(s)) {\n          return el;\n        }\n\n        el = el.parentElement || el.parentNode;\n      } while (el !== null && el.nodeType === 1);\n\n      return null;\n    };\n  } // prepend\n\n\n  (function (arr) {\n    arr.forEach(function (item) {\n      if (item.hasOwnProperty("prepend")) {\n        return;\n      }\n\n      Object.defineProperty(item, "prepend", {\n        configurable: true,\n        enumerable: true,\n        writable: true,\n        value: function prepend() {\n          // eslint-disable-next-line prefer-rest-params\n          var argArr = Array.prototype.slice.call(arguments);\n          var docFrag = document.createDocumentFragment();\n          argArr.forEach(function (argItem) {\n            var isNode = argItem instanceof Node;\n            docFrag.appendChild(isNode ? argItem : document.createTextNode(String(argItem)));\n          });\n          this.insertBefore(docFrag, this.firstChild);\n        }\n      });\n    });\n  })([Element.prototype, Document.prototype, DocumentFragment.prototype]); // append\n\n\n  (function (arr) {\n    arr.forEach(function (item) {\n      if (item.hasOwnProperty("append")) {\n        return;\n      }\n\n      Object.defineProperty(item, "append", {\n        configurable: true,\n        enumerable: true,\n        writable: true,\n        value: function append() {\n          // eslint-disable-next-line prefer-rest-params\n          var argArr = Array.prototype.slice.call(arguments);\n          var docFrag = document.createDocumentFragment();\n          argArr.forEach(function (argItem) {\n            var isNode = argItem instanceof Node;\n            docFrag.appendChild(isNode ? argItem : document.createTextNode(String(argItem)));\n          });\n          this.appendChild(docFrag);\n        }\n      });\n    });\n  })([Element.prototype, Document.prototype, DocumentFragment.prototype]); // before\n\n\n  (function (arr) {\n    arr.forEach(function (item) {\n      if (item.hasOwnProperty("before")) {\n        return;\n      }\n\n      Object.defineProperty(item, "before", {\n        configurable: true,\n        enumerable: true,\n        writable: true,\n        value: function before() {\n          // eslint-disable-next-line prefer-rest-params\n          var argArr = Array.prototype.slice.call(arguments);\n          var docFrag = document.createDocumentFragment();\n          argArr.forEach(function (argItem) {\n            var isNode = argItem instanceof Node;\n            docFrag.appendChild(isNode ? argItem : document.createTextNode(String(argItem)));\n          });\n          this.parentNode.insertBefore(docFrag, this);\n        }\n      });\n    });\n  })([Element.prototype, CharacterData.prototype, DocumentType.prototype]); // remove\n\n\n  (function (arr) {\n    arr.forEach(function (item) {\n      if (item.hasOwnProperty("remove")) {\n        return;\n      }\n\n      Object.defineProperty(item, "remove", {\n        configurable: true,\n        enumerable: true,\n        writable: true,\n        value: function remove() {\n          if (this.parentNode !== null) {\n            this.parentNode.removeChild(this);\n          }\n        }\n      });\n    });\n  })([Element.prototype, CharacterData.prototype, DocumentType.prototype]); // startsWith\n\n\n  if (!String.prototype.startsWith) {\n    // eslint-disable-next-line no-extend-native\n    Object.defineProperty(String.prototype, "startsWith", {\n      value: function value(search, rawPos) {\n        var pos = rawPos > 0 ? rawPos | 0 : 0;\n        return this.substring(pos, pos + search.length) === search;\n      }\n    });\n  } // Fixes\n  //---------------------------------\n  // ie download\n\n\n  var ie11Download = function ie11Download(el) {\n    if (el.href === "") {\n      throw Error("The element has no href value.");\n    }\n\n    var filename = el.getAttribute("download");\n\n    if (filename === null || filename === "") {\n      var tmp = el.href.split("/");\n      filename = tmp[tmp.length - 1];\n    }\n\n    el.addEventListener("click", function (evt) {\n      evt.preventDefault();\n      var xhr = new XMLHttpRequest();\n\n      xhr.onloadstart = function () {\n        xhr.responseType = "blob";\n      };\n\n      xhr.onload = function () {\n        navigator.msSaveOrOpenBlob(xhr.response, filename);\n      };\n\n      xhr.open("GET", el.href, true);\n      xhr.send();\n    });\n  };\n\n  if (window.navigator.msSaveBlob) {\n    var downloadLinks = document.querySelectorAll("a[download]");\n\n    if (downloadLinks.length) {\n      downloadLinks.forEach(function (el) {\n        ie11Download(el);\n      });\n    }\n  } // ie svg focus fix\n\n\n  var unfocusableSvg = function unfocusableSvg() {\n    if (!(!!window.MSInputMethodContext && !!document.documentMode)) {\n      return;\n    }\n\n    var svg = document.querySelectorAll(\'svg\');\n    svg.forEach(function (el) {\n      el.setAttribute(\'focusable\', \'false\');\n    });\n  };\n\n  unfocusableSvg(); //ie footer nailing\n\n  var ieFooterNailing = function ieFooterNailing() {\n    var main = document.querySelector(\'main\');\n    var header = document.querySelector(\'.header\');\n    var footer = document.querySelector(\'.footer\');\n    var headerH;\n    var footerH;\n    var mainHMin;\n\n    if (!main || !(!!window.MSInputMethodContext && !!document.documentMode)) {\n      return;\n    }\n\n    var mainHeight = function mainHeight() {\n      // eslint-disable-next-line no-unused-expressions\n      header ? headerH = header.getBoundingClientRect().height : headerH = 0; // eslint-disable-next-line no-unused-expressions\n\n      footer ? footerH = footer.getBoundingClientRect().height : footerH = 0;\n      mainHMin = window.innerHeight;\n      main.style.minHeight = mainHMin - (headerH + footerH) + \'px\';\n    };\n\n    document.addEventListener(\'loadDOMContentLoaded\', mainHeight());\n    window.addEventListener(\'resize\', mainHeight);\n  };\n\n  ieFooterNailing();\n};\n\n\n\n//# sourceURL=webpack:///./js/utils/ie-fix.js?')},"./js/vendor/svg.js":function(module,exports,__webpack_require__){eval("var __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*!\n* svg.js - A lightweight library for manipulating and animating SVG.\n* @version 2.7.1\n* https://svgdotjs.github.io/\n*\n* @copyright Wout Fierens <wout@mick-wout.com>\n* @license MIT\n*\n* BUILT: Fri Nov 30 2018 10:01:55 GMT+0100 (GMT+01:00)\n*/\n;\n\n(function (root, factory) {\n  /* istanbul ignore next */\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n      return factory(root, root.document);\n    }).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(typeof window !== \"undefined\" ? window : this, function (window, document) {\n  // Find global reference - uses 'this' by default when available,\n  // falls back to 'window' otherwise (for bundlers like Webpack)\n  var globalRef = typeof this !== \"undefined\" ? this : window; // The main wrapping element\n\n  var SVG = globalRef.SVG = function (element) {\n    if (SVG.supported) {\n      element = new SVG.Doc(element);\n      if (!SVG.parser.draw) SVG.prepare();\n      return element;\n    }\n  }; // Default namespaces\n\n\n  SVG.ns = 'http://www.w3.org/2000/svg';\n  SVG.xmlns = 'http://www.w3.org/2000/xmlns/';\n  SVG.xlink = 'http://www.w3.org/1999/xlink';\n  SVG.svgjs = 'http://svgjs.com/svgjs'; // Svg support test\n\n  SVG.supported = function () {\n    return !!document.createElementNS && !!document.createElementNS(SVG.ns, 'svg').createSVGRect;\n  }(); // Don't bother to continue if SVG is not supported\n\n\n  if (!SVG.supported) return false; // Element id sequence\n\n  SVG.did = 1000; // Get next named element id\n\n  SVG.eid = function (name) {\n    return 'Svgjs' + capitalize(name) + SVG.did++;\n  }; // Method for element creation\n\n\n  SVG.create = function (name) {\n    // create element\n    var element = document.createElementNS(this.ns, name); // apply unique id\n\n    element.setAttribute('id', this.eid(name));\n    return element;\n  }; // Method for extending objects\n\n\n  SVG.extend = function () {\n    var modules, methods, key, i; // Get list of modules\n\n    modules = [].slice.call(arguments); // Get object with extensions\n\n    methods = modules.pop();\n\n    for (i = modules.length - 1; i >= 0; i--) {\n      if (modules[i]) for (key in methods) {\n        modules[i].prototype[key] = methods[key];\n      }\n    } // Make sure SVG.Set inherits any newly added methods\n\n\n    if (SVG.Set && SVG.Set.inherit) SVG.Set.inherit();\n  }; // Invent new element\n\n\n  SVG.invent = function (config) {\n    // Create element initializer\n    var initializer = typeof config.create == 'function' ? config.create : function () {\n      this.constructor.call(this, SVG.create(config.create));\n    }; // Inherit prototype\n\n    if (config.inherit) initializer.prototype = new config.inherit(); // Extend with methods\n\n    if (config.extend) SVG.extend(initializer, config.extend); // Attach construct method to parent\n\n    if (config.construct) SVG.extend(config.parent || SVG.Container, config.construct);\n    return initializer;\n  }; // Adopt existing svg elements\n\n\n  SVG.adopt = function (node) {\n    // check for presence of node\n    if (!node) return null; // make sure a node isn't already adopted\n\n    if (node.instance) return node.instance; // initialize variables\n\n    var element; // adopt with element-specific settings\n\n    if (node.nodeName == 'svg') element = node.parentNode instanceof window.SVGElement ? new SVG.Nested() : new SVG.Doc();else if (node.nodeName == 'linearGradient') element = new SVG.Gradient('linear');else if (node.nodeName == 'radialGradient') element = new SVG.Gradient('radial');else if (SVG[capitalize(node.nodeName)]) element = new SVG[capitalize(node.nodeName)]();else element = new SVG.Element(node); // ensure references\n\n    element.type = node.nodeName;\n    element.node = node;\n    node.instance = element; // SVG.Class specific preparations\n\n    if (element instanceof SVG.Doc) element.namespace().defs(); // pull svgjs data from the dom (getAttributeNS doesn't work in html5)\n\n    element.setData(JSON.parse(node.getAttribute('svgjs:data')) || {});\n    return element;\n  }; // Initialize parsing element\n\n\n  SVG.prepare = function () {\n    // Select document body and create invisible svg element\n    var body = document.getElementsByTagName('body')[0],\n        draw = (body ? new SVG.Doc(body) : SVG.adopt(document.documentElement).nested()).size(2, 0); // Create parser object\n\n    SVG.parser = {\n      body: body || document.documentElement,\n      draw: draw.style('opacity:0;position:absolute;left:-100%;top:-100%;overflow:hidden').attr('focusable', 'false').node,\n      poly: draw.polyline().node,\n      path: draw.path().node,\n      native: SVG.create('svg')\n    };\n  };\n\n  SVG.parser = {\n    native: SVG.create('svg')\n  };\n  document.addEventListener('DOMContentLoaded', function () {\n    if (!SVG.parser.draw) SVG.prepare();\n  }, false); // Storage for regular expressions\n\n  SVG.regex = {\n    // Parse unit value\n    numberAndUnit: /^([+-]?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?)([a-z%]*)$/i // Parse hex value\n    ,\n    hex: /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i // Parse rgb value\n    ,\n    rgb: /rgb\\((\\d+),(\\d+),(\\d+)\\)/ // Parse reference id\n    ,\n    reference: /#([a-z0-9\\-_]+)/i // splits a transformation chain\n    ,\n    transforms: /\\)\\s*,?\\s*/ // Whitespace\n    ,\n    whitespace: /\\s/g // Test hex value\n    ,\n    isHex: /^#[a-f0-9]{3,6}$/i // Test rgb value\n    ,\n    isRgb: /^rgb\\(/ // Test css declaration\n    ,\n    isCss: /[^:]+:[^;]+;?/ // Test for blank string\n    ,\n    isBlank: /^(\\s+)?$/ // Test for numeric string\n    ,\n    isNumber: /^[+-]?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i // Test for percent value\n    ,\n    isPercent: /^-?[\\d\\.]+%$/ // Test for image url\n    ,\n    isImage: /\\.(jpg|jpeg|png|gif|svg)(\\?[^=]+.*)?/i // split at whitespace and comma\n    ,\n    delimiter: /[\\s,]+/ // The following regex are used to parse the d attribute of a path\n    // Matches all hyphens which are not after an exponent\n    ,\n    hyphen: /([^e])\\-/gi // Replaces and tests for all path letters\n    ,\n    pathLetters: /[MLHVCSQTAZ]/gi // yes we need this one, too\n    ,\n    isPathLetter: /[MLHVCSQTAZ]/i // matches 0.154.23.45\n    ,\n    numbersWithDots: /((\\d?\\.\\d+(?:e[+-]?\\d+)?)((?:\\.\\d+(?:e[+-]?\\d+)?)+))+/gi // matches .\n    ,\n    dots: /\\./g\n  };\n  SVG.utils = {\n    // Map function\n    map: function map(array, block) {\n      var i,\n          il = array.length,\n          result = [];\n\n      for (i = 0; i < il; i++) {\n        result.push(block(array[i]));\n      }\n\n      return result;\n    } // Filter function\n    ,\n    filter: function filter(array, block) {\n      var i,\n          il = array.length,\n          result = [];\n\n      for (i = 0; i < il; i++) {\n        if (block(array[i])) result.push(array[i]);\n      }\n\n      return result;\n    } // Degrees to radians\n    ,\n    radians: function radians(d) {\n      return d % 360 * Math.PI / 180;\n    } // Radians to degrees\n    ,\n    degrees: function degrees(r) {\n      return r * 180 / Math.PI % 360;\n    },\n    filterSVGElements: function filterSVGElements(nodes) {\n      return this.filter(nodes, function (el) {\n        return el instanceof window.SVGElement;\n      });\n    }\n  };\n  SVG.defaults = {\n    // Default attribute values\n    attrs: {\n      // fill and stroke\n      'fill-opacity': 1,\n      'stroke-opacity': 1,\n      'stroke-width': 0,\n      'stroke-linejoin': 'miter',\n      'stroke-linecap': 'butt',\n      fill: '#000000',\n      stroke: '#000000',\n      opacity: 1 // position\n      ,\n      x: 0,\n      y: 0,\n      cx: 0,\n      cy: 0 // size\n      ,\n      width: 0,\n      height: 0 // radius\n      ,\n      r: 0,\n      rx: 0,\n      ry: 0 // gradient\n      ,\n      offset: 0,\n      'stop-opacity': 1,\n      'stop-color': '#000000' // text\n      ,\n      'font-size': 16,\n      'font-family': 'Helvetica, Arial, sans-serif',\n      'text-anchor': 'start'\n    }\n  }; // Module for color convertions\n\n  SVG.Color = function (color) {\n    var match; // initialize defaults\n\n    this.r = 0;\n    this.g = 0;\n    this.b = 0;\n    if (!color) return; // parse color\n\n    if (typeof color === 'string') {\n      if (SVG.regex.isRgb.test(color)) {\n        // get rgb values\n        match = SVG.regex.rgb.exec(color.replace(SVG.regex.whitespace, '')); // parse numeric values\n\n        this.r = parseInt(match[1]);\n        this.g = parseInt(match[2]);\n        this.b = parseInt(match[3]);\n      } else if (SVG.regex.isHex.test(color)) {\n        // get hex values\n        match = SVG.regex.hex.exec(fullHex(color)); // parse numeric values\n\n        this.r = parseInt(match[1], 16);\n        this.g = parseInt(match[2], 16);\n        this.b = parseInt(match[3], 16);\n      }\n    } else if (_typeof(color) === 'object') {\n      this.r = color.r;\n      this.g = color.g;\n      this.b = color.b;\n    }\n  };\n\n  SVG.extend(SVG.Color, {\n    // Default to hex conversion\n    toString: function toString() {\n      return this.toHex();\n    } // Build hex value\n    ,\n    toHex: function toHex() {\n      return '#' + compToHex(this.r) + compToHex(this.g) + compToHex(this.b);\n    } // Build rgb value\n    ,\n    toRgb: function toRgb() {\n      return 'rgb(' + [this.r, this.g, this.b].join() + ')';\n    } // Calculate true brightness\n    ,\n    brightness: function brightness() {\n      return this.r / 255 * 0.30 + this.g / 255 * 0.59 + this.b / 255 * 0.11;\n    } // Make color morphable\n    ,\n    morph: function morph(color) {\n      this.destination = new SVG.Color(color);\n      return this;\n    } // Get morphed color at given position\n    ,\n    at: function at(pos) {\n      // make sure a destination is defined\n      if (!this.destination) return this; // normalise pos\n\n      pos = pos < 0 ? 0 : pos > 1 ? 1 : pos; // generate morphed color\n\n      return new SVG.Color({\n        r: ~~(this.r + (this.destination.r - this.r) * pos),\n        g: ~~(this.g + (this.destination.g - this.g) * pos),\n        b: ~~(this.b + (this.destination.b - this.b) * pos)\n      });\n    }\n  }); // Testers\n  // Test if given value is a color string\n\n  SVG.Color.test = function (color) {\n    color += '';\n    return SVG.regex.isHex.test(color) || SVG.regex.isRgb.test(color);\n  }; // Test if given value is a rgb object\n\n\n  SVG.Color.isRgb = function (color) {\n    return color && typeof color.r == 'number' && typeof color.g == 'number' && typeof color.b == 'number';\n  }; // Test if given value is a color\n\n\n  SVG.Color.isColor = function (color) {\n    return SVG.Color.isRgb(color) || SVG.Color.test(color);\n  }; // Module for array conversion\n\n\n  SVG.Array = function (array, fallback) {\n    array = (array || []).valueOf(); // if array is empty and fallback is provided, use fallback\n\n    if (array.length == 0 && fallback) array = fallback.valueOf(); // parse array\n\n    this.value = this.parse(array);\n  };\n\n  SVG.extend(SVG.Array, {\n    // Make array morphable\n    morph: function morph(array) {\n      this.destination = this.parse(array); // normalize length of arrays\n\n      if (this.value.length != this.destination.length) {\n        var lastValue = this.value[this.value.length - 1],\n            lastDestination = this.destination[this.destination.length - 1];\n\n        while (this.value.length > this.destination.length) {\n          this.destination.push(lastDestination);\n        }\n\n        while (this.value.length < this.destination.length) {\n          this.value.push(lastValue);\n        }\n      }\n\n      return this;\n    } // Clean up any duplicate points\n    ,\n    settle: function settle() {\n      // find all unique values\n      for (var i = 0, il = this.value.length, seen = []; i < il; i++) {\n        if (seen.indexOf(this.value[i]) == -1) seen.push(this.value[i]);\n      } // set new value\n\n\n      return this.value = seen;\n    } // Get morphed array at given position\n    ,\n    at: function at(pos) {\n      // make sure a destination is defined\n      if (!this.destination) return this; // generate morphed array\n\n      for (var i = 0, il = this.value.length, array = []; i < il; i++) {\n        array.push(this.value[i] + (this.destination[i] - this.value[i]) * pos);\n      }\n\n      return new SVG.Array(array);\n    } // Convert array to string\n    ,\n    toString: function toString() {\n      return this.value.join(' ');\n    } // Real value\n    ,\n    valueOf: function valueOf() {\n      return this.value;\n    } // Parse whitespace separated string\n    ,\n    parse: function parse(array) {\n      array = array.valueOf(); // if already is an array, no need to parse it\n\n      if (Array.isArray(array)) return array;\n      return this.split(array);\n    } // Strip unnecessary whitespace\n    ,\n    split: function split(string) {\n      return string.trim().split(SVG.regex.delimiter).map(parseFloat);\n    } // Reverse array\n    ,\n    reverse: function reverse() {\n      this.value.reverse();\n      return this;\n    },\n    clone: function clone() {\n      var clone = new this.constructor();\n      clone.value = array_clone(this.value);\n      return clone;\n    }\n  }); // Poly points array\n\n  SVG.PointArray = function (array, fallback) {\n    SVG.Array.call(this, array, fallback || [[0, 0]]);\n  }; // Inherit from SVG.Array\n\n\n  SVG.PointArray.prototype = new SVG.Array();\n  SVG.PointArray.prototype.constructor = SVG.PointArray;\n  SVG.extend(SVG.PointArray, {\n    // Convert array to string\n    toString: function toString() {\n      // convert to a poly point string\n      for (var i = 0, il = this.value.length, array = []; i < il; i++) {\n        array.push(this.value[i].join(','));\n      }\n\n      return array.join(' ');\n    } // Convert array to line object\n    ,\n    toLine: function toLine() {\n      return {\n        x1: this.value[0][0],\n        y1: this.value[0][1],\n        x2: this.value[1][0],\n        y2: this.value[1][1]\n      };\n    } // Get morphed array at given position\n    ,\n    at: function at(pos) {\n      // make sure a destination is defined\n      if (!this.destination) return this; // generate morphed point string\n\n      for (var i = 0, il = this.value.length, array = []; i < il; i++) {\n        array.push([this.value[i][0] + (this.destination[i][0] - this.value[i][0]) * pos, this.value[i][1] + (this.destination[i][1] - this.value[i][1]) * pos]);\n      }\n\n      return new SVG.PointArray(array);\n    } // Parse point string and flat array\n    ,\n    parse: function parse(array) {\n      var points = [];\n      array = array.valueOf(); // if it is an array\n\n      if (Array.isArray(array)) {\n        // and it is not flat, there is no need to parse it\n        if (Array.isArray(array[0])) {\n          // make sure to use a clone\n          return array.map(function (el) {\n            return el.slice();\n          });\n        } else if (array[0].x != null) {\n          // allow point objects to be passed\n          return array.map(function (el) {\n            return [el.x, el.y];\n          });\n        }\n      } else {\n        // Else, it is considered as a string\n        // parse points\n        array = array.trim().split(SVG.regex.delimiter).map(parseFloat);\n      } // validate points - https://svgwg.org/svg2-draft/shapes.html#DataTypePoints\n      // Odd number of coordinates is an error. In such cases, drop the last odd coordinate.\n\n\n      if (array.length % 2 !== 0) array.pop(); // wrap points in two-tuples and parse points as floats\n\n      for (var i = 0, len = array.length; i < len; i = i + 2) {\n        points.push([array[i], array[i + 1]]);\n      }\n\n      return points;\n    } // Move point string\n    ,\n    move: function move(x, y) {\n      var box = this.bbox(); // get relative offset\n\n      x -= box.x;\n      y -= box.y; // move every point\n\n      if (!isNaN(x) && !isNaN(y)) for (var i = this.value.length - 1; i >= 0; i--) {\n        this.value[i] = [this.value[i][0] + x, this.value[i][1] + y];\n      }\n      return this;\n    } // Resize poly string\n    ,\n    size: function size(width, height) {\n      var i,\n          box = this.bbox(); // recalculate position of all points according to new size\n\n      for (i = this.value.length - 1; i >= 0; i--) {\n        if (box.width) this.value[i][0] = (this.value[i][0] - box.x) * width / box.width + box.x;\n        if (box.height) this.value[i][1] = (this.value[i][1] - box.y) * height / box.height + box.y;\n      }\n\n      return this;\n    } // Get bounding box of points\n    ,\n    bbox: function bbox() {\n      SVG.parser.poly.setAttribute('points', this.toString());\n      return SVG.parser.poly.getBBox();\n    }\n  });\n  var pathHandlers = {\n    M: function M(c, p, p0) {\n      p.x = p0.x = c[0];\n      p.y = p0.y = c[1];\n      return ['M', p.x, p.y];\n    },\n    L: function L(c, p) {\n      p.x = c[0];\n      p.y = c[1];\n      return ['L', c[0], c[1]];\n    },\n    H: function H(c, p) {\n      p.x = c[0];\n      return ['H', c[0]];\n    },\n    V: function V(c, p) {\n      p.y = c[0];\n      return ['V', c[0]];\n    },\n    C: function C(c, p) {\n      p.x = c[4];\n      p.y = c[5];\n      return ['C', c[0], c[1], c[2], c[3], c[4], c[5]];\n    },\n    S: function S(c, p) {\n      p.x = c[2];\n      p.y = c[3];\n      return ['S', c[0], c[1], c[2], c[3]];\n    },\n    Q: function Q(c, p) {\n      p.x = c[2];\n      p.y = c[3];\n      return ['Q', c[0], c[1], c[2], c[3]];\n    },\n    T: function T(c, p) {\n      p.x = c[0];\n      p.y = c[1];\n      return ['T', c[0], c[1]];\n    },\n    Z: function Z(c, p, p0) {\n      p.x = p0.x;\n      p.y = p0.y;\n      return ['Z'];\n    },\n    A: function A(c, p) {\n      p.x = c[5];\n      p.y = c[6];\n      return ['A', c[0], c[1], c[2], c[3], c[4], c[5], c[6]];\n    }\n  };\n  var mlhvqtcsa = 'mlhvqtcsaz'.split('');\n\n  for (var i = 0, il = mlhvqtcsa.length; i < il; ++i) {\n    pathHandlers[mlhvqtcsa[i]] = function (i) {\n      return function (c, p, p0) {\n        if (i == 'H') c[0] = c[0] + p.x;else if (i == 'V') c[0] = c[0] + p.y;else if (i == 'A') {\n          c[5] = c[5] + p.x, c[6] = c[6] + p.y;\n        } else for (var j = 0, jl = c.length; j < jl; ++j) {\n          c[j] = c[j] + (j % 2 ? p.y : p.x);\n        }\n        return pathHandlers[i](c, p, p0);\n      };\n    }(mlhvqtcsa[i].toUpperCase());\n  } // Path points array\n\n\n  SVG.PathArray = function (array, fallback) {\n    SVG.Array.call(this, array, fallback || [['M', 0, 0]]);\n  }; // Inherit from SVG.Array\n\n\n  SVG.PathArray.prototype = new SVG.Array();\n  SVG.PathArray.prototype.constructor = SVG.PathArray;\n  SVG.extend(SVG.PathArray, {\n    // Convert array to string\n    toString: function toString() {\n      return arrayToString(this.value);\n    } // Move path string\n    ,\n    move: function move(x, y) {\n      // get bounding box of current situation\n      var box = this.bbox(); // get relative offset\n\n      x -= box.x;\n      y -= box.y;\n\n      if (!isNaN(x) && !isNaN(y)) {\n        // move every point\n        for (var l, i = this.value.length - 1; i >= 0; i--) {\n          l = this.value[i][0];\n\n          if (l == 'M' || l == 'L' || l == 'T') {\n            this.value[i][1] += x;\n            this.value[i][2] += y;\n          } else if (l == 'H') {\n            this.value[i][1] += x;\n          } else if (l == 'V') {\n            this.value[i][1] += y;\n          } else if (l == 'C' || l == 'S' || l == 'Q') {\n            this.value[i][1] += x;\n            this.value[i][2] += y;\n            this.value[i][3] += x;\n            this.value[i][4] += y;\n\n            if (l == 'C') {\n              this.value[i][5] += x;\n              this.value[i][6] += y;\n            }\n          } else if (l == 'A') {\n            this.value[i][6] += x;\n            this.value[i][7] += y;\n          }\n        }\n      }\n\n      return this;\n    } // Resize path string\n    ,\n    size: function size(width, height) {\n      // get bounding box of current situation\n      var i,\n          l,\n          box = this.bbox(); // recalculate position of all points according to new size\n\n      for (i = this.value.length - 1; i >= 0; i--) {\n        l = this.value[i][0];\n\n        if (l == 'M' || l == 'L' || l == 'T') {\n          this.value[i][1] = (this.value[i][1] - box.x) * width / box.width + box.x;\n          this.value[i][2] = (this.value[i][2] - box.y) * height / box.height + box.y;\n        } else if (l == 'H') {\n          this.value[i][1] = (this.value[i][1] - box.x) * width / box.width + box.x;\n        } else if (l == 'V') {\n          this.value[i][1] = (this.value[i][1] - box.y) * height / box.height + box.y;\n        } else if (l == 'C' || l == 'S' || l == 'Q') {\n          this.value[i][1] = (this.value[i][1] - box.x) * width / box.width + box.x;\n          this.value[i][2] = (this.value[i][2] - box.y) * height / box.height + box.y;\n          this.value[i][3] = (this.value[i][3] - box.x) * width / box.width + box.x;\n          this.value[i][4] = (this.value[i][4] - box.y) * height / box.height + box.y;\n\n          if (l == 'C') {\n            this.value[i][5] = (this.value[i][5] - box.x) * width / box.width + box.x;\n            this.value[i][6] = (this.value[i][6] - box.y) * height / box.height + box.y;\n          }\n        } else if (l == 'A') {\n          // resize radii\n          this.value[i][1] = this.value[i][1] * width / box.width;\n          this.value[i][2] = this.value[i][2] * height / box.height; // move position values\n\n          this.value[i][6] = (this.value[i][6] - box.x) * width / box.width + box.x;\n          this.value[i][7] = (this.value[i][7] - box.y) * height / box.height + box.y;\n        }\n      }\n\n      return this;\n    } // Test if the passed path array use the same path data commands as this path array\n    ,\n    equalCommands: function equalCommands(pathArray) {\n      var i, il, equalCommands;\n      pathArray = new SVG.PathArray(pathArray);\n      equalCommands = this.value.length === pathArray.value.length;\n\n      for (i = 0, il = this.value.length; equalCommands && i < il; i++) {\n        equalCommands = this.value[i][0] === pathArray.value[i][0];\n      }\n\n      return equalCommands;\n    } // Make path array morphable\n    ,\n    morph: function morph(pathArray) {\n      pathArray = new SVG.PathArray(pathArray);\n\n      if (this.equalCommands(pathArray)) {\n        this.destination = pathArray;\n      } else {\n        this.destination = null;\n      }\n\n      return this;\n    } // Get morphed path array at given position\n    ,\n    at: function at(pos) {\n      // make sure a destination is defined\n      if (!this.destination) return this;\n      var sourceArray = this.value,\n          destinationArray = this.destination.value,\n          array = [],\n          pathArray = new SVG.PathArray(),\n          i,\n          il,\n          j,\n          jl; // Animate has specified in the SVG spec\n      // See: https://www.w3.org/TR/SVG11/paths.html#PathElement\n\n      for (i = 0, il = sourceArray.length; i < il; i++) {\n        array[i] = [sourceArray[i][0]];\n\n        for (j = 1, jl = sourceArray[i].length; j < jl; j++) {\n          array[i][j] = sourceArray[i][j] + (destinationArray[i][j] - sourceArray[i][j]) * pos;\n        } // For the two flags of the elliptical arc command, the SVG spec say:\n        // Flags and booleans are interpolated as fractions between zero and one, with any non-zero value considered to be a value of one/true\n        // Elliptical arc command as an array followed by corresponding indexes:\n        // ['A', rx, ry, x-axis-rotation, large-arc-flag, sweep-flag, x, y]\n        //   0    1   2        3                 4             5      6  7\n\n\n        if (array[i][0] === 'A') {\n          array[i][4] = +(array[i][4] != 0);\n          array[i][5] = +(array[i][5] != 0);\n        }\n      } // Directly modify the value of a path array, this is done this way for performance\n\n\n      pathArray.value = array;\n      return pathArray;\n    } // Absolutize and parse path to array\n    ,\n    parse: function parse(array) {\n      // if it's already a patharray, no need to parse it\n      if (array instanceof SVG.PathArray) return array.valueOf(); // prepare for parsing\n\n      var i,\n          x0,\n          y0,\n          s,\n          seg,\n          arr,\n          x = 0,\n          y = 0,\n          paramCnt = {\n        'M': 2,\n        'L': 2,\n        'H': 1,\n        'V': 1,\n        'C': 6,\n        'S': 4,\n        'Q': 4,\n        'T': 2,\n        'A': 7,\n        'Z': 0\n      };\n\n      if (typeof array == 'string') {\n        array = array.replace(SVG.regex.numbersWithDots, pathRegReplace) // convert 45.123.123 to 45.123 .123\n        .replace(SVG.regex.pathLetters, ' $& ') // put some room between letters and numbers\n        .replace(SVG.regex.hyphen, '$1 -') // add space before hyphen\n        .trim() // trim\n        .split(SVG.regex.delimiter); // split into array\n      } else {\n        array = array.reduce(function (prev, curr) {\n          return [].concat.call(prev, curr);\n        }, []);\n      } // array now is an array containing all parts of a path e.g. ['M', '0', '0', 'L', '30', '30' ...]\n\n\n      var arr = [],\n          p = new SVG.Point(),\n          p0 = new SVG.Point(),\n          index = 0,\n          len = array.length;\n\n      do {\n        // Test if we have a path letter\n        if (SVG.regex.isPathLetter.test(array[index])) {\n          s = array[index];\n          ++index; // If last letter was a move command and we got no new, it defaults to [L]ine\n        } else if (s == 'M') {\n          s = 'L';\n        } else if (s == 'm') {\n          s = 'l';\n        }\n\n        arr.push(pathHandlers[s].call(null, array.slice(index, index = index + paramCnt[s.toUpperCase()]).map(parseFloat), p, p0));\n      } while (len > index);\n\n      return arr;\n    } // Get bounding box of path\n    ,\n    bbox: function bbox() {\n      SVG.parser.path.setAttribute('d', this.toString());\n      return SVG.parser.path.getBBox();\n    }\n  }); // Module for unit convertions\n\n  SVG.Number = SVG.invent({\n    // Initialize\n    create: function create(value, unit) {\n      // initialize defaults\n      this.value = 0;\n      this.unit = unit || ''; // parse value\n\n      if (typeof value === 'number') {\n        // ensure a valid numeric value\n        this.value = isNaN(value) ? 0 : !isFinite(value) ? value < 0 ? -3.4e+38 : +3.4e+38 : value;\n      } else if (typeof value === 'string') {\n        unit = value.match(SVG.regex.numberAndUnit);\n\n        if (unit) {\n          // make value numeric\n          this.value = parseFloat(unit[1]); // normalize\n\n          if (unit[5] == '%') this.value /= 100;else if (unit[5] == 's') this.value *= 1000; // store unit\n\n          this.unit = unit[5];\n        }\n      } else {\n        if (value instanceof SVG.Number) {\n          this.value = value.valueOf();\n          this.unit = value.unit;\n        }\n      }\n    } // Add methods\n    ,\n    extend: {\n      // Stringalize\n      toString: function toString() {\n        return (this.unit == '%' ? ~~(this.value * 1e8) / 1e6 : this.unit == 's' ? this.value / 1e3 : this.value) + this.unit;\n      },\n      toJSON: function toJSON() {\n        return this.toString();\n      },\n      // Convert to primitive\n      valueOf: function valueOf() {\n        return this.value;\n      } // Add number\n      ,\n      plus: function plus(number) {\n        number = new SVG.Number(number);\n        return new SVG.Number(this + number, this.unit || number.unit);\n      } // Subtract number\n      ,\n      minus: function minus(number) {\n        number = new SVG.Number(number);\n        return new SVG.Number(this - number, this.unit || number.unit);\n      } // Multiply number\n      ,\n      times: function times(number) {\n        number = new SVG.Number(number);\n        return new SVG.Number(this * number, this.unit || number.unit);\n      } // Divide number\n      ,\n      divide: function divide(number) {\n        number = new SVG.Number(number);\n        return new SVG.Number(this / number, this.unit || number.unit);\n      } // Convert to different unit\n      ,\n      to: function to(unit) {\n        var number = new SVG.Number(this);\n        if (typeof unit === 'string') number.unit = unit;\n        return number;\n      } // Make number morphable\n      ,\n      morph: function morph(number) {\n        this.destination = new SVG.Number(number);\n\n        if (number.relative) {\n          this.destination.value += this.value;\n        }\n\n        return this;\n      } // Get morphed number at given position\n      ,\n      at: function at(pos) {\n        // Make sure a destination is defined\n        if (!this.destination) return this; // Generate new morphed number\n\n        return new SVG.Number(this.destination).minus(this).times(pos).plus(this);\n      }\n    }\n  });\n  SVG.Element = SVG.invent({\n    // Initialize node\n    create: function create(node) {\n      // make stroke value accessible dynamically\n      this._stroke = SVG.defaults.attrs.stroke;\n      this._event = null;\n      this._events = {}; // initialize data object\n\n      this.dom = {}; // create circular reference\n\n      if (this.node = node) {\n        this.type = node.nodeName;\n        this.node.instance = this;\n        this._events = node._events || {}; // store current attribute value\n\n        this._stroke = node.getAttribute('stroke') || this._stroke;\n      }\n    } // Add class methods\n    ,\n    extend: {\n      // Move over x-axis\n      x: function x(_x) {\n        return this.attr('x', _x);\n      } // Move over y-axis\n      ,\n      y: function y(_y) {\n        return this.attr('y', _y);\n      } // Move by center over x-axis\n      ,\n      cx: function cx(x) {\n        return x == null ? this.x() + this.width() / 2 : this.x(x - this.width() / 2);\n      } // Move by center over y-axis\n      ,\n      cy: function cy(y) {\n        return y == null ? this.y() + this.height() / 2 : this.y(y - this.height() / 2);\n      } // Move element to given x and y values\n      ,\n      move: function move(x, y) {\n        return this.x(x).y(y);\n      } // Move element by its center\n      ,\n      center: function center(x, y) {\n        return this.cx(x).cy(y);\n      } // Set width of element\n      ,\n      width: function width(_width) {\n        return this.attr('width', _width);\n      } // Set height of element\n      ,\n      height: function height(_height) {\n        return this.attr('height', _height);\n      } // Set element size to given width and height\n      ,\n      size: function size(width, height) {\n        var p = proportionalSize(this, width, height);\n        return this.width(new SVG.Number(p.width)).height(new SVG.Number(p.height));\n      } // Clone element\n      ,\n      clone: function clone(parent) {\n        // write dom data to the dom so the clone can pickup the data\n        this.writeDataToDom(); // clone element and assign new id\n\n        var clone = assignNewId(this.node.cloneNode(true)); // insert the clone in the given parent or after myself\n\n        if (parent) parent.add(clone);else this.after(clone);\n        return clone;\n      } // Remove element\n      ,\n      remove: function remove() {\n        if (this.parent()) this.parent().removeElement(this);\n        return this;\n      } // Replace element\n      ,\n      replace: function replace(element) {\n        this.after(element).remove();\n        return element;\n      } // Add element to given container and return self\n      ,\n      addTo: function addTo(parent) {\n        return parent.put(this);\n      } // Add element to given container and return container\n      ,\n      putIn: function putIn(parent) {\n        return parent.add(this);\n      } // Get / set id\n      ,\n      id: function id(_id) {\n        return this.attr('id', _id);\n      } // Checks whether the given point inside the bounding box of the element\n      ,\n      inside: function inside(x, y) {\n        var box = this.bbox();\n        return x > box.x && y > box.y && x < box.x + box.width && y < box.y + box.height;\n      } // Show element\n      ,\n      show: function show() {\n        return this.style('display', '');\n      } // Hide element\n      ,\n      hide: function hide() {\n        return this.style('display', 'none');\n      } // Is element visible?\n      ,\n      visible: function visible() {\n        return this.style('display') != 'none';\n      } // Return id on string conversion\n      ,\n      toString: function toString() {\n        return this.attr('id');\n      } // Return array of classes on the node\n      ,\n      classes: function classes() {\n        var attr = this.attr('class');\n        return attr == null ? [] : attr.trim().split(SVG.regex.delimiter);\n      } // Return true if class exists on the node, false otherwise\n      ,\n      hasClass: function hasClass(name) {\n        return this.classes().indexOf(name) != -1;\n      } // Add class to the node\n      ,\n      addClass: function addClass(name) {\n        if (!this.hasClass(name)) {\n          var array = this.classes();\n          array.push(name);\n          this.attr('class', array.join(' '));\n        }\n\n        return this;\n      } // Remove class from the node\n      ,\n      removeClass: function removeClass(name) {\n        if (this.hasClass(name)) {\n          this.attr('class', this.classes().filter(function (c) {\n            return c != name;\n          }).join(' '));\n        }\n\n        return this;\n      } // Toggle the presence of a class on the node\n      ,\n      toggleClass: function toggleClass(name) {\n        return this.hasClass(name) ? this.removeClass(name) : this.addClass(name);\n      } // Get referenced element form attribute value\n      ,\n      reference: function reference(attr) {\n        return SVG.get(this.attr(attr));\n      } // Returns the parent element instance\n      ,\n      parent: function parent(type) {\n        var parent = this; // check for parent\n\n        if (!parent.node.parentNode) return null; // get parent element\n\n        parent = SVG.adopt(parent.node.parentNode);\n        if (!type) return parent; // loop trough ancestors if type is given\n\n        while (parent && parent.node instanceof window.SVGElement) {\n          if (typeof type === 'string' ? parent.matches(type) : parent instanceof type) return parent;\n          if (!parent.node.parentNode || parent.node.parentNode.nodeName == '#document' || parent.node.parentNode.nodeName == '#document-fragment') return null; // #759, #720\n\n          parent = SVG.adopt(parent.node.parentNode);\n        }\n      } // Get parent document\n      ,\n      doc: function doc() {\n        return this instanceof SVG.Doc ? this : this.parent(SVG.Doc);\n      } // return array of all ancestors of given type up to the root svg\n      ,\n      parents: function parents(type) {\n        var parents = [],\n            parent = this;\n\n        do {\n          parent = parent.parent(type);\n          if (!parent || !parent.node) break;\n          parents.push(parent);\n        } while (parent.parent);\n\n        return parents;\n      } // matches the element vs a css selector\n      ,\n      matches: function matches(selector) {\n        return _matches(this.node, selector);\n      } // Returns the svg node to call native svg methods on it\n      ,\n      native: function native() {\n        return this.node;\n      } // Import raw svg\n      ,\n      svg: function svg(_svg) {\n        // create temporary holder\n        var well = document.createElement('svg'); // act as a setter if svg is given\n\n        if (_svg && this instanceof SVG.Parent) {\n          // dump raw svg\n          well.innerHTML = '<svg>' + _svg.replace(/\\n/, '').replace(/<([\\w:-]+)([^<]+?)\\/>/g, '<$1$2></$1>') + '</svg>'; // transplant nodes\n\n          for (var i = 0, il = well.firstChild.childNodes.length; i < il; i++) {\n            this.node.appendChild(well.firstChild.firstChild);\n          } // otherwise act as a getter\n\n        } else {\n          // create a wrapping svg element in case of partial content\n          well.appendChild(_svg = document.createElement('svg')); // write svgjs data to the dom\n\n          this.writeDataToDom(); // insert a copy of this node\n\n          _svg.appendChild(this.node.cloneNode(true)); // return target element\n\n\n          return well.innerHTML.replace(/^<svg>/, '').replace(/<\\/svg>$/, '');\n        }\n\n        return this;\n      } // write svgjs data to the dom\n      ,\n      writeDataToDom: function writeDataToDom() {\n        // dump variables recursively\n        if (this.each || this.lines) {\n          var fn = this.each ? this : this.lines();\n          fn.each(function () {\n            this.writeDataToDom();\n          });\n        } // remove previously set data\n\n\n        this.node.removeAttribute('svgjs:data');\n        if (Object.keys(this.dom).length) this.node.setAttribute('svgjs:data', JSON.stringify(this.dom)); // see #428\n\n        return this;\n      } // set given data to the elements data property\n      ,\n      setData: function setData(o) {\n        this.dom = o;\n        return this;\n      },\n      is: function is(obj) {\n        return _is(this, obj);\n      }\n    }\n  });\n  SVG.easing = {\n    '-': function _(pos) {\n      return pos;\n    },\n    '<>': function _(pos) {\n      return -Math.cos(pos * Math.PI) / 2 + 0.5;\n    },\n    '>': function _(pos) {\n      return Math.sin(pos * Math.PI / 2);\n    },\n    '<': function _(pos) {\n      return -Math.cos(pos * Math.PI / 2) + 1;\n    }\n  };\n\n  SVG.morph = function (pos) {\n    return function (from, to) {\n      return new SVG.MorphObj(from, to).at(pos);\n    };\n  };\n\n  SVG.Situation = SVG.invent({\n    create: function create(o) {\n      this.init = false;\n      this.reversed = false;\n      this.reversing = false;\n      this.duration = new SVG.Number(o.duration).valueOf();\n      this.delay = new SVG.Number(o.delay).valueOf();\n      this.start = +new Date() + this.delay;\n      this.finish = this.start + this.duration;\n      this.ease = o.ease; // this.loop is incremented from 0 to this.loops\n      // it is also incremented when in an infinite loop (when this.loops is true)\n\n      this.loop = 0;\n      this.loops = false;\n      this.animations = {// functionToCall: [list of morphable objects]\n        // e.g. move: [SVG.Number, SVG.Number]\n      };\n      this.attrs = {// holds all attributes which are not represented from a function svg.js provides\n        // e.g. someAttr: SVG.Number\n      };\n      this.styles = {// holds all styles which should be animated\n        // e.g. fill-color: SVG.Color\n      };\n      this.transforms = [// holds all transformations as transformation objects\n        // e.g. [SVG.Rotate, SVG.Translate, SVG.Matrix]\n      ];\n      this.once = {// functions to fire at a specific position\n        // e.g. \"0.5\": function foo(){}\n      };\n    }\n  });\n  SVG.FX = SVG.invent({\n    create: function create(element) {\n      this._target = element;\n      this.situations = [];\n      this.active = false;\n      this.situation = null;\n      this.paused = false;\n      this.lastPos = 0;\n      this.pos = 0; // The absolute position of an animation is its position in the context of its complete duration (including delay and loops)\n      // When performing a delay, absPos is below 0 and when performing a loop, its value is above 1\n\n      this.absPos = 0;\n      this._speed = 1;\n    },\n    extend: {\n      /**\n       * sets or returns the target of this animation\n       * @param o object || number In case of Object it holds all parameters. In case of number its the duration of the animation\n       * @param ease function || string Function which should be used for easing or easing keyword\n       * @param delay Number indicating the delay before the animation starts\n       * @return target || this\n       */\n      animate: function animate(o, ease, delay) {\n        if (_typeof(o) == 'object') {\n          ease = o.ease;\n          delay = o.delay;\n          o = o.duration;\n        }\n\n        var situation = new SVG.Situation({\n          duration: o || 1000,\n          delay: delay || 0,\n          ease: SVG.easing[ease || '-'] || ease\n        });\n        this.queue(situation);\n        return this;\n      }\n      /**\n       * sets a delay before the next element of the queue is called\n       * @param delay Duration of delay in milliseconds\n       * @return this.target()\n       */\n      ,\n      delay: function delay(_delay) {\n        // The delay is performed by an empty situation with its duration\n        // attribute set to the duration of the delay\n        var situation = new SVG.Situation({\n          duration: _delay,\n          delay: 0,\n          ease: SVG.easing['-']\n        });\n        return this.queue(situation);\n      }\n      /**\n       * sets or returns the target of this animation\n       * @param null || target SVG.Element which should be set as new target\n       * @return target || this\n       */\n      ,\n      target: function target(_target) {\n        if (_target && _target instanceof SVG.Element) {\n          this._target = _target;\n          return this;\n        }\n\n        return this._target;\n      } // returns the absolute position at a given time\n      ,\n      timeToAbsPos: function timeToAbsPos(timestamp) {\n        return (timestamp - this.situation.start) / (this.situation.duration / this._speed);\n      } // returns the timestamp from a given absolute positon\n      ,\n      absPosToTime: function absPosToTime(absPos) {\n        return this.situation.duration / this._speed * absPos + this.situation.start;\n      } // starts the animationloop\n      ,\n      startAnimFrame: function startAnimFrame() {\n        this.stopAnimFrame();\n        this.animationFrame = window.requestAnimationFrame(function () {\n          this.step();\n        }.bind(this));\n      } // cancels the animationframe\n      ,\n      stopAnimFrame: function stopAnimFrame() {\n        window.cancelAnimationFrame(this.animationFrame);\n      } // kicks off the animation - only does something when the queue is currently not active and at least one situation is set\n      ,\n      start: function start() {\n        // dont start if already started\n        if (!this.active && this.situation) {\n          this.active = true;\n          this.startCurrent();\n        }\n\n        return this;\n      } // start the current situation\n      ,\n      startCurrent: function startCurrent() {\n        this.situation.start = +new Date() + this.situation.delay / this._speed;\n        this.situation.finish = this.situation.start + this.situation.duration / this._speed;\n        return this.initAnimations().step();\n      }\n      /**\n       * adds a function / Situation to the animation queue\n       * @param fn function / situation to add\n       * @return this\n       */\n      ,\n      queue: function queue(fn) {\n        if (typeof fn == 'function' || fn instanceof SVG.Situation) this.situations.push(fn);\n        if (!this.situation) this.situation = this.situations.shift();\n        return this;\n      }\n      /**\n       * pulls next element from the queue and execute it\n       * @return this\n       */\n      ,\n      dequeue: function dequeue() {\n        // stop current animation\n        this.stop(); // get next animation from queue\n\n        this.situation = this.situations.shift();\n\n        if (this.situation) {\n          if (this.situation instanceof SVG.Situation) {\n            this.start();\n          } else {\n            // If it is not a SVG.Situation, then it is a function, we execute it\n            this.situation.call(this);\n          }\n        }\n\n        return this;\n      } // updates all animations to the current state of the element\n      // this is important when one property could be changed from another property\n      ,\n      initAnimations: function initAnimations() {\n        var i, j, source;\n        var s = this.situation;\n        if (s.init) return this;\n\n        for (i in s.animations) {\n          source = this.target()[i]();\n\n          if (!Array.isArray(source)) {\n            source = [source];\n          }\n\n          if (!Array.isArray(s.animations[i])) {\n            s.animations[i] = [s.animations[i]];\n          } //if(s.animations[i].length > source.length) {\n          //  source.concat = source.concat(s.animations[i].slice(source.length, s.animations[i].length))\n          //}\n\n\n          for (j = source.length; j--;) {\n            // The condition is because some methods return a normal number instead\n            // of a SVG.Number\n            if (s.animations[i][j] instanceof SVG.Number) source[j] = new SVG.Number(source[j]);\n            s.animations[i][j] = source[j].morph(s.animations[i][j]);\n          }\n        }\n\n        for (i in s.attrs) {\n          s.attrs[i] = new SVG.MorphObj(this.target().attr(i), s.attrs[i]);\n        }\n\n        for (i in s.styles) {\n          s.styles[i] = new SVG.MorphObj(this.target().style(i), s.styles[i]);\n        }\n\n        s.initialTransformation = this.target().matrixify();\n        s.init = true;\n        return this;\n      },\n      clearQueue: function clearQueue() {\n        this.situations = [];\n        return this;\n      },\n      clearCurrent: function clearCurrent() {\n        this.situation = null;\n        return this;\n      }\n      /** stops the animation immediately\n       * @param jumpToEnd A Boolean indicating whether to complete the current animation immediately.\n       * @param clearQueue A Boolean indicating whether to remove queued animation as well.\n       * @return this\n       */\n      ,\n      stop: function stop(jumpToEnd, clearQueue) {\n        var active = this.active;\n        this.active = false;\n\n        if (clearQueue) {\n          this.clearQueue();\n        }\n\n        if (jumpToEnd && this.situation) {\n          // initialize the situation if it was not\n          !active && this.startCurrent();\n          this.atEnd();\n        }\n\n        this.stopAnimFrame();\n        return this.clearCurrent();\n      }\n      /** resets the element to the state where the current element has started\n       * @return this\n       */\n      ,\n      reset: function reset() {\n        if (this.situation) {\n          var temp = this.situation;\n          this.stop();\n          this.situation = temp;\n          this.atStart();\n        }\n\n        return this;\n      } // Stop the currently-running animation, remove all queued animations, and complete all animations for the element.\n      ,\n      finish: function finish() {\n        this.stop(true, false);\n\n        while (this.dequeue().situation && this.stop(true, false)) {\n          ;\n        }\n\n        this.clearQueue().clearCurrent();\n        return this;\n      } // set the internal animation pointer at the start position, before any loops, and updates the visualisation\n      ,\n      atStart: function atStart() {\n        return this.at(0, true);\n      } // set the internal animation pointer at the end position, after all the loops, and updates the visualisation\n      ,\n      atEnd: function atEnd() {\n        if (this.situation.loops === true) {\n          // If in a infinite loop, we end the current iteration\n          this.situation.loops = this.situation.loop + 1;\n        }\n\n        if (typeof this.situation.loops == 'number') {\n          // If performing a finite number of loops, we go after all the loops\n          return this.at(this.situation.loops, true);\n        } else {\n          // If no loops, we just go at the end\n          return this.at(1, true);\n        }\n      } // set the internal animation pointer to the specified position and updates the visualisation\n      // if isAbsPos is true, pos is treated as an absolute position\n      ,\n      at: function at(pos, isAbsPos) {\n        var durDivSpd = this.situation.duration / this._speed;\n        this.absPos = pos; // If pos is not an absolute position, we convert it into one\n\n        if (!isAbsPos) {\n          if (this.situation.reversed) this.absPos = 1 - this.absPos;\n          this.absPos += this.situation.loop;\n        }\n\n        this.situation.start = +new Date() - this.absPos * durDivSpd;\n        this.situation.finish = this.situation.start + durDivSpd;\n        return this.step(true);\n      }\n      /**\n       * sets or returns the speed of the animations\n       * @param speed null || Number The new speed of the animations\n       * @return Number || this\n       */\n      ,\n      speed: function speed(_speed) {\n        if (_speed === 0) return this.pause();\n\n        if (_speed) {\n          this._speed = _speed; // We use an absolute position here so that speed can affect the delay before the animation\n\n          return this.at(this.absPos, true);\n        } else return this._speed;\n      } // Make loopable\n      ,\n      loop: function loop(times, reverse) {\n        var c = this.last(); // store total loops\n\n        c.loops = times != null ? times : true;\n        c.loop = 0;\n        if (reverse) c.reversing = true;\n        return this;\n      } // pauses the animation\n      ,\n      pause: function pause() {\n        this.paused = true;\n        this.stopAnimFrame();\n        return this;\n      } // unpause the animation\n      ,\n      play: function play() {\n        if (!this.paused) return this;\n        this.paused = false; // We use an absolute position here so that the delay before the animation can be paused\n\n        return this.at(this.absPos, true);\n      }\n      /**\n       * toggle or set the direction of the animation\n       * true sets direction to backwards while false sets it to forwards\n       * @param reversed Boolean indicating whether to reverse the animation or not (default: toggle the reverse status)\n       * @return this\n       */\n      ,\n      reverse: function reverse(reversed) {\n        var c = this.last();\n        if (typeof reversed == 'undefined') c.reversed = !c.reversed;else c.reversed = reversed;\n        return this;\n      }\n      /**\n       * returns a float from 0-1 indicating the progress of the current animation\n       * @param eased Boolean indicating whether the returned position should be eased or not\n       * @return number\n       */\n      ,\n      progress: function progress(easeIt) {\n        return easeIt ? this.situation.ease(this.pos) : this.pos;\n      }\n      /**\n       * adds a callback function which is called when the current animation is finished\n       * @param fn Function which should be executed as callback\n       * @return number\n       */\n      ,\n      after: function after(fn) {\n        var c = this.last(),\n            wrapper = function wrapper(e) {\n          if (e.detail.situation == c) {\n            fn.call(this, c);\n            this.off('finished.fx', wrapper); // prevent memory leak\n          }\n        };\n\n        this.target().on('finished.fx', wrapper);\n        return this._callStart();\n      } // adds a callback which is called whenever one animation step is performed\n      ,\n      during: function during(fn) {\n        var c = this.last(),\n            wrapper = function wrapper(e) {\n          if (e.detail.situation == c) {\n            fn.call(this, e.detail.pos, SVG.morph(e.detail.pos), e.detail.eased, c);\n          }\n        }; // see above\n\n\n        this.target().off('during.fx', wrapper).on('during.fx', wrapper);\n        this.after(function () {\n          this.off('during.fx', wrapper);\n        });\n        return this._callStart();\n      } // calls after ALL animations in the queue are finished\n      ,\n      afterAll: function afterAll(fn) {\n        var wrapper = function wrapper(e) {\n          fn.call(this);\n          this.off('allfinished.fx', wrapper);\n        }; // see above\n\n\n        this.target().off('allfinished.fx', wrapper).on('allfinished.fx', wrapper);\n        return this._callStart();\n      } // calls on every animation step for all animations\n      ,\n      duringAll: function duringAll(fn) {\n        var wrapper = function wrapper(e) {\n          fn.call(this, e.detail.pos, SVG.morph(e.detail.pos), e.detail.eased, e.detail.situation);\n        };\n\n        this.target().off('during.fx', wrapper).on('during.fx', wrapper);\n        this.afterAll(function () {\n          this.off('during.fx', wrapper);\n        });\n        return this._callStart();\n      },\n      last: function last() {\n        return this.situations.length ? this.situations[this.situations.length - 1] : this.situation;\n      } // adds one property to the animations\n      ,\n      add: function add(method, args, type) {\n        this.last()[type || 'animations'][method] = args;\n        return this._callStart();\n      }\n      /** perform one step of the animation\n       *  @param ignoreTime Boolean indicating whether to ignore time and use position directly or recalculate position based on time\n       *  @return this\n       */\n      ,\n      step: function step(ignoreTime) {\n        // convert current time to an absolute position\n        if (!ignoreTime) this.absPos = this.timeToAbsPos(+new Date()); // This part convert an absolute position to a position\n\n        if (this.situation.loops !== false) {\n          var absPos, absPosInt, lastLoop; // If the absolute position is below 0, we just treat it as if it was 0\n\n          absPos = Math.max(this.absPos, 0);\n          absPosInt = Math.floor(absPos);\n\n          if (this.situation.loops === true || absPosInt < this.situation.loops) {\n            this.pos = absPos - absPosInt;\n            lastLoop = this.situation.loop;\n            this.situation.loop = absPosInt;\n          } else {\n            this.absPos = this.situation.loops;\n            this.pos = 1; // The -1 here is because we don't want to toggle reversed when all the loops have been completed\n\n            lastLoop = this.situation.loop - 1;\n            this.situation.loop = this.situation.loops;\n          }\n\n          if (this.situation.reversing) {\n            // Toggle reversed if an odd number of loops as occured since the last call of step\n            this.situation.reversed = this.situation.reversed != Boolean((this.situation.loop - lastLoop) % 2);\n          }\n        } else {\n          // If there are no loop, the absolute position must not be above 1\n          this.absPos = Math.min(this.absPos, 1);\n          this.pos = this.absPos;\n        } // while the absolute position can be below 0, the position must not be below 0\n\n\n        if (this.pos < 0) this.pos = 0;\n        if (this.situation.reversed) this.pos = 1 - this.pos; // apply easing\n\n        var eased = this.situation.ease(this.pos); // call once-callbacks\n\n        for (var i in this.situation.once) {\n          if (i > this.lastPos && i <= eased) {\n            this.situation.once[i].call(this.target(), this.pos, eased);\n            delete this.situation.once[i];\n          }\n        } // fire during callback with position, eased position and current situation as parameter\n\n\n        if (this.active) this.target().fire('during', {\n          pos: this.pos,\n          eased: eased,\n          fx: this,\n          situation: this.situation\n        }); // the user may call stop or finish in the during callback\n        // so make sure that we still have a valid situation\n\n        if (!this.situation) {\n          return this;\n        } // apply the actual animation to every property\n\n\n        this.eachAt(); // do final code when situation is finished\n\n        if (this.pos == 1 && !this.situation.reversed || this.situation.reversed && this.pos == 0) {\n          // stop animation callback\n          this.stopAnimFrame(); // fire finished callback with current situation as parameter\n\n          this.target().fire('finished', {\n            fx: this,\n            situation: this.situation\n          });\n\n          if (!this.situations.length) {\n            this.target().fire('allfinished'); // Recheck the length since the user may call animate in the afterAll callback\n\n            if (!this.situations.length) {\n              this.target().off('.fx'); // there shouldnt be any binding left, but to make sure...\n\n              this.active = false;\n            }\n          } // start next animation\n\n\n          if (this.active) this.dequeue();else this.clearCurrent();\n        } else if (!this.paused && this.active) {\n          // we continue animating when we are not at the end\n          this.startAnimFrame();\n        } // save last eased position for once callback triggering\n\n\n        this.lastPos = eased;\n        return this;\n      } // calculates the step for every property and calls block with it\n      ,\n      eachAt: function eachAt() {\n        var i,\n            len,\n            at,\n            self = this,\n            target = this.target(),\n            s = this.situation; // apply animations which can be called trough a method\n\n        for (i in s.animations) {\n          at = [].concat(s.animations[i]).map(function (el) {\n            return typeof el !== 'string' && el.at ? el.at(s.ease(self.pos), self.pos) : el;\n          });\n          target[i].apply(target, at);\n        } // apply animation which has to be applied with attr()\n\n\n        for (i in s.attrs) {\n          at = [i].concat(s.attrs[i]).map(function (el) {\n            return typeof el !== 'string' && el.at ? el.at(s.ease(self.pos), self.pos) : el;\n          });\n          target.attr.apply(target, at);\n        } // apply animation which has to be applied with style()\n\n\n        for (i in s.styles) {\n          at = [i].concat(s.styles[i]).map(function (el) {\n            return typeof el !== 'string' && el.at ? el.at(s.ease(self.pos), self.pos) : el;\n          });\n          target.style.apply(target, at);\n        } // animate initialTransformation which has to be chained\n\n\n        if (s.transforms.length) {\n          // get initial initialTransformation\n          at = s.initialTransformation;\n\n          for (i = 0, len = s.transforms.length; i < len; i++) {\n            // get next transformation in chain\n            var a = s.transforms[i]; // multiply matrix directly\n\n            if (a instanceof SVG.Matrix) {\n              if (a.relative) {\n                at = at.multiply(new SVG.Matrix().morph(a).at(s.ease(this.pos)));\n              } else {\n                at = at.morph(a).at(s.ease(this.pos));\n              }\n\n              continue;\n            } // when transformation is absolute we have to reset the needed transformation first\n\n\n            if (!a.relative) a.undo(at.extract()); // and reapply it after\n\n            at = at.multiply(a.at(s.ease(this.pos)));\n          } // set new matrix on element\n\n\n          target.matrix(at);\n        }\n\n        return this;\n      } // adds an once-callback which is called at a specific position and never again\n      ,\n      once: function once(pos, fn, isEased) {\n        var c = this.last();\n        if (!isEased) pos = c.ease(pos);\n        c.once[pos] = fn;\n        return this;\n      },\n      _callStart: function _callStart() {\n        setTimeout(function () {\n          this.start();\n        }.bind(this), 0);\n        return this;\n      }\n    },\n    parent: SVG.Element // Add method to parent elements\n    ,\n    construct: {\n      // Get fx module or create a new one, then animate with given duration and ease\n      animate: function animate(o, ease, delay) {\n        return (this.fx || (this.fx = new SVG.FX(this))).animate(o, ease, delay);\n      },\n      delay: function delay(_delay2) {\n        return (this.fx || (this.fx = new SVG.FX(this))).delay(_delay2);\n      },\n      stop: function stop(jumpToEnd, clearQueue) {\n        if (this.fx) this.fx.stop(jumpToEnd, clearQueue);\n        return this;\n      },\n      finish: function finish() {\n        if (this.fx) this.fx.finish();\n        return this;\n      } // Pause current animation\n      ,\n      pause: function pause() {\n        if (this.fx) this.fx.pause();\n        return this;\n      } // Play paused current animation\n      ,\n      play: function play() {\n        if (this.fx) this.fx.play();\n        return this;\n      } // Set/Get the speed of the animations\n      ,\n      speed: function speed(_speed2) {\n        if (this.fx) if (_speed2 == null) return this.fx.speed();else this.fx.speed(_speed2);\n        return this;\n      }\n    }\n  }); // MorphObj is used whenever no morphable object is given\n\n  SVG.MorphObj = SVG.invent({\n    create: function create(from, to) {\n      // prepare color for morphing\n      if (SVG.Color.isColor(to)) return new SVG.Color(from).morph(to); // check if we have a list of values\n\n      if (SVG.regex.delimiter.test(from)) {\n        // prepare path for morphing\n        if (SVG.regex.pathLetters.test(from)) return new SVG.PathArray(from).morph(to); // prepare value list for morphing\n        else return new SVG.Array(from).morph(to);\n      } // prepare number for morphing\n\n\n      if (SVG.regex.numberAndUnit.test(to)) return new SVG.Number(from).morph(to); // prepare for plain morphing\n\n      this.value = from;\n      this.destination = to;\n    },\n    extend: {\n      at: function at(pos, real) {\n        return real < 1 ? this.value : this.destination;\n      },\n      valueOf: function valueOf() {\n        return this.value;\n      }\n    }\n  });\n  SVG.extend(SVG.FX, {\n    // Add animatable attributes\n    attr: function attr(a, v, relative) {\n      // apply attributes individually\n      if (_typeof(a) == 'object') {\n        for (var key in a) {\n          this.attr(key, a[key]);\n        }\n      } else {\n        this.add(a, v, 'attrs');\n      }\n\n      return this;\n    } // Add animatable styles\n    ,\n    style: function style(s, v) {\n      if (_typeof(s) == 'object') for (var key in s) {\n        this.style(key, s[key]);\n      } else this.add(s, v, 'styles');\n      return this;\n    } // Animatable x-axis\n    ,\n    x: function x(_x2, relative) {\n      if (this.target() instanceof SVG.G) {\n        this.transform({\n          x: _x2\n        }, relative);\n        return this;\n      }\n\n      var num = new SVG.Number(_x2);\n      num.relative = relative;\n      return this.add('x', num);\n    } // Animatable y-axis\n    ,\n    y: function y(_y2, relative) {\n      if (this.target() instanceof SVG.G) {\n        this.transform({\n          y: _y2\n        }, relative);\n        return this;\n      }\n\n      var num = new SVG.Number(_y2);\n      num.relative = relative;\n      return this.add('y', num);\n    } // Animatable center x-axis\n    ,\n    cx: function cx(x) {\n      return this.add('cx', new SVG.Number(x));\n    } // Animatable center y-axis\n    ,\n    cy: function cy(y) {\n      return this.add('cy', new SVG.Number(y));\n    } // Add animatable move\n    ,\n    move: function move(x, y) {\n      return this.x(x).y(y);\n    } // Add animatable center\n    ,\n    center: function center(x, y) {\n      return this.cx(x).cy(y);\n    } // Add animatable size\n    ,\n    size: function size(width, height) {\n      if (this.target() instanceof SVG.Text) {\n        // animate font size for Text elements\n        this.attr('font-size', width);\n      } else {\n        // animate bbox based size for all other elements\n        var box;\n\n        if (!width || !height) {\n          box = this.target().bbox();\n        }\n\n        if (!width) {\n          width = box.width / box.height * height;\n        }\n\n        if (!height) {\n          height = box.height / box.width * width;\n        }\n\n        this.add('width', new SVG.Number(width)).add('height', new SVG.Number(height));\n      }\n\n      return this;\n    } // Add animatable width\n    ,\n    width: function width(_width2) {\n      return this.add('width', new SVG.Number(_width2));\n    } // Add animatable height\n    ,\n    height: function height(_height2) {\n      return this.add('height', new SVG.Number(_height2));\n    } // Add animatable plot\n    ,\n    plot: function plot(a, b, c, d) {\n      // Lines can be plotted with 4 arguments\n      if (arguments.length == 4) {\n        return this.plot([a, b, c, d]);\n      }\n\n      return this.add('plot', new (this.target().morphArray)(a));\n    } // Add leading method\n    ,\n    leading: function leading(value) {\n      return this.target().leading ? this.add('leading', new SVG.Number(value)) : this;\n    } // Add animatable viewbox\n    ,\n    viewbox: function viewbox(x, y, width, height) {\n      if (this.target() instanceof SVG.Container) {\n        this.add('viewbox', new SVG.ViewBox(x, y, width, height));\n      }\n\n      return this;\n    },\n    update: function update(o) {\n      if (this.target() instanceof SVG.Stop) {\n        if (typeof o == 'number' || o instanceof SVG.Number) {\n          return this.update({\n            offset: arguments[0],\n            color: arguments[1],\n            opacity: arguments[2]\n          });\n        }\n\n        if (o.opacity != null) this.attr('stop-opacity', o.opacity);\n        if (o.color != null) this.attr('stop-color', o.color);\n        if (o.offset != null) this.attr('offset', o.offset);\n      }\n\n      return this;\n    }\n  });\n  SVG.Box = SVG.invent({\n    create: function create(x, y, width, height) {\n      if (_typeof(x) == 'object' && !(x instanceof SVG.Element)) {\n        // chromes getBoundingClientRect has no x and y property\n        return SVG.Box.call(this, x.left != null ? x.left : x.x, x.top != null ? x.top : x.y, x.width, x.height);\n      } else if (arguments.length == 4) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n      } // add center, right, bottom...\n\n\n      fullBox(this);\n    },\n    extend: {\n      // Merge rect box with another, return a new instance\n      merge: function merge(box) {\n        var b = new this.constructor(); // merge boxes\n\n        b.x = Math.min(this.x, box.x);\n        b.y = Math.min(this.y, box.y);\n        b.width = Math.max(this.x + this.width, box.x + box.width) - b.x;\n        b.height = Math.max(this.y + this.height, box.y + box.height) - b.y;\n        return fullBox(b);\n      },\n      transform: function transform(m) {\n        var xMin = Infinity,\n            xMax = -Infinity,\n            yMin = Infinity,\n            yMax = -Infinity,\n            p,\n            bbox;\n        var pts = [new SVG.Point(this.x, this.y), new SVG.Point(this.x2, this.y), new SVG.Point(this.x, this.y2), new SVG.Point(this.x2, this.y2)];\n        pts.forEach(function (p) {\n          p = p.transform(m);\n          xMin = Math.min(xMin, p.x);\n          xMax = Math.max(xMax, p.x);\n          yMin = Math.min(yMin, p.y);\n          yMax = Math.max(yMax, p.y);\n        });\n        bbox = new this.constructor();\n        bbox.x = xMin;\n        bbox.width = xMax - xMin;\n        bbox.y = yMin;\n        bbox.height = yMax - yMin;\n        fullBox(bbox);\n        return bbox;\n      }\n    }\n  });\n  SVG.BBox = SVG.invent({\n    // Initialize\n    create: function create(element) {\n      SVG.Box.apply(this, [].slice.call(arguments)); // get values if element is given\n\n      if (element instanceof SVG.Element) {\n        var box; // yes this is ugly, but Firefox can be a pain when it comes to elements that are not yet rendered\n\n        try {\n          if (!document.documentElement.contains) {\n            // This is IE - it does not support contains() for top-level SVGs\n            var topParent = element.node;\n\n            while (topParent.parentNode) {\n              topParent = topParent.parentNode;\n            }\n\n            if (topParent != document) throw new Exception('Element not in the dom');\n          } else {\n            // the element is NOT in the dom, throw error\n            if (!document.documentElement.contains(element.node)) throw new Exception('Element not in the dom');\n          } // find native bbox\n\n\n          box = element.node.getBBox();\n        } catch (e) {\n          if (element instanceof SVG.Shape) {\n            var clone = element.clone(SVG.parser.draw.instance).show();\n            box = clone.node.getBBox();\n            clone.remove();\n          } else {\n            box = {\n              x: element.node.clientLeft,\n              y: element.node.clientTop,\n              width: element.node.clientWidth,\n              height: element.node.clientHeight\n            };\n          }\n        }\n\n        SVG.Box.call(this, box);\n      }\n    } // Define ancestor\n    ,\n    inherit: SVG.Box // Define Parent\n    ,\n    parent: SVG.Element // Constructor\n    ,\n    construct: {\n      // Get bounding box\n      bbox: function bbox() {\n        return new SVG.BBox(this);\n      }\n    }\n  });\n  SVG.BBox.prototype.constructor = SVG.BBox;\n  SVG.extend(SVG.Element, {\n    tbox: function tbox() {\n      console.warn('Use of TBox is deprecated and mapped to RBox. Use .rbox() instead.');\n      return this.rbox(this.doc());\n    }\n  });\n  SVG.RBox = SVG.invent({\n    // Initialize\n    create: function create(element) {\n      SVG.Box.apply(this, [].slice.call(arguments));\n\n      if (element instanceof SVG.Element) {\n        SVG.Box.call(this, element.node.getBoundingClientRect());\n      }\n    },\n    inherit: SVG.Box // define Parent\n    ,\n    parent: SVG.Element,\n    extend: {\n      addOffset: function addOffset() {\n        // offset by window scroll position, because getBoundingClientRect changes when window is scrolled\n        this.x += window.pageXOffset;\n        this.y += window.pageYOffset;\n        return this;\n      }\n    } // Constructor\n    ,\n    construct: {\n      // Get rect box\n      rbox: function rbox(el) {\n        if (el) return new SVG.RBox(this).transform(el.screenCTM().inverse());\n        return new SVG.RBox(this).addOffset();\n      }\n    }\n  });\n  SVG.RBox.prototype.constructor = SVG.RBox;\n  SVG.Matrix = SVG.invent({\n    // Initialize\n    create: function create(source) {\n      var i,\n          base = arrayToMatrix([1, 0, 0, 1, 0, 0]); // ensure source as object\n\n      source = source instanceof SVG.Element ? source.matrixify() : typeof source === 'string' ? arrayToMatrix(source.split(SVG.regex.delimiter).map(parseFloat)) : arguments.length == 6 ? arrayToMatrix([].slice.call(arguments)) : Array.isArray(source) ? arrayToMatrix(source) : _typeof(source) === 'object' ? source : base; // merge source\n\n      for (i = abcdef.length - 1; i >= 0; --i) {\n        this[abcdef[i]] = source[abcdef[i]] != null ? source[abcdef[i]] : base[abcdef[i]];\n      }\n    } // Add methods\n    ,\n    extend: {\n      // Extract individual transformations\n      extract: function extract() {\n        // find delta transform points\n        var px = deltaTransformPoint(this, 0, 1),\n            py = deltaTransformPoint(this, 1, 0),\n            skewX = 180 / Math.PI * Math.atan2(px.y, px.x) - 90;\n        return {\n          // translation\n          x: this.e,\n          y: this.f,\n          transformedX: (this.e * Math.cos(skewX * Math.PI / 180) + this.f * Math.sin(skewX * Math.PI / 180)) / Math.sqrt(this.a * this.a + this.b * this.b),\n          transformedY: (this.f * Math.cos(skewX * Math.PI / 180) + this.e * Math.sin(-skewX * Math.PI / 180)) / Math.sqrt(this.c * this.c + this.d * this.d) // skew\n          ,\n          skewX: -skewX,\n          skewY: 180 / Math.PI * Math.atan2(py.y, py.x) // scale\n          ,\n          scaleX: Math.sqrt(this.a * this.a + this.b * this.b),\n          scaleY: Math.sqrt(this.c * this.c + this.d * this.d) // rotation\n          ,\n          rotation: skewX,\n          a: this.a,\n          b: this.b,\n          c: this.c,\n          d: this.d,\n          e: this.e,\n          f: this.f,\n          matrix: new SVG.Matrix(this)\n        };\n      } // Clone matrix\n      ,\n      clone: function clone() {\n        return new SVG.Matrix(this);\n      } // Morph one matrix into another\n      ,\n      morph: function morph(matrix) {\n        // store new destination\n        this.destination = new SVG.Matrix(matrix);\n        return this;\n      } // Get morphed matrix at a given position\n      ,\n      at: function at(pos) {\n        // make sure a destination is defined\n        if (!this.destination) return this; // calculate morphed matrix at a given position\n\n        var matrix = new SVG.Matrix({\n          a: this.a + (this.destination.a - this.a) * pos,\n          b: this.b + (this.destination.b - this.b) * pos,\n          c: this.c + (this.destination.c - this.c) * pos,\n          d: this.d + (this.destination.d - this.d) * pos,\n          e: this.e + (this.destination.e - this.e) * pos,\n          f: this.f + (this.destination.f - this.f) * pos\n        });\n        return matrix;\n      } // Multiplies by given matrix\n      ,\n      multiply: function multiply(matrix) {\n        return new SVG.Matrix(this.native().multiply(parseMatrix(matrix).native()));\n      } // Inverses matrix\n      ,\n      inverse: function inverse() {\n        return new SVG.Matrix(this.native().inverse());\n      } // Translate matrix\n      ,\n      translate: function translate(x, y) {\n        return new SVG.Matrix(this.native().translate(x || 0, y || 0));\n      } // Scale matrix\n      ,\n      scale: function scale(x, y, cx, cy) {\n        // support uniformal scale\n        if (arguments.length == 1) {\n          y = x;\n        } else if (arguments.length == 3) {\n          cy = cx;\n          cx = y;\n          y = x;\n        }\n\n        return this.around(cx, cy, new SVG.Matrix(x, 0, 0, y, 0, 0));\n      } // Rotate matrix\n      ,\n      rotate: function rotate(r, cx, cy) {\n        // convert degrees to radians\n        r = SVG.utils.radians(r);\n        return this.around(cx, cy, new SVG.Matrix(Math.cos(r), Math.sin(r), -Math.sin(r), Math.cos(r), 0, 0));\n      } // Flip matrix on x or y, at a given offset\n      ,\n      flip: function flip(a, o) {\n        return a == 'x' ? this.scale(-1, 1, o, 0) : a == 'y' ? this.scale(1, -1, 0, o) : this.scale(-1, -1, a, o != null ? o : a);\n      } // Skew\n      ,\n      skew: function skew(x, y, cx, cy) {\n        // support uniformal skew\n        if (arguments.length == 1) {\n          y = x;\n        } else if (arguments.length == 3) {\n          cy = cx;\n          cx = y;\n          y = x;\n        } // convert degrees to radians\n\n\n        x = SVG.utils.radians(x);\n        y = SVG.utils.radians(y);\n        return this.around(cx, cy, new SVG.Matrix(1, Math.tan(y), Math.tan(x), 1, 0, 0));\n      } // SkewX\n      ,\n      skewX: function skewX(x, cx, cy) {\n        return this.skew(x, 0, cx, cy);\n      } // SkewY\n      ,\n      skewY: function skewY(y, cx, cy) {\n        return this.skew(0, y, cx, cy);\n      } // Transform around a center point\n      ,\n      around: function around(cx, cy, matrix) {\n        return this.multiply(new SVG.Matrix(1, 0, 0, 1, cx || 0, cy || 0)).multiply(matrix).multiply(new SVG.Matrix(1, 0, 0, 1, -cx || 0, -cy || 0));\n      } // Convert to native SVGMatrix\n      ,\n      native: function native() {\n        // create new matrix\n        var matrix = SVG.parser.native.createSVGMatrix(); // update with current values\n\n        for (var i = abcdef.length - 1; i >= 0; i--) {\n          matrix[abcdef[i]] = this[abcdef[i]];\n        }\n\n        return matrix;\n      } // Convert matrix to string\n      ,\n      toString: function toString() {\n        // Construct the matrix directly, avoid values that are too small\n        return 'matrix(' + float32String(this.a) + ',' + float32String(this.b) + ',' + float32String(this.c) + ',' + float32String(this.d) + ',' + float32String(this.e) + ',' + float32String(this.f) + ')';\n      }\n    } // Define parent\n    ,\n    parent: SVG.Element // Add parent method\n    ,\n    construct: {\n      // Get current matrix\n      ctm: function ctm() {\n        return new SVG.Matrix(this.node.getCTM());\n      },\n      // Get current screen matrix\n      screenCTM: function screenCTM() {\n        /* https://bugzilla.mozilla.org/show_bug.cgi?id=1344537\n           This is needed because FF does not return the transformation matrix\n           for the inner coordinate system when getScreenCTM() is called on nested svgs.\n           However all other Browsers do that */\n        if (this instanceof SVG.Nested) {\n          var rect = this.rect(1, 1);\n          var m = rect.node.getScreenCTM();\n          rect.remove();\n          return new SVG.Matrix(m);\n        }\n\n        return new SVG.Matrix(this.node.getScreenCTM());\n      }\n    }\n  });\n  SVG.Point = SVG.invent({\n    // Initialize\n    create: function create(x, y) {\n      var i,\n          source,\n          base = {\n        x: 0,\n        y: 0\n      }; // ensure source as object\n\n      source = Array.isArray(x) ? {\n        x: x[0],\n        y: x[1]\n      } : _typeof(x) === 'object' ? {\n        x: x.x,\n        y: x.y\n      } : x != null ? {\n        x: x,\n        y: y != null ? y : x\n      } : base; // If y has no value, then x is used has its value\n      // merge source\n\n      this.x = source.x;\n      this.y = source.y;\n    } // Add methods\n    ,\n    extend: {\n      // Clone point\n      clone: function clone() {\n        return new SVG.Point(this);\n      } // Morph one point into another\n      ,\n      morph: function morph(x, y) {\n        // store new destination\n        this.destination = new SVG.Point(x, y);\n        return this;\n      } // Get morphed point at a given position\n      ,\n      at: function at(pos) {\n        // make sure a destination is defined\n        if (!this.destination) return this; // calculate morphed matrix at a given position\n\n        var point = new SVG.Point({\n          x: this.x + (this.destination.x - this.x) * pos,\n          y: this.y + (this.destination.y - this.y) * pos\n        });\n        return point;\n      } // Convert to native SVGPoint\n      ,\n      native: function native() {\n        // create new point\n        var point = SVG.parser.native.createSVGPoint(); // update with current values\n\n        point.x = this.x;\n        point.y = this.y;\n        return point;\n      } // transform point with matrix\n      ,\n      transform: function transform(matrix) {\n        return new SVG.Point(this.native().matrixTransform(matrix.native()));\n      }\n    }\n  });\n  SVG.extend(SVG.Element, {\n    // Get point\n    point: function point(x, y) {\n      return new SVG.Point(x, y).transform(this.screenCTM().inverse());\n    }\n  });\n  SVG.extend(SVG.Element, {\n    // Set svg element attribute\n    attr: function attr(a, v, n) {\n      // act as full getter\n      if (a == null) {\n        // get an object of attributes\n        a = {};\n        v = this.node.attributes;\n\n        for (n = v.length - 1; n >= 0; n--) {\n          a[v[n].nodeName] = SVG.regex.isNumber.test(v[n].nodeValue) ? parseFloat(v[n].nodeValue) : v[n].nodeValue;\n        }\n\n        return a;\n      } else if (_typeof(a) == 'object') {\n        // apply every attribute individually if an object is passed\n        for (v in a) {\n          this.attr(v, a[v]);\n        }\n      } else if (v === null) {\n        // remove value\n        this.node.removeAttribute(a);\n      } else if (v == null) {\n        // act as a getter if the first and only argument is not an object\n        v = this.node.getAttribute(a);\n        return v == null ? SVG.defaults.attrs[a] : SVG.regex.isNumber.test(v) ? parseFloat(v) : v;\n      } else {\n        // BUG FIX: some browsers will render a stroke if a color is given even though stroke width is 0\n        if (a == 'stroke-width') this.attr('stroke', parseFloat(v) > 0 ? this._stroke : null);else if (a == 'stroke') this._stroke = v; // convert image fill and stroke to patterns\n\n        if (a == 'fill' || a == 'stroke') {\n          if (SVG.regex.isImage.test(v)) v = this.doc().defs().image(v, 0, 0);\n          if (v instanceof SVG.Image) v = this.doc().defs().pattern(0, 0, function () {\n            this.add(v);\n          });\n        } // ensure correct numeric values (also accepts NaN and Infinity)\n\n\n        if (typeof v === 'number') v = new SVG.Number(v); // ensure full hex color\n        else if (SVG.Color.isColor(v)) v = new SVG.Color(v); // parse array values\n          else if (Array.isArray(v)) v = new SVG.Array(v); // if the passed attribute is leading...\n\n        if (a == 'leading') {\n          // ... call the leading method instead\n          if (this.leading) this.leading(v);\n        } else {\n          // set given attribute on node\n          typeof n === 'string' ? this.node.setAttributeNS(n, a, v.toString()) : this.node.setAttribute(a, v.toString());\n        } // rebuild if required\n\n\n        if (this.rebuild && (a == 'font-size' || a == 'x')) this.rebuild(a, v);\n      }\n\n      return this;\n    }\n  });\n  SVG.extend(SVG.Element, {\n    // Add transformations\n    transform: function transform(o, relative) {\n      // get target in case of the fx module, otherwise reference this\n      var target = this,\n          matrix,\n          bbox; // act as a getter\n\n      if (_typeof(o) !== 'object') {\n        // get current matrix\n        matrix = new SVG.Matrix(target).extract();\n        return typeof o === 'string' ? matrix[o] : matrix;\n      } // get current matrix\n\n\n      matrix = new SVG.Matrix(target); // ensure relative flag\n\n      relative = !!relative || !!o.relative; // act on matrix\n\n      if (o.a != null) {\n        matrix = relative ? // relative\n        matrix.multiply(new SVG.Matrix(o)) : // absolute\n        new SVG.Matrix(o); // act on rotation\n      } else if (o.rotation != null) {\n        // ensure centre point\n        ensureCentre(o, target); // apply transformation\n\n        matrix = relative ? // relative\n        matrix.rotate(o.rotation, o.cx, o.cy) : // absolute\n        matrix.rotate(o.rotation - matrix.extract().rotation, o.cx, o.cy); // act on scale\n      } else if (o.scale != null || o.scaleX != null || o.scaleY != null) {\n        // ensure centre point\n        ensureCentre(o, target); // ensure scale values on both axes\n\n        o.scaleX = o.scale != null ? o.scale : o.scaleX != null ? o.scaleX : 1;\n        o.scaleY = o.scale != null ? o.scale : o.scaleY != null ? o.scaleY : 1;\n\n        if (!relative) {\n          // absolute; multiply inversed values\n          var e = matrix.extract();\n          o.scaleX = o.scaleX * 1 / e.scaleX;\n          o.scaleY = o.scaleY * 1 / e.scaleY;\n        }\n\n        matrix = matrix.scale(o.scaleX, o.scaleY, o.cx, o.cy); // act on skew\n      } else if (o.skew != null || o.skewX != null || o.skewY != null) {\n        // ensure centre point\n        ensureCentre(o, target); // ensure skew values on both axes\n\n        o.skewX = o.skew != null ? o.skew : o.skewX != null ? o.skewX : 0;\n        o.skewY = o.skew != null ? o.skew : o.skewY != null ? o.skewY : 0;\n\n        if (!relative) {\n          // absolute; reset skew values\n          var e = matrix.extract();\n          matrix = matrix.multiply(new SVG.Matrix().skew(e.skewX, e.skewY, o.cx, o.cy).inverse());\n        }\n\n        matrix = matrix.skew(o.skewX, o.skewY, o.cx, o.cy); // act on flip\n      } else if (o.flip) {\n        if (o.flip == 'x' || o.flip == 'y') {\n          o.offset = o.offset == null ? target.bbox()['c' + o.flip] : o.offset;\n        } else {\n          if (o.offset == null) {\n            bbox = target.bbox();\n            o.flip = bbox.cx;\n            o.offset = bbox.cy;\n          } else {\n            o.flip = o.offset;\n          }\n        }\n\n        matrix = new SVG.Matrix().flip(o.flip, o.offset); // act on translate\n      } else if (o.x != null || o.y != null) {\n        if (relative) {\n          // relative\n          matrix = matrix.translate(o.x, o.y);\n        } else {\n          // absolute\n          if (o.x != null) matrix.e = o.x;\n          if (o.y != null) matrix.f = o.y;\n        }\n      }\n\n      return this.attr('transform', matrix);\n    }\n  });\n  SVG.extend(SVG.FX, {\n    transform: function transform(o, relative) {\n      // get target in case of the fx module, otherwise reference this\n      var target = this.target(),\n          matrix,\n          bbox; // act as a getter\n\n      if (_typeof(o) !== 'object') {\n        // get current matrix\n        matrix = new SVG.Matrix(target).extract();\n        return typeof o === 'string' ? matrix[o] : matrix;\n      } // ensure relative flag\n\n\n      relative = !!relative || !!o.relative; // act on matrix\n\n      if (o.a != null) {\n        matrix = new SVG.Matrix(o); // act on rotation\n      } else if (o.rotation != null) {\n        // ensure centre point\n        ensureCentre(o, target); // apply transformation\n\n        matrix = new SVG.Rotate(o.rotation, o.cx, o.cy); // act on scale\n      } else if (o.scale != null || o.scaleX != null || o.scaleY != null) {\n        // ensure centre point\n        ensureCentre(o, target); // ensure scale values on both axes\n\n        o.scaleX = o.scale != null ? o.scale : o.scaleX != null ? o.scaleX : 1;\n        o.scaleY = o.scale != null ? o.scale : o.scaleY != null ? o.scaleY : 1;\n        matrix = new SVG.Scale(o.scaleX, o.scaleY, o.cx, o.cy); // act on skew\n      } else if (o.skewX != null || o.skewY != null) {\n        // ensure centre point\n        ensureCentre(o, target); // ensure skew values on both axes\n\n        o.skewX = o.skewX != null ? o.skewX : 0;\n        o.skewY = o.skewY != null ? o.skewY : 0;\n        matrix = new SVG.Skew(o.skewX, o.skewY, o.cx, o.cy); // act on flip\n      } else if (o.flip) {\n        if (o.flip == 'x' || o.flip == 'y') {\n          o.offset = o.offset == null ? target.bbox()['c' + o.flip] : o.offset;\n        } else {\n          if (o.offset == null) {\n            bbox = target.bbox();\n            o.flip = bbox.cx;\n            o.offset = bbox.cy;\n          } else {\n            o.flip = o.offset;\n          }\n        }\n\n        matrix = new SVG.Matrix().flip(o.flip, o.offset); // act on translate\n      } else if (o.x != null || o.y != null) {\n        matrix = new SVG.Translate(o.x, o.y);\n      }\n\n      if (!matrix) return this;\n      matrix.relative = relative;\n      this.last().transforms.push(matrix);\n      return this._callStart();\n    }\n  });\n  SVG.extend(SVG.Element, {\n    // Reset all transformations\n    untransform: function untransform() {\n      return this.attr('transform', null);\n    },\n    // merge the whole transformation chain into one matrix and returns it\n    matrixify: function matrixify() {\n      var matrix = (this.attr('transform') || ''). // split transformations\n      split(SVG.regex.transforms).slice(0, -1).map(function (str) {\n        // generate key => value pairs\n        var kv = str.trim().split('(');\n        return [kv[0], kv[1].split(SVG.regex.delimiter).map(function (str) {\n          return parseFloat(str);\n        })];\n      }) // merge every transformation into one matrix\n      .reduce(function (matrix, transform) {\n        if (transform[0] == 'matrix') return matrix.multiply(arrayToMatrix(transform[1]));\n        return matrix[transform[0]].apply(matrix, transform[1]);\n      }, new SVG.Matrix());\n      return matrix;\n    },\n    // add an element to another parent without changing the visual representation on the screen\n    toParent: function toParent(parent) {\n      if (this == parent) return this;\n      var ctm = this.screenCTM();\n      var pCtm = parent.screenCTM().inverse();\n      this.addTo(parent).untransform().transform(pCtm.multiply(ctm));\n      return this;\n    },\n    // same as above with parent equals root-svg\n    toDoc: function toDoc() {\n      return this.toParent(this.doc());\n    }\n  });\n  SVG.Transformation = SVG.invent({\n    create: function create(source, inversed) {\n      if (arguments.length > 1 && typeof inversed != 'boolean') {\n        return this.constructor.call(this, [].slice.call(arguments));\n      }\n\n      if (Array.isArray(source)) {\n        for (var i = 0, len = this.arguments.length; i < len; ++i) {\n          this[this.arguments[i]] = source[i];\n        }\n      } else if (_typeof(source) == 'object') {\n        for (var i = 0, len = this.arguments.length; i < len; ++i) {\n          this[this.arguments[i]] = source[this.arguments[i]];\n        }\n      }\n\n      this.inversed = false;\n\n      if (inversed === true) {\n        this.inversed = true;\n      }\n    },\n    extend: {\n      arguments: [],\n      method: '',\n      at: function at(pos) {\n        var params = [];\n\n        for (var i = 0, len = this.arguments.length; i < len; ++i) {\n          params.push(this[this.arguments[i]]);\n        }\n\n        var m = this._undo || new SVG.Matrix();\n        m = new SVG.Matrix().morph(SVG.Matrix.prototype[this.method].apply(m, params)).at(pos);\n        return this.inversed ? m.inverse() : m;\n      },\n      undo: function undo(o) {\n        for (var i = 0, len = this.arguments.length; i < len; ++i) {\n          o[this.arguments[i]] = typeof this[this.arguments[i]] == 'undefined' ? 0 : o[this.arguments[i]];\n        } // The method SVG.Matrix.extract which was used before calling this\n        // method to obtain a value for the parameter o doesn't return a cx and\n        // a cy so we use the ones that were provided to this object at its creation\n\n\n        o.cx = this.cx;\n        o.cy = this.cy;\n        this._undo = new SVG[capitalize(this.method)](o, true).at(1);\n        return this;\n      }\n    }\n  });\n  SVG.Translate = SVG.invent({\n    parent: SVG.Matrix,\n    inherit: SVG.Transformation,\n    create: function create(source, inversed) {\n      this.constructor.apply(this, [].slice.call(arguments));\n    },\n    extend: {\n      arguments: ['transformedX', 'transformedY'],\n      method: 'translate'\n    }\n  });\n  SVG.Rotate = SVG.invent({\n    parent: SVG.Matrix,\n    inherit: SVG.Transformation,\n    create: function create(source, inversed) {\n      this.constructor.apply(this, [].slice.call(arguments));\n    },\n    extend: {\n      arguments: ['rotation', 'cx', 'cy'],\n      method: 'rotate',\n      at: function at(pos) {\n        var m = new SVG.Matrix().rotate(new SVG.Number().morph(this.rotation - (this._undo ? this._undo.rotation : 0)).at(pos), this.cx, this.cy);\n        return this.inversed ? m.inverse() : m;\n      },\n      undo: function undo(o) {\n        this._undo = o;\n        return this;\n      }\n    }\n  });\n  SVG.Scale = SVG.invent({\n    parent: SVG.Matrix,\n    inherit: SVG.Transformation,\n    create: function create(source, inversed) {\n      this.constructor.apply(this, [].slice.call(arguments));\n    },\n    extend: {\n      arguments: ['scaleX', 'scaleY', 'cx', 'cy'],\n      method: 'scale'\n    }\n  });\n  SVG.Skew = SVG.invent({\n    parent: SVG.Matrix,\n    inherit: SVG.Transformation,\n    create: function create(source, inversed) {\n      this.constructor.apply(this, [].slice.call(arguments));\n    },\n    extend: {\n      arguments: ['skewX', 'skewY', 'cx', 'cy'],\n      method: 'skew'\n    }\n  });\n  SVG.extend(SVG.Element, {\n    // Dynamic style generator\n    style: function style(s, v) {\n      if (arguments.length == 0) {\n        // get full style\n        return this.node.style.cssText || '';\n      } else if (arguments.length < 2) {\n        // apply every style individually if an object is passed\n        if (_typeof(s) == 'object') {\n          for (v in s) {\n            this.style(v, s[v]);\n          }\n        } else if (SVG.regex.isCss.test(s)) {\n          // parse css string\n          s = s.split(/\\s*;\\s*/) // filter out suffix ; and stuff like ;;\n          .filter(function (e) {\n            return !!e;\n          }).map(function (e) {\n            return e.split(/\\s*:\\s*/);\n          }); // apply every definition individually\n\n          while (v = s.pop()) {\n            this.style(v[0], v[1]);\n          }\n        } else {\n          // act as a getter if the first and only argument is not an object\n          return this.node.style[camelCase(s)];\n        }\n      } else {\n        this.node.style[camelCase(s)] = v === null || SVG.regex.isBlank.test(v) ? '' : v;\n      }\n\n      return this;\n    }\n  });\n  SVG.Parent = SVG.invent({\n    // Initialize node\n    create: function create(element) {\n      this.constructor.call(this, element);\n    } // Inherit from\n    ,\n    inherit: SVG.Element // Add class methods\n    ,\n    extend: {\n      // Returns all child elements\n      children: function children() {\n        return SVG.utils.map(SVG.utils.filterSVGElements(this.node.childNodes), function (node) {\n          return SVG.adopt(node);\n        });\n      } // Add given element at a position\n      ,\n      add: function add(element, i) {\n        if (i == null) this.node.appendChild(element.node);else if (element.node != this.node.childNodes[i]) this.node.insertBefore(element.node, this.node.childNodes[i]);\n        return this;\n      } // Basically does the same as `add()` but returns the added element instead\n      ,\n      put: function put(element, i) {\n        this.add(element, i);\n        return element;\n      } // Checks if the given element is a child\n      ,\n      has: function has(element) {\n        return this.index(element) >= 0;\n      } // Gets index of given element\n      ,\n      index: function index(element) {\n        return [].slice.call(this.node.childNodes).indexOf(element.node);\n      } // Get a element at the given index\n      ,\n      get: function get(i) {\n        return SVG.adopt(this.node.childNodes[i]);\n      } // Get first child\n      ,\n      first: function first() {\n        return this.get(0);\n      } // Get the last child\n      ,\n      last: function last() {\n        return this.get(this.node.childNodes.length - 1);\n      } // Iterates over all children and invokes a given block\n      ,\n      each: function each(block, deep) {\n        var i,\n            il,\n            children = this.children();\n\n        for (i = 0, il = children.length; i < il; i++) {\n          if (children[i] instanceof SVG.Element) block.apply(children[i], [i, children]);\n          if (deep && children[i] instanceof SVG.Container) children[i].each(block, deep);\n        }\n\n        return this;\n      } // Remove a given child\n      ,\n      removeElement: function removeElement(element) {\n        this.node.removeChild(element.node);\n        return this;\n      } // Remove all elements in this container\n      ,\n      clear: function clear() {\n        // remove children\n        while (this.node.hasChildNodes()) {\n          this.node.removeChild(this.node.lastChild);\n        } // remove defs reference\n\n\n        delete this._defs;\n        return this;\n      },\n      // Get defs\n      defs: function defs() {\n        return this.doc().defs();\n      }\n    }\n  });\n  SVG.extend(SVG.Parent, {\n    ungroup: function ungroup(parent, depth) {\n      if (depth === 0 || this instanceof SVG.Defs || this.node == SVG.parser.draw) return this;\n      parent = parent || (this instanceof SVG.Doc ? this : this.parent(SVG.Parent));\n      depth = depth || Infinity;\n      this.each(function () {\n        if (this instanceof SVG.Defs) return this;\n        if (this instanceof SVG.Parent) return this.ungroup(parent, depth - 1);\n        return this.toParent(parent);\n      });\n      this.node.firstChild || this.remove();\n      return this;\n    },\n    flatten: function flatten(parent, depth) {\n      return this.ungroup(parent, depth);\n    }\n  });\n  SVG.Container = SVG.invent({\n    // Initialize node\n    create: function create(element) {\n      this.constructor.call(this, element);\n    } // Inherit from\n    ,\n    inherit: SVG.Parent\n  });\n  SVG.ViewBox = SVG.invent({\n    create: function create(source) {\n      var i,\n          base = [0, 0, 0, 0];\n      var x,\n          y,\n          width,\n          height,\n          box,\n          view,\n          we,\n          he,\n          wm = 1 // width multiplier\n      ,\n          hm = 1 // height multiplier\n      ,\n          reg = /[+-]?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?/gi;\n\n      if (source instanceof SVG.Element) {\n        we = source;\n        he = source;\n        view = (source.attr('viewBox') || '').match(reg);\n        box = source.bbox; // get dimensions of current node\n\n        width = new SVG.Number(source.width());\n        height = new SVG.Number(source.height()); // find nearest non-percentual dimensions\n\n        while (width.unit == '%') {\n          wm *= width.value;\n          width = new SVG.Number(we instanceof SVG.Doc ? we.parent().offsetWidth : we.parent().width());\n          we = we.parent();\n        }\n\n        while (height.unit == '%') {\n          hm *= height.value;\n          height = new SVG.Number(he instanceof SVG.Doc ? he.parent().offsetHeight : he.parent().height());\n          he = he.parent();\n        } // ensure defaults\n\n\n        this.x = 0;\n        this.y = 0;\n        this.width = width * wm;\n        this.height = height * hm;\n        this.zoom = 1;\n\n        if (view) {\n          // get width and height from viewbox\n          x = parseFloat(view[0]);\n          y = parseFloat(view[1]);\n          width = parseFloat(view[2]);\n          height = parseFloat(view[3]); // calculate zoom accoring to viewbox\n\n          this.zoom = this.width / this.height > width / height ? this.height / height : this.width / width; // calculate real pixel dimensions on parent SVG.Doc element\n\n          this.x = x;\n          this.y = y;\n          this.width = width;\n          this.height = height;\n        }\n      } else {\n        // ensure source as object\n        source = typeof source === 'string' ? source.match(reg).map(function (el) {\n          return parseFloat(el);\n        }) : Array.isArray(source) ? source : _typeof(source) == 'object' ? [source.x, source.y, source.width, source.height] : arguments.length == 4 ? [].slice.call(arguments) : base;\n        this.x = source[0];\n        this.y = source[1];\n        this.width = source[2];\n        this.height = source[3];\n      }\n    },\n    extend: {\n      toString: function toString() {\n        return this.x + ' ' + this.y + ' ' + this.width + ' ' + this.height;\n      },\n      morph: function morph(x, y, width, height) {\n        this.destination = new SVG.ViewBox(x, y, width, height);\n        return this;\n      },\n      at: function at(pos) {\n        if (!this.destination) return this;\n        return new SVG.ViewBox([this.x + (this.destination.x - this.x) * pos, this.y + (this.destination.y - this.y) * pos, this.width + (this.destination.width - this.width) * pos, this.height + (this.destination.height - this.height) * pos]);\n      }\n    } // Define parent\n    ,\n    parent: SVG.Container // Add parent method\n    ,\n    construct: {\n      // get/set viewbox\n      viewbox: function viewbox(x, y, width, height) {\n        if (arguments.length == 0) // act as a getter if there are no arguments\n          return new SVG.ViewBox(this); // otherwise act as a setter\n\n        return this.attr('viewBox', new SVG.ViewBox(x, y, width, height));\n      }\n    }\n  }) // Add events to elements\n  ;\n  ['click', 'dblclick', 'mousedown', 'mouseup', 'mouseover', 'mouseout', 'mousemove', 'mouseenter', 'mouseleave', 'touchstart', 'touchmove', 'touchleave', 'touchend', 'touchcancel'].forEach(function (event) {\n    // add event to SVG.Element\n    SVG.Element.prototype[event] = function (f) {\n      // bind event to element rather than element node\n      if (f == null) {\n        SVG.off(this, event);\n      } else {\n        SVG.on(this, event, f);\n      }\n\n      return this;\n    };\n  });\n  SVG.listenerId = 0; // Add event binder in the SVG namespace\n\n  SVG.on = function (node, events, listener, binding, options) {\n    var l = listener.bind(binding || node);\n    var n = node instanceof SVG.Element ? node.node : node; // ensure instance object for nodes which are not adopted\n\n    n.instance = n.instance || {\n      _events: {}\n    };\n    var bag = n.instance._events; // add id to listener\n\n    if (!listener._svgjsListenerId) {\n      listener._svgjsListenerId = ++SVG.listenerId;\n    }\n\n    events.split(SVG.regex.delimiter).forEach(function (event) {\n      var ev = event.split('.')[0];\n      var ns = event.split('.')[1] || '*'; // ensure valid object\n\n      bag[ev] = bag[ev] || {};\n      bag[ev][ns] = bag[ev][ns] || {}; // reference listener\n\n      bag[ev][ns][listener._svgjsListenerId] = l; // add listener\n\n      n.addEventListener(ev, l, options || false);\n    });\n  }; // Add event unbinder in the SVG namespace\n\n\n  SVG.off = function (node, events, listener, options) {\n    var n = node instanceof SVG.Element ? node.node : node;\n    if (!n.instance) return; // listener can be a function or a number\n\n    if (typeof listener === 'function') {\n      listener = listener._svgjsListenerId;\n      if (!listener) return;\n    }\n\n    var bag = n.instance._events;\n    (events || '').split(SVG.regex.delimiter).forEach(function (event) {\n      var ev = event && event.split('.')[0];\n      var ns = event && event.split('.')[1];\n      var namespace, l;\n\n      if (listener) {\n        // remove listener reference\n        if (bag[ev] && bag[ev][ns || '*']) {\n          // removeListener\n          n.removeEventListener(ev, bag[ev][ns || '*'][listener], options || false);\n          delete bag[ev][ns || '*'][listener];\n        }\n      } else if (ev && ns) {\n        // remove all listeners for a namespaced event\n        if (bag[ev] && bag[ev][ns]) {\n          for (l in bag[ev][ns]) {\n            SVG.off(n, [ev, ns].join('.'), l);\n          }\n\n          delete bag[ev][ns];\n        }\n      } else if (ns) {\n        // remove all listeners for a specific namespace\n        for (event in bag) {\n          for (namespace in bag[event]) {\n            if (ns === namespace) {\n              SVG.off(n, [event, ns].join('.'));\n            }\n          }\n        }\n      } else if (ev) {\n        // remove all listeners for the event\n        if (bag[ev]) {\n          for (namespace in bag[ev]) {\n            SVG.off(n, [ev, namespace].join('.'));\n          }\n\n          delete bag[ev];\n        }\n      } else {\n        // remove all listeners on a given node\n        for (event in bag) {\n          SVG.off(n, event);\n        }\n\n        n.instance._events = {};\n      }\n    });\n  };\n\n  SVG.extend(SVG.Element, {\n    // Bind given event to listener\n    on: function on(event, listener, binding, options) {\n      SVG.on(this, event, listener, binding, options);\n      return this;\n    },\n    // Unbind event from listener\n    off: function off(event, listener) {\n      SVG.off(this.node, event, listener);\n      return this;\n    },\n    fire: function fire(event, data) {\n      // Dispatch event\n      if (event instanceof window.Event) {\n        this.node.dispatchEvent(event);\n      } else {\n        this.node.dispatchEvent(event = new SVG.CustomEvent(event, {\n          detail: data,\n          cancelable: true\n        }));\n      }\n\n      this._event = event;\n      return this;\n    },\n    event: function event() {\n      return this._event;\n    }\n  });\n  SVG.Defs = SVG.invent({\n    // Initialize node\n    create: 'defs' // Inherit from\n    ,\n    inherit: SVG.Container\n  });\n  SVG.G = SVG.invent({\n    // Initialize node\n    create: 'g' // Inherit from\n    ,\n    inherit: SVG.Container // Add class methods\n    ,\n    extend: {\n      // Move over x-axis\n      x: function x(_x3) {\n        return _x3 == null ? this.transform('x') : this.transform({\n          x: _x3 - this.x()\n        }, true);\n      } // Move over y-axis\n      ,\n      y: function y(_y3) {\n        return _y3 == null ? this.transform('y') : this.transform({\n          y: _y3 - this.y()\n        }, true);\n      } // Move by center over x-axis\n      ,\n      cx: function cx(x) {\n        return x == null ? this.gbox().cx : this.x(x - this.gbox().width / 2);\n      } // Move by center over y-axis\n      ,\n      cy: function cy(y) {\n        return y == null ? this.gbox().cy : this.y(y - this.gbox().height / 2);\n      },\n      gbox: function gbox() {\n        var bbox = this.bbox(),\n            trans = this.transform();\n        bbox.x += trans.x;\n        bbox.x2 += trans.x;\n        bbox.cx += trans.x;\n        bbox.y += trans.y;\n        bbox.y2 += trans.y;\n        bbox.cy += trans.y;\n        return bbox;\n      }\n    } // Add parent method\n    ,\n    construct: {\n      // Create a group element\n      group: function group() {\n        return this.put(new SVG.G());\n      }\n    }\n  });\n  SVG.Doc = SVG.invent({\n    // Initialize node\n    create: function create(element) {\n      if (element) {\n        // ensure the presence of a dom element\n        element = typeof element == 'string' ? document.getElementById(element) : element; // If the target is an svg element, use that element as the main wrapper.\n        // This allows svg.js to work with svg documents as well.\n\n        if (element.nodeName == 'svg') {\n          this.constructor.call(this, element);\n        } else {\n          this.constructor.call(this, SVG.create('svg'));\n          element.appendChild(this.node);\n          this.size('100%', '100%');\n        } // set svg element attributes and ensure defs node\n\n\n        this.namespace().defs();\n      }\n    } // Inherit from\n    ,\n    inherit: SVG.Container // Add class methods\n    ,\n    extend: {\n      // Add namespaces\n      namespace: function namespace() {\n        return this.attr({\n          xmlns: SVG.ns,\n          version: '1.1'\n        }).attr('xmlns:xlink', SVG.xlink, SVG.xmlns).attr('xmlns:svgjs', SVG.svgjs, SVG.xmlns);\n      } // Creates and returns defs element\n      ,\n      defs: function defs() {\n        if (!this._defs) {\n          var defs; // Find or create a defs element in this instance\n\n          if (defs = this.node.getElementsByTagName('defs')[0]) this._defs = SVG.adopt(defs);else this._defs = new SVG.Defs(); // Make sure the defs node is at the end of the stack\n\n          this.node.appendChild(this._defs.node);\n        }\n\n        return this._defs;\n      } // custom parent method\n      ,\n      parent: function parent() {\n        if (!this.node.parentNode || this.node.parentNode.nodeName == '#document' || this.node.parentNode.nodeName == '#document-fragment') return null;\n        return this.node.parentNode;\n      } // Fix for possible sub-pixel offset. See:\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=608812\n      ,\n      spof: function spof() {\n        var pos = this.node.getScreenCTM();\n        if (pos) this.style('left', -pos.e % 1 + 'px').style('top', -pos.f % 1 + 'px');\n        return this;\n      } // Removes the doc from the DOM\n      ,\n      remove: function remove() {\n        if (this.parent()) {\n          this.parent().removeChild(this.node);\n        }\n\n        return this;\n      },\n      clear: function clear() {\n        // remove children\n        while (this.node.hasChildNodes()) {\n          this.node.removeChild(this.node.lastChild);\n        } // remove defs reference\n\n\n        delete this._defs; // add back parser\n\n        if (!SVG.parser.draw.parentNode) this.node.appendChild(SVG.parser.draw);\n        return this;\n      },\n      clone: function clone(parent) {\n        // write dom data to the dom so the clone can pickup the data\n        this.writeDataToDom(); // get reference to node\n\n        var node = this.node; // clone element and assign new id\n\n        var clone = assignNewId(node.cloneNode(true)); // insert the clone in the given parent or after myself\n\n        if (parent) {\n          (parent.node || parent).appendChild(clone.node);\n        } else {\n          node.parentNode.insertBefore(clone.node, node.nextSibling);\n        }\n\n        return clone;\n      }\n    }\n  }); // ### This module adds backward / forward functionality to elements.\n  //\n\n  SVG.extend(SVG.Element, {\n    // Get all siblings, including myself\n    siblings: function siblings() {\n      return this.parent().children();\n    } // Get the curent position siblings\n    ,\n    position: function position() {\n      return this.parent().index(this);\n    } // Get the next element (will return null if there is none)\n    ,\n    next: function next() {\n      return this.siblings()[this.position() + 1];\n    } // Get the next element (will return null if there is none)\n    ,\n    previous: function previous() {\n      return this.siblings()[this.position() - 1];\n    } // Send given element one step forward\n    ,\n    forward: function forward() {\n      var i = this.position() + 1,\n          p = this.parent(); // move node one step forward\n\n      p.removeElement(this).add(this, i); // make sure defs node is always at the top\n\n      if (p instanceof SVG.Doc) p.node.appendChild(p.defs().node);\n      return this;\n    } // Send given element one step backward\n    ,\n    backward: function backward() {\n      var i = this.position();\n      if (i > 0) this.parent().removeElement(this).add(this, i - 1);\n      return this;\n    } // Send given element all the way to the front\n    ,\n    front: function front() {\n      var p = this.parent(); // Move node forward\n\n      p.node.appendChild(this.node); // Make sure defs node is always at the top\n\n      if (p instanceof SVG.Doc) p.node.appendChild(p.defs().node);\n      return this;\n    } // Send given element all the way to the back\n    ,\n    back: function back() {\n      if (this.position() > 0) this.parent().removeElement(this).add(this, 0);\n      return this;\n    } // Inserts a given element before the targeted element\n    ,\n    before: function before(element) {\n      element.remove();\n      var i = this.position();\n      this.parent().add(element, i);\n      return this;\n    } // Insters a given element after the targeted element\n    ,\n    after: function after(element) {\n      element.remove();\n      var i = this.position();\n      this.parent().add(element, i + 1);\n      return this;\n    }\n  });\n  SVG.Mask = SVG.invent({\n    // Initialize node\n    create: function create() {\n      this.constructor.call(this, SVG.create('mask')); // keep references to masked elements\n\n      this.targets = [];\n    } // Inherit from\n    ,\n    inherit: SVG.Container // Add class methods\n    ,\n    extend: {\n      // Unmask all masked elements and remove itself\n      remove: function remove() {\n        // unmask all targets\n        for (var i = this.targets.length - 1; i >= 0; i--) {\n          if (this.targets[i]) this.targets[i].unmask();\n        }\n\n        this.targets = []; // remove mask from parent\n\n        SVG.Element.prototype.remove.call(this);\n        return this;\n      }\n    } // Add parent method\n    ,\n    construct: {\n      // Create masking element\n      mask: function mask() {\n        return this.defs().put(new SVG.Mask());\n      }\n    }\n  });\n  SVG.extend(SVG.Element, {\n    // Distribute mask to svg element\n    maskWith: function maskWith(element) {\n      // use given mask or create a new one\n      this.masker = element instanceof SVG.Mask ? element : this.parent().mask().add(element); // store reverence on self in mask\n\n      this.masker.targets.push(this); // apply mask\n\n      return this.attr('mask', 'url(\"#' + this.masker.attr('id') + '\")');\n    } // Unmask element\n    ,\n    unmask: function unmask() {\n      delete this.masker;\n      return this.attr('mask', null);\n    }\n  });\n  SVG.ClipPath = SVG.invent({\n    // Initialize node\n    create: function create() {\n      this.constructor.call(this, SVG.create('clipPath')); // keep references to clipped elements\n\n      this.targets = [];\n    } // Inherit from\n    ,\n    inherit: SVG.Container // Add class methods\n    ,\n    extend: {\n      // Unclip all clipped elements and remove itself\n      remove: function remove() {\n        // unclip all targets\n        for (var i = this.targets.length - 1; i >= 0; i--) {\n          if (this.targets[i]) this.targets[i].unclip();\n        }\n\n        this.targets = []; // remove clipPath from parent\n\n        this.parent().removeElement(this);\n        return this;\n      }\n    } // Add parent method\n    ,\n    construct: {\n      // Create clipping element\n      clip: function clip() {\n        return this.defs().put(new SVG.ClipPath());\n      }\n    }\n  }); //\n\n  SVG.extend(SVG.Element, {\n    // Distribute clipPath to svg element\n    clipWith: function clipWith(element) {\n      // use given clip or create a new one\n      this.clipper = element instanceof SVG.ClipPath ? element : this.parent().clip().add(element); // store reverence on self in mask\n\n      this.clipper.targets.push(this); // apply mask\n\n      return this.attr('clip-path', 'url(\"#' + this.clipper.attr('id') + '\")');\n    } // Unclip element\n    ,\n    unclip: function unclip() {\n      delete this.clipper;\n      return this.attr('clip-path', null);\n    }\n  });\n  SVG.Gradient = SVG.invent({\n    // Initialize node\n    create: function create(type) {\n      this.constructor.call(this, SVG.create(type + 'Gradient')); // store type\n\n      this.type = type;\n    } // Inherit from\n    ,\n    inherit: SVG.Container // Add class methods\n    ,\n    extend: {\n      // Add a color stop\n      at: function at(offset, color, opacity) {\n        return this.put(new SVG.Stop()).update(offset, color, opacity);\n      } // Update gradient\n      ,\n      update: function update(block) {\n        // remove all stops\n        this.clear(); // invoke passed block\n\n        if (typeof block == 'function') block.call(this, this);\n        return this;\n      } // Return the fill id\n      ,\n      fill: function fill() {\n        return 'url(#' + this.id() + ')';\n      } // Alias string convertion to fill\n      ,\n      toString: function toString() {\n        return this.fill();\n      } // custom attr to handle transform\n      ,\n      attr: function attr(a, b, c) {\n        if (a == 'transform') a = 'gradientTransform';\n        return SVG.Container.prototype.attr.call(this, a, b, c);\n      }\n    } // Add parent method\n    ,\n    construct: {\n      // Create gradient element in defs\n      gradient: function gradient(type, block) {\n        return this.defs().gradient(type, block);\n      }\n    }\n  }); // Add animatable methods to both gradient and fx module\n\n  SVG.extend(SVG.Gradient, SVG.FX, {\n    // From position\n    from: function from(x, y) {\n      return (this._target || this).type == 'radial' ? this.attr({\n        fx: new SVG.Number(x),\n        fy: new SVG.Number(y)\n      }) : this.attr({\n        x1: new SVG.Number(x),\n        y1: new SVG.Number(y)\n      });\n    } // To position\n    ,\n    to: function to(x, y) {\n      return (this._target || this).type == 'radial' ? this.attr({\n        cx: new SVG.Number(x),\n        cy: new SVG.Number(y)\n      }) : this.attr({\n        x2: new SVG.Number(x),\n        y2: new SVG.Number(y)\n      });\n    }\n  }); // Base gradient generation\n\n  SVG.extend(SVG.Defs, {\n    // define gradient\n    gradient: function gradient(type, block) {\n      return this.put(new SVG.Gradient(type)).update(block);\n    }\n  });\n  SVG.Stop = SVG.invent({\n    // Initialize node\n    create: 'stop' // Inherit from\n    ,\n    inherit: SVG.Element // Add class methods\n    ,\n    extend: {\n      // add color stops\n      update: function update(o) {\n        if (typeof o == 'number' || o instanceof SVG.Number) {\n          o = {\n            offset: arguments[0],\n            color: arguments[1],\n            opacity: arguments[2]\n          };\n        } // set attributes\n\n\n        if (o.opacity != null) this.attr('stop-opacity', o.opacity);\n        if (o.color != null) this.attr('stop-color', o.color);\n        if (o.offset != null) this.attr('offset', new SVG.Number(o.offset));\n        return this;\n      }\n    }\n  });\n  SVG.Pattern = SVG.invent({\n    // Initialize node\n    create: 'pattern' // Inherit from\n    ,\n    inherit: SVG.Container // Add class methods\n    ,\n    extend: {\n      // Return the fill id\n      fill: function fill() {\n        return 'url(#' + this.id() + ')';\n      } // Update pattern by rebuilding\n      ,\n      update: function update(block) {\n        // remove content\n        this.clear(); // invoke passed block\n\n        if (typeof block == 'function') block.call(this, this);\n        return this;\n      } // Alias string convertion to fill\n      ,\n      toString: function toString() {\n        return this.fill();\n      } // custom attr to handle transform\n      ,\n      attr: function attr(a, b, c) {\n        if (a == 'transform') a = 'patternTransform';\n        return SVG.Container.prototype.attr.call(this, a, b, c);\n      }\n    } // Add parent method\n    ,\n    construct: {\n      // Create pattern element in defs\n      pattern: function pattern(width, height, block) {\n        return this.defs().pattern(width, height, block);\n      }\n    }\n  });\n  SVG.extend(SVG.Defs, {\n    // Define gradient\n    pattern: function pattern(width, height, block) {\n      return this.put(new SVG.Pattern()).update(block).attr({\n        x: 0,\n        y: 0,\n        width: width,\n        height: height,\n        patternUnits: 'userSpaceOnUse'\n      });\n    }\n  });\n  SVG.Shape = SVG.invent({\n    // Initialize node\n    create: function create(element) {\n      this.constructor.call(this, element);\n    } // Inherit from\n    ,\n    inherit: SVG.Element\n  });\n  SVG.Bare = SVG.invent({\n    // Initialize\n    create: function create(element, inherit) {\n      // construct element\n      this.constructor.call(this, SVG.create(element)); // inherit custom methods\n\n      if (inherit) for (var method in inherit.prototype) {\n        if (typeof inherit.prototype[method] === 'function') this[method] = inherit.prototype[method];\n      }\n    } // Inherit from\n    ,\n    inherit: SVG.Element // Add methods\n    ,\n    extend: {\n      // Insert some plain text\n      words: function words(text) {\n        // remove contents\n        while (this.node.hasChildNodes()) {\n          this.node.removeChild(this.node.lastChild);\n        } // create text node\n\n\n        this.node.appendChild(document.createTextNode(text));\n        return this;\n      }\n    }\n  });\n  SVG.extend(SVG.Parent, {\n    // Create an element that is not described by SVG.js\n    element: function element(_element, inherit) {\n      return this.put(new SVG.Bare(_element, inherit));\n    }\n  });\n  SVG.Symbol = SVG.invent({\n    // Initialize node\n    create: 'symbol' // Inherit from\n    ,\n    inherit: SVG.Container,\n    construct: {\n      // create symbol\n      symbol: function symbol() {\n        return this.put(new SVG.Symbol());\n      }\n    }\n  });\n  SVG.Use = SVG.invent({\n    // Initialize node\n    create: 'use' // Inherit from\n    ,\n    inherit: SVG.Shape // Add class methods\n    ,\n    extend: {\n      // Use element as a reference\n      element: function element(_element2, file) {\n        // Set lined element\n        return this.attr('href', (file || '') + '#' + _element2, SVG.xlink);\n      }\n    } // Add parent method\n    ,\n    construct: {\n      // Create a use element\n      use: function use(element, file) {\n        return this.put(new SVG.Use()).element(element, file);\n      }\n    }\n  });\n  SVG.Rect = SVG.invent({\n    // Initialize node\n    create: 'rect' // Inherit from\n    ,\n    inherit: SVG.Shape // Add parent method\n    ,\n    construct: {\n      // Create a rect element\n      rect: function rect(width, height) {\n        return this.put(new SVG.Rect()).size(width, height);\n      }\n    }\n  });\n  SVG.Circle = SVG.invent({\n    // Initialize node\n    create: 'circle' // Inherit from\n    ,\n    inherit: SVG.Shape // Add parent method\n    ,\n    construct: {\n      // Create circle element, based on ellipse\n      circle: function circle(size) {\n        return this.put(new SVG.Circle()).rx(new SVG.Number(size).divide(2)).move(0, 0);\n      }\n    }\n  });\n  SVG.extend(SVG.Circle, SVG.FX, {\n    // Radius x value\n    rx: function rx(_rx) {\n      return this.attr('r', _rx);\n    } // Alias radius x value\n    ,\n    ry: function ry(_ry) {\n      return this.rx(_ry);\n    }\n  });\n  SVG.Ellipse = SVG.invent({\n    // Initialize node\n    create: 'ellipse' // Inherit from\n    ,\n    inherit: SVG.Shape // Add parent method\n    ,\n    construct: {\n      // Create an ellipse\n      ellipse: function ellipse(width, height) {\n        return this.put(new SVG.Ellipse()).size(width, height).move(0, 0);\n      }\n    }\n  });\n  SVG.extend(SVG.Ellipse, SVG.Rect, SVG.FX, {\n    // Radius x value\n    rx: function rx(_rx2) {\n      return this.attr('rx', _rx2);\n    } // Radius y value\n    ,\n    ry: function ry(_ry2) {\n      return this.attr('ry', _ry2);\n    }\n  }); // Add common method\n\n  SVG.extend(SVG.Circle, SVG.Ellipse, {\n    // Move over x-axis\n    x: function x(_x4) {\n      return _x4 == null ? this.cx() - this.rx() : this.cx(_x4 + this.rx());\n    } // Move over y-axis\n    ,\n    y: function y(_y4) {\n      return _y4 == null ? this.cy() - this.ry() : this.cy(_y4 + this.ry());\n    } // Move by center over x-axis\n    ,\n    cx: function cx(x) {\n      return x == null ? this.attr('cx') : this.attr('cx', x);\n    } // Move by center over y-axis\n    ,\n    cy: function cy(y) {\n      return y == null ? this.attr('cy') : this.attr('cy', y);\n    } // Set width of element\n    ,\n    width: function width(_width3) {\n      return _width3 == null ? this.rx() * 2 : this.rx(new SVG.Number(_width3).divide(2));\n    } // Set height of element\n    ,\n    height: function height(_height3) {\n      return _height3 == null ? this.ry() * 2 : this.ry(new SVG.Number(_height3).divide(2));\n    } // Custom size function\n    ,\n    size: function size(width, height) {\n      var p = proportionalSize(this, width, height);\n      return this.rx(new SVG.Number(p.width).divide(2)).ry(new SVG.Number(p.height).divide(2));\n    }\n  });\n  SVG.Line = SVG.invent({\n    // Initialize node\n    create: 'line' // Inherit from\n    ,\n    inherit: SVG.Shape // Add class methods\n    ,\n    extend: {\n      // Get array\n      array: function array() {\n        return new SVG.PointArray([[this.attr('x1'), this.attr('y1')], [this.attr('x2'), this.attr('y2')]]);\n      } // Overwrite native plot() method\n      ,\n      plot: function plot(x1, y1, x2, y2) {\n        if (x1 == null) return this.array();else if (typeof y1 !== 'undefined') x1 = {\n          x1: x1,\n          y1: y1,\n          x2: x2,\n          y2: y2\n        };else x1 = new SVG.PointArray(x1).toLine();\n        return this.attr(x1);\n      } // Move by left top corner\n      ,\n      move: function move(x, y) {\n        return this.attr(this.array().move(x, y).toLine());\n      } // Set element size to given width and height\n      ,\n      size: function size(width, height) {\n        var p = proportionalSize(this, width, height);\n        return this.attr(this.array().size(p.width, p.height).toLine());\n      }\n    } // Add parent method\n    ,\n    construct: {\n      // Create a line element\n      line: function line(x1, y1, x2, y2) {\n        // make sure plot is called as a setter\n        // x1 is not necessarily a number, it can also be an array, a string and a SVG.PointArray\n        return SVG.Line.prototype.plot.apply(this.put(new SVG.Line()), x1 != null ? [x1, y1, x2, y2] : [0, 0, 0, 0]);\n      }\n    }\n  });\n  SVG.Polyline = SVG.invent({\n    // Initialize node\n    create: 'polyline' // Inherit from\n    ,\n    inherit: SVG.Shape // Add parent method\n    ,\n    construct: {\n      // Create a wrapped polyline element\n      polyline: function polyline(p) {\n        // make sure plot is called as a setter\n        return this.put(new SVG.Polyline()).plot(p || new SVG.PointArray());\n      }\n    }\n  });\n  SVG.Polygon = SVG.invent({\n    // Initialize node\n    create: 'polygon' // Inherit from\n    ,\n    inherit: SVG.Shape // Add parent method\n    ,\n    construct: {\n      // Create a wrapped polygon element\n      polygon: function polygon(p) {\n        // make sure plot is called as a setter\n        return this.put(new SVG.Polygon()).plot(p || new SVG.PointArray());\n      }\n    }\n  }); // Add polygon-specific functions\n\n  SVG.extend(SVG.Polyline, SVG.Polygon, {\n    // Get array\n    array: function array() {\n      return this._array || (this._array = new SVG.PointArray(this.attr('points')));\n    } // Plot new path\n    ,\n    plot: function plot(p) {\n      return p == null ? this.array() : this.clear().attr('points', typeof p == 'string' ? p : this._array = new SVG.PointArray(p));\n    } // Clear array cache\n    ,\n    clear: function clear() {\n      delete this._array;\n      return this;\n    } // Move by left top corner\n    ,\n    move: function move(x, y) {\n      return this.attr('points', this.array().move(x, y));\n    } // Set element size to given width and height\n    ,\n    size: function size(width, height) {\n      var p = proportionalSize(this, width, height);\n      return this.attr('points', this.array().size(p.width, p.height));\n    }\n  }); // unify all point to point elements\n\n  SVG.extend(SVG.Line, SVG.Polyline, SVG.Polygon, {\n    // Define morphable array\n    morphArray: SVG.PointArray // Move by left top corner over x-axis\n    ,\n    x: function x(_x5) {\n      return _x5 == null ? this.bbox().x : this.move(_x5, this.bbox().y);\n    } // Move by left top corner over y-axis\n    ,\n    y: function y(_y5) {\n      return _y5 == null ? this.bbox().y : this.move(this.bbox().x, _y5);\n    } // Set width of element\n    ,\n    width: function width(_width4) {\n      var b = this.bbox();\n      return _width4 == null ? b.width : this.size(_width4, b.height);\n    } // Set height of element\n    ,\n    height: function height(_height4) {\n      var b = this.bbox();\n      return _height4 == null ? b.height : this.size(b.width, _height4);\n    }\n  });\n  SVG.Path = SVG.invent({\n    // Initialize node\n    create: 'path' // Inherit from\n    ,\n    inherit: SVG.Shape // Add class methods\n    ,\n    extend: {\n      // Define morphable array\n      morphArray: SVG.PathArray // Get array\n      ,\n      array: function array() {\n        return this._array || (this._array = new SVG.PathArray(this.attr('d')));\n      } // Plot new path\n      ,\n      plot: function plot(d) {\n        return d == null ? this.array() : this.clear().attr('d', typeof d == 'string' ? d : this._array = new SVG.PathArray(d));\n      } // Clear array cache\n      ,\n      clear: function clear() {\n        delete this._array;\n        return this;\n      } // Move by left top corner\n      ,\n      move: function move(x, y) {\n        return this.attr('d', this.array().move(x, y));\n      } // Move by left top corner over x-axis\n      ,\n      x: function x(_x6) {\n        return _x6 == null ? this.bbox().x : this.move(_x6, this.bbox().y);\n      } // Move by left top corner over y-axis\n      ,\n      y: function y(_y6) {\n        return _y6 == null ? this.bbox().y : this.move(this.bbox().x, _y6);\n      } // Set element size to given width and height\n      ,\n      size: function size(width, height) {\n        var p = proportionalSize(this, width, height);\n        return this.attr('d', this.array().size(p.width, p.height));\n      } // Set width of element\n      ,\n      width: function width(_width5) {\n        return _width5 == null ? this.bbox().width : this.size(_width5, this.bbox().height);\n      } // Set height of element\n      ,\n      height: function height(_height5) {\n        return _height5 == null ? this.bbox().height : this.size(this.bbox().width, _height5);\n      }\n    } // Add parent method\n    ,\n    construct: {\n      // Create a wrapped path element\n      path: function path(d) {\n        // make sure plot is called as a setter\n        return this.put(new SVG.Path()).plot(d || new SVG.PathArray());\n      }\n    }\n  });\n  SVG.Image = SVG.invent({\n    // Initialize node\n    create: 'image' // Inherit from\n    ,\n    inherit: SVG.Shape // Add class methods\n    ,\n    extend: {\n      // (re)load image\n      load: function load(url) {\n        if (!url) return this;\n        var self = this,\n            img = new window.Image(); // preload image\n\n        SVG.on(img, 'load', function () {\n          SVG.off(img);\n          var p = self.parent(SVG.Pattern);\n          if (p === null) return; // ensure image size\n\n          if (self.width() == 0 && self.height() == 0) self.size(img.width, img.height); // ensure pattern size if not set\n\n          if (p && p.width() == 0 && p.height() == 0) p.size(self.width(), self.height()); // callback\n\n          if (typeof self._loaded === 'function') self._loaded.call(self, {\n            width: img.width,\n            height: img.height,\n            ratio: img.width / img.height,\n            url: url\n          });\n        });\n        SVG.on(img, 'error', function (e) {\n          SVG.off(img);\n\n          if (typeof self._error === 'function') {\n            self._error.call(self, e);\n          }\n        });\n        return this.attr('href', img.src = this.src = url, SVG.xlink);\n      } // Add loaded callback\n      ,\n      loaded: function loaded(_loaded) {\n        this._loaded = _loaded;\n        return this;\n      },\n      error: function error(_error) {\n        this._error = _error;\n        return this;\n      }\n    } // Add parent method\n    ,\n    construct: {\n      // create image element, load image and set its size\n      image: function image(source, width, height) {\n        return this.put(new SVG.Image()).load(source).size(width || 0, height || width || 0);\n      }\n    }\n  });\n  SVG.Text = SVG.invent({\n    // Initialize node\n    create: function create() {\n      this.constructor.call(this, SVG.create('text'));\n      this.dom.leading = new SVG.Number(1.3); // store leading value for rebuilding\n\n      this._rebuild = true; // enable automatic updating of dy values\n\n      this._build = false; // disable build mode for adding multiple lines\n      // set default font\n\n      this.attr('font-family', SVG.defaults.attrs['font-family']);\n    } // Inherit from\n    ,\n    inherit: SVG.Shape // Add class methods\n    ,\n    extend: {\n      // Move over x-axis\n      x: function x(_x7) {\n        // act as getter\n        if (_x7 == null) return this.attr('x');\n        return this.attr('x', _x7);\n      } // Move over y-axis\n      ,\n      y: function y(_y7) {\n        var oy = this.attr('y'),\n            o = typeof oy === 'number' ? oy - this.bbox().y : 0; // act as getter\n\n        if (_y7 == null) return typeof oy === 'number' ? oy - o : oy;\n        return this.attr('y', typeof _y7.valueOf() === 'number' ? _y7 + o : _y7);\n      } // Move center over x-axis\n      ,\n      cx: function cx(x) {\n        return x == null ? this.bbox().cx : this.x(x - this.bbox().width / 2);\n      } // Move center over y-axis\n      ,\n      cy: function cy(y) {\n        return y == null ? this.bbox().cy : this.y(y - this.bbox().height / 2);\n      } // Set the text content\n      ,\n      text: function text(_text) {\n        // act as getter\n        if (typeof _text === 'undefined') {\n          var _text = '';\n          var children = this.node.childNodes;\n\n          for (var i = 0, len = children.length; i < len; ++i) {\n            // add newline if its not the first child and newLined is set to true\n            if (i != 0 && children[i].nodeType != 3 && SVG.adopt(children[i]).dom.newLined == true) {\n              _text += '\\n';\n            } // add content of this node\n\n\n            _text += children[i].textContent;\n          }\n\n          return _text;\n        } // remove existing content\n\n\n        this.clear().build(true);\n\n        if (typeof _text === 'function') {\n          // call block\n          _text.call(this, this);\n        } else {\n          // store text and make sure text is not blank\n          _text = _text.split('\\n'); // build new lines\n\n          for (var i = 0, il = _text.length; i < il; i++) {\n            this.tspan(_text[i]).newLine();\n          }\n        } // disable build mode and rebuild lines\n\n\n        return this.build(false).rebuild();\n      } // Set font size\n      ,\n      size: function size(_size) {\n        return this.attr('font-size', _size).rebuild();\n      } // Set / get leading\n      ,\n      leading: function leading(value) {\n        // act as getter\n        if (value == null) return this.dom.leading; // act as setter\n\n        this.dom.leading = new SVG.Number(value);\n        return this.rebuild();\n      } // Get all the first level lines\n      ,\n      lines: function lines() {\n        var node = (this.textPath && this.textPath() || this).node; // filter tspans and map them to SVG.js instances\n\n        var lines = SVG.utils.map(SVG.utils.filterSVGElements(node.childNodes), function (el) {\n          return SVG.adopt(el);\n        }); // return an instance of SVG.set\n\n        return new SVG.Set(lines);\n      } // Rebuild appearance type\n      ,\n      rebuild: function rebuild(_rebuild) {\n        // store new rebuild flag if given\n        if (typeof _rebuild == 'boolean') this._rebuild = _rebuild; // define position of all lines\n\n        if (this._rebuild) {\n          var self = this,\n              blankLineOffset = 0,\n              dy = this.dom.leading * new SVG.Number(this.attr('font-size'));\n          this.lines().each(function () {\n            if (this.dom.newLined) {\n              if (!self.textPath()) this.attr('x', self.attr('x'));\n\n              if (this.text() == '\\n') {\n                blankLineOffset += dy;\n              } else {\n                this.attr('dy', dy + blankLineOffset);\n                blankLineOffset = 0;\n              }\n            }\n          });\n          this.fire('rebuild');\n        }\n\n        return this;\n      } // Enable / disable build mode\n      ,\n      build: function build(_build) {\n        this._build = !!_build;\n        return this;\n      } // overwrite method from parent to set data properly\n      ,\n      setData: function setData(o) {\n        this.dom = o;\n        this.dom.leading = new SVG.Number(o.leading || 1.3);\n        return this;\n      }\n    } // Add parent method\n    ,\n    construct: {\n      // Create text element\n      text: function text(_text2) {\n        return this.put(new SVG.Text()).text(_text2);\n      } // Create plain text element\n      ,\n      plain: function plain(text) {\n        return this.put(new SVG.Text()).plain(text);\n      }\n    }\n  });\n  SVG.Tspan = SVG.invent({\n    // Initialize node\n    create: 'tspan' // Inherit from\n    ,\n    inherit: SVG.Shape // Add class methods\n    ,\n    extend: {\n      // Set text content\n      text: function text(_text3) {\n        if (_text3 == null) return this.node.textContent + (this.dom.newLined ? '\\n' : '');\n        typeof _text3 === 'function' ? _text3.call(this, this) : this.plain(_text3);\n        return this;\n      } // Shortcut dx\n      ,\n      dx: function dx(_dx) {\n        return this.attr('dx', _dx);\n      } // Shortcut dy\n      ,\n      dy: function dy(_dy) {\n        return this.attr('dy', _dy);\n      } // Create new line\n      ,\n      newLine: function newLine() {\n        // fetch text parent\n        var t = this.parent(SVG.Text); // mark new line\n\n        this.dom.newLined = true; // apply new hy¡n\n\n        return this.dy(t.dom.leading * t.attr('font-size')).attr('x', t.x());\n      }\n    }\n  });\n  SVG.extend(SVG.Text, SVG.Tspan, {\n    // Create plain text node\n    plain: function plain(text) {\n      // clear if build mode is disabled\n      if (this._build === false) this.clear(); // create text node\n\n      this.node.appendChild(document.createTextNode(text));\n      return this;\n    } // Create a tspan\n    ,\n    tspan: function tspan(text) {\n      var node = (this.textPath && this.textPath() || this).node,\n          tspan = new SVG.Tspan(); // clear if build mode is disabled\n\n      if (this._build === false) this.clear(); // add new tspan\n\n      node.appendChild(tspan.node);\n      return tspan.text(text);\n    } // Clear all lines\n    ,\n    clear: function clear() {\n      var node = (this.textPath && this.textPath() || this).node; // remove existing child nodes\n\n      while (node.hasChildNodes()) {\n        node.removeChild(node.lastChild);\n      }\n\n      return this;\n    } // Get length of text element\n    ,\n    length: function length() {\n      return this.node.getComputedTextLength();\n    }\n  });\n  SVG.TextPath = SVG.invent({\n    // Initialize node\n    create: 'textPath' // Inherit from\n    ,\n    inherit: SVG.Parent // Define parent class\n    ,\n    parent: SVG.Text // Add parent method\n    ,\n    construct: {\n      morphArray: SVG.PathArray // Create path for text to run on\n      ,\n      path: function path(d) {\n        // create textPath element\n        var path = new SVG.TextPath(),\n            track = this.doc().defs().path(d); // move lines to textpath\n\n        while (this.node.hasChildNodes()) {\n          path.node.appendChild(this.node.firstChild);\n        } // add textPath element as child node\n\n\n        this.node.appendChild(path.node); // link textPath to path and add content\n\n        path.attr('href', '#' + track, SVG.xlink);\n        return this;\n      } // return the array of the path track element\n      ,\n      array: function array() {\n        var track = this.track();\n        return track ? track.array() : null;\n      } // Plot path if any\n      ,\n      plot: function plot(d) {\n        var track = this.track(),\n            pathArray = null;\n\n        if (track) {\n          pathArray = track.plot(d);\n        }\n\n        return d == null ? pathArray : this;\n      } // Get the path track element\n      ,\n      track: function track() {\n        var path = this.textPath();\n        if (path) return path.reference('href');\n      } // Get the textPath child\n      ,\n      textPath: function textPath() {\n        if (this.node.firstChild && this.node.firstChild.nodeName == 'textPath') return SVG.adopt(this.node.firstChild);\n      }\n    }\n  });\n  SVG.Nested = SVG.invent({\n    // Initialize node\n    create: function create() {\n      this.constructor.call(this, SVG.create('svg'));\n      this.style('overflow', 'visible');\n    } // Inherit from\n    ,\n    inherit: SVG.Container // Add parent method\n    ,\n    construct: {\n      // Create nested svg document\n      nested: function nested() {\n        return this.put(new SVG.Nested());\n      }\n    }\n  });\n  SVG.A = SVG.invent({\n    // Initialize node\n    create: 'a' // Inherit from\n    ,\n    inherit: SVG.Container // Add class methods\n    ,\n    extend: {\n      // Link url\n      to: function to(url) {\n        return this.attr('href', url, SVG.xlink);\n      } // Link show attribute\n      ,\n      show: function show(target) {\n        return this.attr('show', target, SVG.xlink);\n      } // Link target attribute\n      ,\n      target: function target(_target2) {\n        return this.attr('target', _target2);\n      }\n    } // Add parent method\n    ,\n    construct: {\n      // Create a hyperlink element\n      link: function link(url) {\n        return this.put(new SVG.A()).to(url);\n      }\n    }\n  });\n  SVG.extend(SVG.Element, {\n    // Create a hyperlink element\n    linkTo: function linkTo(url) {\n      var link = new SVG.A();\n      if (typeof url == 'function') url.call(link, link);else link.to(url);\n      return this.parent().put(link).put(this);\n    }\n  });\n  SVG.Marker = SVG.invent({\n    // Initialize node\n    create: 'marker' // Inherit from\n    ,\n    inherit: SVG.Container // Add class methods\n    ,\n    extend: {\n      // Set width of element\n      width: function width(_width6) {\n        return this.attr('markerWidth', _width6);\n      } // Set height of element\n      ,\n      height: function height(_height6) {\n        return this.attr('markerHeight', _height6);\n      } // Set marker refX and refY\n      ,\n      ref: function ref(x, y) {\n        return this.attr('refX', x).attr('refY', y);\n      } // Update marker\n      ,\n      update: function update(block) {\n        // remove all content\n        this.clear(); // invoke passed block\n\n        if (typeof block == 'function') block.call(this, this);\n        return this;\n      } // Return the fill id\n      ,\n      toString: function toString() {\n        return 'url(#' + this.id() + ')';\n      }\n    } // Add parent method\n    ,\n    construct: {\n      marker: function marker(width, height, block) {\n        // Create marker element in defs\n        return this.defs().marker(width, height, block);\n      }\n    }\n  });\n  SVG.extend(SVG.Defs, {\n    // Create marker\n    marker: function marker(width, height, block) {\n      // Set default viewbox to match the width and height, set ref to cx and cy and set orient to auto\n      return this.put(new SVG.Marker()).size(width, height).ref(width / 2, height / 2).viewbox(0, 0, width, height).attr('orient', 'auto').update(block);\n    }\n  });\n  SVG.extend(SVG.Line, SVG.Polyline, SVG.Polygon, SVG.Path, {\n    // Create and attach markers\n    marker: function marker(_marker, width, height, block) {\n      var attr = ['marker']; // Build attribute name\n\n      if (_marker != 'all') attr.push(_marker);\n      attr = attr.join('-'); // Set marker attribute\n\n      _marker = arguments[1] instanceof SVG.Marker ? arguments[1] : this.doc().marker(width, height, block);\n      return this.attr(attr, _marker);\n    }\n  }); // Define list of available attributes for stroke and fill\n\n  var sugar = {\n    stroke: ['color', 'width', 'opacity', 'linecap', 'linejoin', 'miterlimit', 'dasharray', 'dashoffset'],\n    fill: ['color', 'opacity', 'rule'],\n    prefix: function prefix(t, a) {\n      return a == 'color' ? t : t + '-' + a;\n    }\n  } // Add sugar for fill and stroke\n  ;\n  ['fill', 'stroke'].forEach(function (m) {\n    var i,\n        extension = {};\n\n    extension[m] = function (o) {\n      if (typeof o == 'undefined') return this;\n      if (typeof o == 'string' || SVG.Color.isRgb(o) || o && typeof o.fill === 'function') this.attr(m, o);else // set all attributes from sugar.fill and sugar.stroke list\n        for (i = sugar[m].length - 1; i >= 0; i--) {\n          if (o[sugar[m][i]] != null) this.attr(sugar.prefix(m, sugar[m][i]), o[sugar[m][i]]);\n        }\n      return this;\n    };\n\n    SVG.extend(SVG.Element, SVG.FX, extension);\n  });\n  SVG.extend(SVG.Element, SVG.FX, {\n    // Map rotation to transform\n    rotate: function rotate(d, cx, cy) {\n      return this.transform({\n        rotation: d,\n        cx: cx,\n        cy: cy\n      });\n    } // Map skew to transform\n    ,\n    skew: function skew(x, y, cx, cy) {\n      return arguments.length == 1 || arguments.length == 3 ? this.transform({\n        skew: x,\n        cx: y,\n        cy: cx\n      }) : this.transform({\n        skewX: x,\n        skewY: y,\n        cx: cx,\n        cy: cy\n      });\n    } // Map scale to transform\n    ,\n    scale: function scale(x, y, cx, cy) {\n      return arguments.length == 1 || arguments.length == 3 ? this.transform({\n        scale: x,\n        cx: y,\n        cy: cx\n      }) : this.transform({\n        scaleX: x,\n        scaleY: y,\n        cx: cx,\n        cy: cy\n      });\n    } // Map translate to transform\n    ,\n    translate: function translate(x, y) {\n      return this.transform({\n        x: x,\n        y: y\n      });\n    } // Map flip to transform\n    ,\n    flip: function flip(a, o) {\n      o = typeof a == 'number' ? a : o;\n      return this.transform({\n        flip: a || 'both',\n        offset: o\n      });\n    } // Map matrix to transform\n    ,\n    matrix: function matrix(m) {\n      return this.attr('transform', new SVG.Matrix(arguments.length == 6 ? [].slice.call(arguments) : m));\n    } // Opacity\n    ,\n    opacity: function opacity(value) {\n      return this.attr('opacity', value);\n    } // Relative move over x axis\n    ,\n    dx: function dx(x) {\n      return this.x(new SVG.Number(x).plus(this instanceof SVG.FX ? 0 : this.x()), true);\n    } // Relative move over y axis\n    ,\n    dy: function dy(y) {\n      return this.y(new SVG.Number(y).plus(this instanceof SVG.FX ? 0 : this.y()), true);\n    } // Relative move over x and y axes\n    ,\n    dmove: function dmove(x, y) {\n      return this.dx(x).dy(y);\n    }\n  });\n  SVG.extend(SVG.Rect, SVG.Ellipse, SVG.Circle, SVG.Gradient, SVG.FX, {\n    // Add x and y radius\n    radius: function radius(x, y) {\n      var type = (this._target || this).type;\n      return type == 'radial' || type == 'circle' ? this.attr('r', new SVG.Number(x)) : this.rx(x).ry(y == null ? x : y);\n    }\n  });\n  SVG.extend(SVG.Path, {\n    // Get path length\n    length: function length() {\n      return this.node.getTotalLength();\n    } // Get point at length\n    ,\n    pointAt: function pointAt(length) {\n      return this.node.getPointAtLength(length);\n    }\n  });\n  SVG.extend(SVG.Parent, SVG.Text, SVG.Tspan, SVG.FX, {\n    // Set font\n    font: function font(a, v) {\n      if (_typeof(a) == 'object') {\n        for (v in a) {\n          this.font(v, a[v]);\n        }\n      }\n\n      return a == 'leading' ? this.leading(v) : a == 'anchor' ? this.attr('text-anchor', v) : a == 'size' || a == 'family' || a == 'weight' || a == 'stretch' || a == 'variant' || a == 'style' ? this.attr('font-' + a, v) : this.attr(a, v);\n    }\n  });\n  SVG.Set = SVG.invent({\n    // Initialize\n    create: function create(members) {\n      if (members instanceof SVG.Set) {\n        this.members = members.members.slice();\n      } else {\n        Array.isArray(members) ? this.members = members : this.clear();\n      }\n    } // Add class methods\n    ,\n    extend: {\n      // Add element to set\n      add: function add() {\n        var i,\n            il,\n            elements = [].slice.call(arguments);\n\n        for (i = 0, il = elements.length; i < il; i++) {\n          this.members.push(elements[i]);\n        }\n\n        return this;\n      } // Remove element from set\n      ,\n      remove: function remove(element) {\n        var i = this.index(element); // remove given child\n\n        if (i > -1) this.members.splice(i, 1);\n        return this;\n      } // Iterate over all members\n      ,\n      each: function each(block) {\n        for (var i = 0, il = this.members.length; i < il; i++) {\n          block.apply(this.members[i], [i, this.members]);\n        }\n\n        return this;\n      } // Restore to defaults\n      ,\n      clear: function clear() {\n        // initialize store\n        this.members = [];\n        return this;\n      } // Get the length of a set\n      ,\n      length: function length() {\n        return this.members.length;\n      } // Checks if a given element is present in set\n      ,\n      has: function has(element) {\n        return this.index(element) >= 0;\n      } // retuns index of given element in set\n      ,\n      index: function index(element) {\n        return this.members.indexOf(element);\n      } // Get member at given index\n      ,\n      get: function get(i) {\n        return this.members[i];\n      } // Get first member\n      ,\n      first: function first() {\n        return this.get(0);\n      } // Get last member\n      ,\n      last: function last() {\n        return this.get(this.members.length - 1);\n      } // Default value\n      ,\n      valueOf: function valueOf() {\n        return this.members;\n      } // Get the bounding box of all members included or empty box if set has no items\n      ,\n      bbox: function bbox() {\n        // return an empty box of there are no members\n        if (this.members.length == 0) return new SVG.RBox(); // get the first rbox and update the target bbox\n\n        var rbox = this.members[0].rbox(this.members[0].doc());\n        this.each(function () {\n          // user rbox for correct position and visual representation\n          rbox = rbox.merge(this.rbox(this.doc()));\n        });\n        return rbox;\n      }\n    } // Add parent method\n    ,\n    construct: {\n      // Create a new set\n      set: function set(members) {\n        return new SVG.Set(members);\n      }\n    }\n  });\n  SVG.FX.Set = SVG.invent({\n    // Initialize node\n    create: function create(set) {\n      // store reference to set\n      this.set = set;\n    }\n  }); // Alias methods\n\n  SVG.Set.inherit = function () {\n    var m,\n        methods = []; // gather shape methods\n\n    for (var m in SVG.Shape.prototype) {\n      if (typeof SVG.Shape.prototype[m] == 'function' && typeof SVG.Set.prototype[m] != 'function') methods.push(m);\n    } // apply shape aliasses\n\n\n    methods.forEach(function (method) {\n      SVG.Set.prototype[method] = function () {\n        for (var i = 0, il = this.members.length; i < il; i++) {\n          if (this.members[i] && typeof this.members[i][method] == 'function') this.members[i][method].apply(this.members[i], arguments);\n        }\n\n        return method == 'animate' ? this.fx || (this.fx = new SVG.FX.Set(this)) : this;\n      };\n    }); // clear methods for the next round\n\n    methods = []; // gather fx methods\n\n    for (var m in SVG.FX.prototype) {\n      if (typeof SVG.FX.prototype[m] == 'function' && typeof SVG.FX.Set.prototype[m] != 'function') methods.push(m);\n    } // apply fx aliasses\n\n\n    methods.forEach(function (method) {\n      SVG.FX.Set.prototype[method] = function () {\n        for (var i = 0, il = this.set.members.length; i < il; i++) {\n          this.set.members[i].fx[method].apply(this.set.members[i].fx, arguments);\n        }\n\n        return this;\n      };\n    });\n  };\n\n  SVG.extend(SVG.Element, {\n    // Store data values on svg nodes\n    data: function data(a, v, r) {\n      if (_typeof(a) == 'object') {\n        for (v in a) {\n          this.data(v, a[v]);\n        }\n      } else if (arguments.length < 2) {\n        try {\n          return JSON.parse(this.attr('data-' + a));\n        } catch (e) {\n          return this.attr('data-' + a);\n        }\n      } else {\n        this.attr('data-' + a, v === null ? null : r === true || typeof v === 'string' || typeof v === 'number' ? v : JSON.stringify(v));\n      }\n\n      return this;\n    }\n  });\n  SVG.extend(SVG.Element, {\n    // Remember arbitrary data\n    remember: function remember(k, v) {\n      // remember every item in an object individually\n      if (_typeof(arguments[0]) == 'object') for (var v in k) {\n        this.remember(v, k[v]);\n      } // retrieve memory\n      else if (arguments.length == 1) return this.memory()[k]; // store memory\n        else this.memory()[k] = v;\n      return this;\n    } // Erase a given memory\n    ,\n    forget: function forget() {\n      if (arguments.length == 0) this._memory = {};else for (var i = arguments.length - 1; i >= 0; i--) {\n        delete this.memory()[arguments[i]];\n      }\n      return this;\n    } // Initialize or return local memory object\n    ,\n    memory: function memory() {\n      return this._memory || (this._memory = {});\n    }\n  }); // Method for getting an element by id\n\n  SVG.get = function (id) {\n    var node = document.getElementById(idFromReference(id) || id);\n    return SVG.adopt(node);\n  }; // Select elements by query string\n\n\n  SVG.select = function (query, parent) {\n    return new SVG.Set(SVG.utils.map((parent || document).querySelectorAll(query), function (node) {\n      return SVG.adopt(node);\n    }));\n  };\n\n  SVG.extend(SVG.Parent, {\n    // Scoped select method\n    select: function select(query) {\n      return SVG.select(query, this.node);\n    }\n  });\n\n  function pathRegReplace(a, b, c, d) {\n    return c + d.replace(SVG.regex.dots, ' .');\n  } // creates deep clone of array\n\n\n  function array_clone(arr) {\n    var clone = arr.slice(0);\n\n    for (var i = clone.length; i--;) {\n      if (Array.isArray(clone[i])) {\n        clone[i] = array_clone(clone[i]);\n      }\n    }\n\n    return clone;\n  } // tests if a given element is instance of an object\n\n\n  function _is(el, obj) {\n    return el instanceof obj;\n  } // tests if a given selector matches an element\n\n\n  function _matches(el, selector) {\n    return (el.matches || el.matchesSelector || el.msMatchesSelector || el.mozMatchesSelector || el.webkitMatchesSelector || el.oMatchesSelector).call(el, selector);\n  } // Convert dash-separated-string to camelCase\n\n\n  function camelCase(s) {\n    return s.toLowerCase().replace(/-(.)/g, function (m, g) {\n      return g.toUpperCase();\n    });\n  } // Capitalize first letter of a string\n\n\n  function capitalize(s) {\n    return s.charAt(0).toUpperCase() + s.slice(1);\n  } // Ensure to six-based hex\n\n\n  function fullHex(hex) {\n    return hex.length == 4 ? ['#', hex.substring(1, 2), hex.substring(1, 2), hex.substring(2, 3), hex.substring(2, 3), hex.substring(3, 4), hex.substring(3, 4)].join('') : hex;\n  } // Component to hex value\n\n\n  function compToHex(comp) {\n    var hex = comp.toString(16);\n    return hex.length == 1 ? '0' + hex : hex;\n  } // Calculate proportional width and height values when necessary\n\n\n  function proportionalSize(element, width, height) {\n    if (width == null || height == null) {\n      var box = element.bbox();\n      if (width == null) width = box.width / box.height * height;else if (height == null) height = box.height / box.width * width;\n    }\n\n    return {\n      width: width,\n      height: height\n    };\n  } // Delta transform point\n\n\n  function deltaTransformPoint(matrix, x, y) {\n    return {\n      x: x * matrix.a + y * matrix.c + 0,\n      y: x * matrix.b + y * matrix.d + 0\n    };\n  } // Map matrix array to object\n\n\n  function arrayToMatrix(a) {\n    return {\n      a: a[0],\n      b: a[1],\n      c: a[2],\n      d: a[3],\n      e: a[4],\n      f: a[5]\n    };\n  } // Parse matrix if required\n\n\n  function parseMatrix(matrix) {\n    if (!(matrix instanceof SVG.Matrix)) matrix = new SVG.Matrix(matrix);\n    return matrix;\n  } // Add centre point to transform object\n\n\n  function ensureCentre(o, target) {\n    o.cx = o.cx == null ? target.bbox().cx : o.cx;\n    o.cy = o.cy == null ? target.bbox().cy : o.cy;\n  } // PathArray Helpers\n\n\n  function arrayToString(a) {\n    for (var i = 0, il = a.length, s = ''; i < il; i++) {\n      s += a[i][0];\n\n      if (a[i][1] != null) {\n        s += a[i][1];\n\n        if (a[i][2] != null) {\n          s += ' ';\n          s += a[i][2];\n\n          if (a[i][3] != null) {\n            s += ' ';\n            s += a[i][3];\n            s += ' ';\n            s += a[i][4];\n\n            if (a[i][5] != null) {\n              s += ' ';\n              s += a[i][5];\n              s += ' ';\n              s += a[i][6];\n\n              if (a[i][7] != null) {\n                s += ' ';\n                s += a[i][7];\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s + ' ';\n  } // Deep new id assignment\n\n\n  function assignNewId(node) {\n    // do the same for SVG child nodes as well\n    for (var i = node.childNodes.length - 1; i >= 0; i--) {\n      if (node.childNodes[i] instanceof window.SVGElement) assignNewId(node.childNodes[i]);\n    }\n\n    return SVG.adopt(node).id(SVG.eid(node.nodeName));\n  } // Add more bounding box properties\n\n\n  function fullBox(b) {\n    if (b.x == null) {\n      b.x = 0;\n      b.y = 0;\n      b.width = 0;\n      b.height = 0;\n    }\n\n    b.w = b.width;\n    b.h = b.height;\n    b.x2 = b.x + b.width;\n    b.y2 = b.y + b.height;\n    b.cx = b.x + b.width / 2;\n    b.cy = b.y + b.height / 2;\n    return b;\n  } // Get id from reference string\n\n\n  function idFromReference(url) {\n    var m = (url || '').toString().match(SVG.regex.reference);\n    if (m) return m[1];\n  } // If values like 1e-88 are passed, this is not a valid 32 bit float,\n  // but in those cases, we are so close to 0 that 0 works well!\n\n\n  function float32String(v) {\n    return Math.abs(v) > 1e-37 ? v : 0;\n  } // Create matrix array for looping\n\n\n  var abcdef = 'abcdef'.split(''); // Add CustomEvent to IE9 and IE10\n\n  if (typeof window.CustomEvent !== 'function') {\n    // Code from: https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent\n    var CustomEventPoly = function CustomEventPoly(event, options) {\n      options = options || {\n        bubbles: false,\n        cancelable: false,\n        detail: undefined\n      };\n      var e = document.createEvent('CustomEvent');\n      e.initCustomEvent(event, options.bubbles, options.cancelable, options.detail);\n      return e;\n    };\n\n    CustomEventPoly.prototype = window.Event.prototype;\n    SVG.CustomEvent = CustomEventPoly;\n  } else {\n    SVG.CustomEvent = window.CustomEvent;\n  } // requestAnimationFrame / cancelAnimationFrame Polyfill with fallback based on Paul Irish\n\n\n  (function (w) {\n    var lastTime = 0;\n    var vendors = ['moz', 'webkit'];\n\n    for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n      w.requestAnimationFrame = w[vendors[x] + 'RequestAnimationFrame'];\n      w.cancelAnimationFrame = w[vendors[x] + 'CancelAnimationFrame'] || w[vendors[x] + 'CancelRequestAnimationFrame'];\n    }\n\n    w.requestAnimationFrame = w.requestAnimationFrame || function (callback) {\n      var currTime = new Date().getTime();\n      var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n      var id = w.setTimeout(function () {\n        callback(currTime + timeToCall);\n      }, timeToCall);\n      lastTime = currTime + timeToCall;\n      return id;\n    };\n\n    w.cancelAnimationFrame = w.cancelAnimationFrame || w.clearTimeout;\n  })(window);\n\n  return SVG;\n});\n\n//# sourceURL=webpack:///./js/vendor/svg.js?")},"./js/vendor/svg.resize.js":function(module,exports){eval("/*!\n* svg.resize.js - An extension for svg.js which allows to resize elements which are selected\n* @version 1.4.3\n* https://github.com/svgdotjs/svg.resize.js\n*\n* @copyright [object Object]\n* @license MIT\n*/\n;\n;\n\n(function () {\n  \"use strict\";\n\n  ;\n  (function () {\n    function ResizeHandler(el) {\n      el.remember('_resizeHandler', this);\n      this.el = el;\n      this.parameters = {};\n      this.lastUpdateCall = null;\n      this.p = el.doc().node.createSVGPoint();\n    }\n\n    ResizeHandler.prototype.transformPoint = function (x, y, m) {\n      this.p.x = x - (this.offset.x - window.pageXOffset);\n      this.p.y = y - (this.offset.y - window.pageYOffset);\n      return this.p.matrixTransform(m || this.m);\n    };\n\n    ResizeHandler.prototype._extractPosition = function (event) {\n      // Extract a position from a mouse/touch event.\n      // Returns { x: .., y: .. }\n      return {\n        x: event.clientX != null ? event.clientX : event.touches[0].clientX,\n        y: event.clientY != null ? event.clientY : event.touches[0].clientY\n      };\n    };\n\n    ResizeHandler.prototype.init = function (options) {\n      var _this = this;\n\n      this.stop();\n\n      if (options === 'stop') {\n        return;\n      }\n\n      this.options = {}; // Merge options and defaults\n\n      for (var i in this.el.resize.defaults) {\n        this.options[i] = this.el.resize.defaults[i];\n\n        if (typeof options[i] !== 'undefined') {\n          this.options[i] = options[i];\n        }\n      } // We listen to all these events which are specifying different edges\n\n\n      this.el.on('lt.resize', function (e) {\n        _this.resize(e || window.event);\n      }); // Left-Top\n\n      this.el.on('rt.resize', function (e) {\n        _this.resize(e || window.event);\n      }); // Right-Top\n\n      this.el.on('rb.resize', function (e) {\n        _this.resize(e || window.event);\n      }); // Right-Bottom\n\n      this.el.on('lb.resize', function (e) {\n        _this.resize(e || window.event);\n      }); // Left-Bottom\n\n      this.el.on('t.resize', function (e) {\n        _this.resize(e || window.event);\n      }); // Top\n\n      this.el.on('r.resize', function (e) {\n        _this.resize(e || window.event);\n      }); // Right\n\n      this.el.on('b.resize', function (e) {\n        _this.resize(e || window.event);\n      }); // Bottom\n\n      this.el.on('l.resize', function (e) {\n        _this.resize(e || window.event);\n      }); // Left\n\n      this.el.on('rot.resize', function (e) {\n        _this.resize(e || window.event);\n      }); // Rotation\n\n      this.el.on('point.resize', function (e) {\n        _this.resize(e || window.event);\n      }); // Point-Moving\n      // This call ensures, that the plugin reacts to a change of snapToGrid immediately\n\n      this.update();\n    };\n\n    ResizeHandler.prototype.stop = function () {\n      this.el.off('lt.resize');\n      this.el.off('rt.resize');\n      this.el.off('rb.resize');\n      this.el.off('lb.resize');\n      this.el.off('t.resize');\n      this.el.off('r.resize');\n      this.el.off('b.resize');\n      this.el.off('l.resize');\n      this.el.off('rot.resize');\n      this.el.off('point.resize');\n      return this;\n    };\n\n    ResizeHandler.prototype.resize = function (event) {\n      var _this = this;\n\n      this.m = this.el.node.getScreenCTM().inverse();\n      this.offset = {\n        x: window.pageXOffset,\n        y: window.pageYOffset\n      };\n\n      var txPt = this._extractPosition(event.detail.event);\n\n      this.parameters = {\n        type: this.el.type,\n        // the type of element\n        p: this.transformPoint(txPt.x, txPt.y),\n        x: event.detail.x,\n        // x-position of the mouse when resizing started\n        y: event.detail.y,\n        // y-position of the mouse when resizing started\n        box: this.el.bbox(),\n        // The bounding-box of the element\n        rotation: this.el.transform().rotation // The current rotation of the element\n\n      };\n      this.resizeLimits = this.options.resizeLimits || this.resize.defaults.resizeLimits; // Add font-size parameter if the element type is text\n\n      if (this.el.type === \"text\") {\n        this.parameters.fontSize = this.el.attr()[\"font-size\"];\n      } // the i-param in the event holds the index of the point which is moved, when using `deepSelect`\n\n\n      if (event.detail.i !== undefined) {\n        // get the point array\n        var array = this.el.array().valueOf(); // Save the index and the point which is moved\n\n        this.parameters.i = event.detail.i;\n        this.parameters.pointCoords = [array[event.detail.i][0], array[event.detail.i][1]];\n      }\n\n      this._resizeLeft = function (snap, resizeFont, checkAspectRatio, checkAspectRatioReverse, updateOnlyChanges) {\n        if (this.parameters.box.width - snap[0] >= this.resizeLimits.width) {\n          if (checkAspectRatio) {\n            snap = this.checkAspectRatio(snap, checkAspectRatioReverse);\n          }\n\n          if (this.parameters.type === \"text\") {\n            if (resizeFont) {\n              this.el.move(this.parameters.box.x + snap[0], this.parameters.box.y);\n              this.el.attr(\"font-size\", this.parameters.fontSize - snap[0]);\n            }\n\n            return;\n          }\n\n          this.el.width(this.parameters.box.width - snap[0]);\n\n          if (updateOnlyChanges) {\n            this.el.x(this.parameters.box.x + snap[0]);\n          } else {\n            this.el.move(this.parameters.box.x + snap[0], this.parameters.box.y);\n          }\n        }\n      };\n\n      this._resizeRight = function (snap, resizeFont, checkAspectRatio, checkAspectRatioReverse) {\n        if (this.parameters.box.width + snap[0] >= this.resizeLimits.width) {\n          if (checkAspectRatio) {\n            snap = this.checkAspectRatio(snap, checkAspectRatioReverse);\n          }\n\n          if (this.parameters.type === \"text\") {\n            if (resizeFont) {\n              this.el.move(this.parameters.box.x - snap[0], this.parameters.box.y);\n              this.el.attr(\"font-size\", this.parameters.fontSize + snap[0]);\n            }\n\n            return;\n          }\n\n          this.el.x(this.parameters.box.x).width(this.parameters.box.width + snap[0]);\n        }\n      };\n\n      this._resizeTop = function (snap, checkAspectRatio, checkAspectRatioReverse, updateOnlyChanges) {\n        if (this.parameters.box.height - snap[1] >= this.resizeLimits.height) {\n          if (checkAspectRatio) {\n            snap = this.checkAspectRatio(snap, checkAspectRatioReverse);\n          } // Disable the font-resizing if it is not from the corner of bounding-box\n\n\n          if (this.parameters.type === \"text\") {\n            return;\n          }\n\n          this.el.height(this.parameters.box.height - snap[1]);\n\n          if (updateOnlyChanges) {\n            this.el.y(this.parameters.box.y + snap[1]);\n          } else {\n            this.el.move(this.parameters.box.x, this.parameters.box.y + snap[1]);\n          }\n        }\n      };\n\n      this._resizeBottom = function (snap, checkAspectRatio, checkAspectRatioReverse) {\n        if (this.parameters.box.height + snap[1] >= this.resizeLimits.height) {\n          if (checkAspectRatio) {\n            snap = this.checkAspectRatio(snap, checkAspectRatioReverse);\n          }\n\n          if (this.parameters.type === \"text\") {\n            return;\n          }\n\n          this.el.y(this.parameters.box.y).height(this.parameters.box.height + snap[1]);\n        }\n      }; // Lets check which edge of the bounding-box was clicked and resize the this.el according to this\n\n\n      switch (event.type) {\n        // Left-Top-Edge\n        case 'lt':\n          // We build a calculating function for every case which gives us the new position of the this.el\n          this.calc = function (diffX, diffY) {\n            // The procedure is always the same\n            // First we snap the edge to the given grid (snapping to 1px grid is normal resizing)\n            var snap = this.snapToGrid(diffX, diffY);\n\n            this._resizeTop(snap, true, false, true);\n\n            this._resizeLeft(snap, true, true, false, true);\n          };\n\n          break;\n        // Right-Top\n\n        case 'rt':\n          // s.a.\n          this.calc = function (diffX, diffY) {\n            var snap = this.snapToGrid(diffX, diffY, 1 << 1);\n\n            this._resizeTop(snap, true, true, true);\n\n            this._resizeRight(snap, true, true, true);\n          };\n\n          break;\n        // Right-Bottom\n\n        case 'rb':\n          // s.a.\n          this.calc = function (diffX, diffY) {\n            var snap = this.snapToGrid(diffX, diffY, 0);\n\n            this._resizeBottom(snap, true);\n\n            this._resizeRight(snap, true, true);\n          };\n\n          break;\n        // Left-Bottom\n\n        case 'lb':\n          // s.a.\n          this.calc = function (diffX, diffY) {\n            var snap = this.snapToGrid(diffX, diffY, 1);\n\n            this._resizeBottom(snap, true, true);\n\n            this._resizeLeft(snap, true, true, true, true);\n          };\n\n          break;\n        // Top\n\n        case 't':\n          // s.a.\n          this.calc = function (diffX, diffY) {\n            var snap = this.snapToGrid(diffX, diffY, 1 << 1);\n\n            this._resizeTop(snap);\n          };\n\n          break;\n        // Right\n\n        case 'r':\n          // s.a.\n          this.calc = function (diffX, diffY) {\n            var snap = this.snapToGrid(diffX, diffY, 0);\n\n            this._resizeRight(snap);\n          };\n\n          break;\n        // Bottom\n\n        case 'b':\n          // s.a.\n          this.calc = function (diffX, diffY) {\n            var snap = this.snapToGrid(diffX, diffY, 0);\n\n            this._resizeBottom(snap);\n          };\n\n          break;\n        // Left\n\n        case 'l':\n          // s.a.\n          this.calc = function (diffX, diffY) {\n            var snap = this.snapToGrid(diffX, diffY, 1);\n\n            this._resizeLeft(snap);\n          };\n\n          break;\n        // Rotation\n\n        case 'rot':\n          // s.a.\n          this.calc = function (diffX, diffY) {\n            // yes this is kinda stupid but we need the mouse coords back...\n            var current = {\n              x: diffX + this.parameters.p.x,\n              y: diffY + this.parameters.p.y\n            }; // start minus middle\n\n            var sAngle = Math.atan2(this.parameters.p.y - this.parameters.box.y - this.parameters.box.height / 2, this.parameters.p.x - this.parameters.box.x - this.parameters.box.width / 2); // end minus middle\n\n            var pAngle = Math.atan2(current.y - this.parameters.box.y - this.parameters.box.height / 2, current.x - this.parameters.box.x - this.parameters.box.width / 2);\n            var angle = this.parameters.rotation + (pAngle - sAngle) * 180 / Math.PI + this.options.snapToAngle / 2; // We have to move the element to the center of the box first and change the rotation afterwards\n            // because rotation always works around a rotation-center, which is changed when moving the element\n            // We also set the new rotation center to the center of the box.\n\n            this.el.center(this.parameters.box.cx, this.parameters.box.cy).rotate(angle - angle % this.options.snapToAngle, this.parameters.box.cx, this.parameters.box.cy);\n          };\n\n          break;\n        // Moving one single Point (needed when an element is deepSelected which means you can move every single point of the object)\n\n        case 'point':\n          this.calc = function (diffX, diffY) {\n            // Snapping the point to the grid\n            var snap = this.snapToGrid(diffX, diffY, this.parameters.pointCoords[0], this.parameters.pointCoords[1]); // Get the point array\n\n            var array = this.el.array().valueOf(); // Changing the moved point in the array\n\n            array[this.parameters.i][0] = this.parameters.pointCoords[0] + snap[0];\n            array[this.parameters.i][1] = this.parameters.pointCoords[1] + snap[1]; // And plot the new this.el\n\n            this.el.plot(array);\n          };\n\n      }\n\n      this.el.fire('resizestart', {\n        dx: this.parameters.x,\n        dy: this.parameters.y,\n        event: event\n      }); // When resizing started, we have to register events for...\n      // Touches.\n\n      SVG.on(window, 'touchmove.resize', function (e) {\n        _this.update(e || window.event);\n      });\n      SVG.on(window, 'touchend.resize', function () {\n        _this.done();\n      }); // Mouse.\n\n      SVG.on(window, 'mousemove.resize', function (e) {\n        _this.update(e || window.event);\n      });\n      SVG.on(window, 'mouseup.resize', function () {\n        _this.done();\n      });\n    }; // The update-function redraws the element every time the mouse is moving\n\n\n    ResizeHandler.prototype.update = function (event) {\n      if (!event) {\n        if (this.lastUpdateCall) {\n          this.calc(this.lastUpdateCall[0], this.lastUpdateCall[1]);\n        }\n\n        return;\n      } // Calculate the difference between the mouseposition at start and now\n\n\n      var txPt = this._extractPosition(event);\n\n      var p = this.transformPoint(txPt.x, txPt.y);\n      var diffX = p.x - this.parameters.p.x,\n          diffY = p.y - this.parameters.p.y;\n      this.lastUpdateCall = [diffX, diffY]; // Calculate the new position and height / width of the element\n\n      this.calc(diffX, diffY); // Emit an event to say we have changed.\n\n      this.el.fire('resizing', {\n        dx: diffX,\n        dy: diffY,\n        event: event\n      });\n    }; // Is called on mouseup.\n    // Removes the update-function from the mousemove event\n\n\n    ResizeHandler.prototype.done = function () {\n      this.lastUpdateCall = null;\n      SVG.off(window, 'mousemove.resize');\n      SVG.off(window, 'mouseup.resize');\n      SVG.off(window, 'touchmove.resize');\n      SVG.off(window, 'touchend.resize');\n      this.el.fire('resizedone');\n    }; // The flag is used to determine whether the resizing is used with a left-Point (first bit) and top-point (second bit)\n    // In this cases the temp-values are calculated differently\n\n\n    ResizeHandler.prototype.snapToGrid = function (diffX, diffY, flag, pointCoordsY) {\n      var temp; // If `pointCoordsY` is given, a single Point has to be snapped (deepSelect). That's why we need a different temp-value\n\n      if (typeof pointCoordsY !== 'undefined') {\n        // Note that flag = pointCoordsX in this case\n        temp = [(flag + diffX) % this.options.snapToGrid, (pointCoordsY + diffY) % this.options.snapToGrid];\n      } else {\n        // We check if the flag is set and if not we set a default-value (both bits set - which means upper-left-edge)\n        flag = flag == null ? 1 | 1 << 1 : flag;\n        temp = [(this.parameters.box.x + diffX + (flag & 1 ? 0 : this.parameters.box.width)) % this.options.snapToGrid, (this.parameters.box.y + diffY + (flag & 1 << 1 ? 0 : this.parameters.box.height)) % this.options.snapToGrid];\n      }\n\n      if (diffX < 0) {\n        temp[0] -= this.options.snapToGrid;\n      }\n\n      if (diffY < 0) {\n        temp[1] -= this.options.snapToGrid;\n      }\n\n      diffX -= Math.abs(temp[0]) < this.options.snapToGrid / 2 ? temp[0] : temp[0] - (diffX < 0 ? -this.options.snapToGrid : this.options.snapToGrid);\n      diffY -= Math.abs(temp[1]) < this.options.snapToGrid / 2 ? temp[1] : temp[1] - (diffY < 0 ? -this.options.snapToGrid : this.options.snapToGrid);\n      return this.constraintToBox(diffX, diffY, flag, pointCoordsY);\n    }; // keep element within constrained box\n\n\n    ResizeHandler.prototype.constraintToBox = function (diffX, diffY, flag, pointCoordsY) {\n      //return [diffX, diffY]\n      var c = this.options.constraint || {};\n      var orgX, orgY;\n\n      if (typeof pointCoordsY !== 'undefined') {\n        orgX = flag;\n        orgY = pointCoordsY;\n      } else {\n        orgX = this.parameters.box.x + (flag & 1 ? 0 : this.parameters.box.width);\n        orgY = this.parameters.box.y + (flag & 1 << 1 ? 0 : this.parameters.box.height);\n      }\n\n      if (typeof c.minX !== 'undefined' && orgX + diffX < c.minX) {\n        diffX = c.minX - orgX;\n      }\n\n      if (typeof c.maxX !== 'undefined' && orgX + diffX > c.maxX) {\n        diffX = c.maxX - orgX;\n      }\n\n      if (typeof c.minY !== 'undefined' && orgY + diffY < c.minY) {\n        diffY = c.minY - orgY;\n      }\n\n      if (typeof c.maxY !== 'undefined' && orgY + diffY > c.maxY) {\n        diffY = c.maxY - orgY;\n      }\n\n      return [diffX, diffY];\n    };\n\n    ResizeHandler.prototype.checkAspectRatio = function (snap, isReverse) {\n      if (!this.options.saveAspectRatio) {\n        return snap;\n      }\n\n      var updatedSnap = snap.slice();\n      var aspectRatio = this.parameters.box.width / this.parameters.box.height;\n      var newW = this.parameters.box.width + snap[0];\n      var newH = this.parameters.box.height - snap[1];\n      var newAspectRatio = newW / newH;\n\n      if (newAspectRatio < aspectRatio) {\n        // Height is too big. Adapt it\n        updatedSnap[1] = newW / aspectRatio - this.parameters.box.height;\n        isReverse && (updatedSnap[1] = -updatedSnap[1]);\n      } else if (newAspectRatio > aspectRatio) {\n        // Width is too big. Adapt it\n        updatedSnap[0] = this.parameters.box.width - newH * aspectRatio;\n        isReverse && (updatedSnap[0] = -updatedSnap[0]);\n      }\n\n      return updatedSnap;\n    };\n\n    SVG.extend(SVG.Element, {\n      // Resize element with mouse\n      resize: function resize(options) {\n        (this.remember('_resizeHandler') || new ResizeHandler(this)).init(options || {});\n        return this;\n      }\n    });\n    SVG.Element.prototype.resize.defaults = {\n      snapToAngle: 0.1,\n      // Specifies the speed the rotation is happening when moving the mouse\n      snapToGrid: 1,\n      // Snaps to a grid of `snapToGrid` Pixels\n      constraint: {},\n      // keep element within constrained box\n      resizeLimits: {\n        width: 0,\n        height: 0\n      },\n      // rect limit size on resize\n      saveAspectRatio: false // Save aspect ratio when resizing using lt, rt, rb or lb points\n\n    };\n  }).call(this);\n})();\n\n//# sourceURL=webpack:///./js/vendor/svg.resize.js?")},"./js/vendor/svg.select.js":function(module,exports){eval("function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*!\n* svg.select.js - An extension of svg.js which allows to select elements with mouse\n* @version 3.0.1\n* https://github.com/svgdotjs/svg.select.js\n*\n* @copyright Ulrich-Matthias Schäfer\n* @license MIT\n*/\n;\n;\n\n(function () {\n  \"use strict\";\n\n  function SelectHandler(el) {\n    this.el = el;\n    el.remember('_selectHandler', this);\n    this.pointSelection = {\n      isSelected: false\n    };\n    this.rectSelection = {\n      isSelected: false\n    }; // helper list with position settings of each type of point\n\n    this.pointsList = {\n      lt: [0, 0],\n      rt: ['width', 0],\n      rb: ['width', 'height'],\n      lb: [0, 'height'],\n      t: ['width', 0],\n      r: ['width', 'height'],\n      b: ['width', 'height'],\n      l: [0, 'height']\n    }; // helper function to get point coordinates based on settings above and an object (bbox in our case)\n\n    this.pointCoord = function (setting, object, isPointCentered) {\n      var coord = typeof setting !== 'string' ? setting : object[setting]; // Top, bottom, right and left points are placed in the center of element width/height\n\n      return isPointCentered ? coord / 2 : coord;\n    };\n\n    this.pointCoords = function (point, object) {\n      var settings = this.pointsList[point];\n      return {\n        x: this.pointCoord(settings[0], object, point === 't' || point === 'b'),\n        y: this.pointCoord(settings[1], object, point === 'r' || point === 'l')\n      };\n    };\n  }\n\n  SelectHandler.prototype.init = function (value, options) {\n    var bbox = this.el.bbox();\n    this.options = {}; // store defaults list of points in order to verify users config\n\n    var points = this.el.selectize.defaults.points; // Merging the defaults and the options-object together\n\n    for (var i in this.el.selectize.defaults) {\n      this.options[i] = this.el.selectize.defaults[i];\n\n      if (options[i] !== undefined) {\n        this.options[i] = options[i];\n      }\n    } // prepare & validate list of points to be added (or excluded)\n\n\n    var pointsLists = ['points', 'pointsExclude'];\n\n    for (var i in pointsLists) {\n      var option = this.options[pointsLists[i]];\n\n      if (typeof option === 'string') {\n        if (option.length > 0) {\n          // if set as comma separated string list => convert it into an array\n          option = option.split(/\\s*,\\s*/i);\n        } else {\n          option = [];\n        }\n      } else if (typeof option === 'boolean' && pointsLists[i] === 'points') {\n        // this is not needed, but let's have it for legacy support\n        option = option ? points : [];\n      }\n\n      this.options[pointsLists[i]] = option;\n    } // intersect correct all points options with users config (exclude unwanted points)\n    // ES5 -> NO arrow functions nor Array.includes()\n\n\n    this.options.points = [points, this.options.points].reduce(function (a, b) {\n      return a.filter(function (c) {\n        return b.indexOf(c) > -1;\n      });\n    }); // exclude pointsExclude, if wanted\n\n    this.options.points = [this.options.points, this.options.pointsExclude].reduce(function (a, b) {\n      return a.filter(function (c) {\n        return b.indexOf(c) < 0;\n      });\n    });\n    this.parent = this.el.parent();\n    this.nested = this.nested || this.parent.group();\n    this.nested.matrix(new SVG.Matrix(this.el).translate(bbox.x, bbox.y)); // When deepSelect is enabled and the element is a line/polyline/polygon, draw only points for moving\n\n    if (this.options.deepSelect && ['line', 'polyline', 'polygon'].indexOf(this.el.type) !== -1) {\n      this.selectPoints(value);\n    } else {\n      this.selectRect(value);\n    }\n\n    this.observe();\n    this.cleanup();\n  };\n\n  SelectHandler.prototype.selectPoints = function (value) {\n    this.pointSelection.isSelected = value; // When set is already there we dont have to create one\n\n    if (this.pointSelection.set) {\n      return this;\n    } // Create our set of elements\n\n\n    this.pointSelection.set = this.parent.set(); // draw the points and mark the element as selected\n\n    this.drawPoints();\n    return this;\n  }; // create the point-array which contains the 2 points of a line or simply the points-array of polyline/polygon\n\n\n  SelectHandler.prototype.getPointArray = function () {\n    var bbox = this.el.bbox();\n    return this.el.array().valueOf().map(function (el) {\n      return [el[0] - bbox.x, el[1] - bbox.y];\n    });\n  }; // Draws a points\n\n\n  SelectHandler.prototype.drawPoints = function () {\n    var _this = this,\n        array = this.getPointArray(); // go through the array of points\n\n\n    for (var i = 0, len = array.length; i < len; ++i) {\n      var curriedEvent = function (k) {\n        return function (ev) {\n          ev = ev || window.event;\n          ev.preventDefault ? ev.preventDefault() : ev.returnValue = false;\n          ev.stopPropagation();\n          var x = ev.pageX || ev.touches[0].pageX;\n          var y = ev.pageY || ev.touches[0].pageY;\n\n          _this.el.fire('point', {\n            x: x,\n            y: y,\n            i: k,\n            event: ev\n          });\n        };\n      }(i); // add every point to the set\n      // add css-classes and a touchstart-event which fires our event for moving points\n\n\n      var point = this.drawPoint(array[i][0], array[i][1]).addClass(this.options.classPoints).addClass(this.options.classPoints + '_point').on('touchstart', curriedEvent).on('mousedown', curriedEvent);\n      this.pointSelection.set.add(point);\n    }\n  }; // The function to draw single point\n\n\n  SelectHandler.prototype.drawPoint = function (cx, cy) {\n    var pointType = this.options.pointType;\n\n    switch (pointType) {\n      case 'circle':\n        return this.drawCircle(cx, cy);\n\n      case 'rect':\n        return this.drawRect(cx, cy);\n\n      default:\n        if (typeof pointType === 'function') {\n          return pointType.call(this, cx, cy);\n        }\n\n        throw new Error('Unknown ' + pointType + ' point type!');\n    }\n  }; // The function to draw the circle point\n\n\n  SelectHandler.prototype.drawCircle = function (cx, cy) {\n    return this.nested.circle(this.options.pointSize).stroke(this.options.pointStroke).fill(this.options.pointFill).center(cx, cy);\n  }; // The function to draw the rect point\n\n\n  SelectHandler.prototype.drawRect = function (cx, cy) {\n    return this.nested.rect(this.options.pointSize, this.options.pointSize).stroke(this.options.pointStroke).fill(this.options.pointFill).center(cx, cy);\n  }; // every time a point is moved, we have to update the positions of our point\n\n\n  SelectHandler.prototype.updatePointSelection = function () {\n    var array = this.getPointArray();\n    this.pointSelection.set.each(function (i) {\n      if (this.cx() === array[i][0] && this.cy() === array[i][1]) {\n        return;\n      }\n\n      this.center(array[i][0], array[i][1]);\n    });\n  };\n\n  SelectHandler.prototype.updateRectSelection = function () {\n    var _this = this,\n        bbox = this.el.bbox();\n\n    this.rectSelection.set.get(0).attr({\n      width: bbox.width,\n      height: bbox.height\n    }); // set.get(1) is always in the upper left corner. no need to move it\n\n    if (this.options.points.length) {\n      this.options.points.map(function (point, index) {\n        var coords = _this.pointCoords(point, bbox);\n\n        _this.rectSelection.set.get(index + 1).center(coords.x, coords.y);\n      });\n    }\n\n    if (this.options.rotationPoint) {\n      var length = this.rectSelection.set.length();\n      this.rectSelection.set.get(length - 1).center(bbox.width / 2, 20);\n    }\n  };\n\n  SelectHandler.prototype.selectRect = function (value) {\n    var _this = this,\n        bbox = this.el.bbox();\n\n    this.rectSelection.isSelected = value; // when set is already p\n\n    this.rectSelection.set = this.rectSelection.set || this.parent.set(); // helperFunction to create a mouse-down function which triggers the event specified in `eventName`\n\n    function getMoseDownFunc(eventName) {\n      return function (ev) {\n        ev = ev || window.event;\n        ev.preventDefault ? ev.preventDefault() : ev.returnValue = false;\n        ev.stopPropagation();\n        var x = ev.pageX || ev.touches[0].pageX;\n        var y = ev.pageY || ev.touches[0].pageY;\n\n        _this.el.fire(eventName, {\n          x: x,\n          y: y,\n          event: ev\n        });\n      };\n    } // create the selection-rectangle and add the css-class\n\n\n    if (!this.rectSelection.set.get(0)) {\n      this.rectSelection.set.add(this.nested.rect(bbox.width, bbox.height).addClass(this.options.classRect));\n    } // Draw Points at the edges, if enabled\n\n\n    if (this.options.points.length && this.rectSelection.set.length() < 2) {\n      var ename = \"touchstart\",\n          mname = \"mousedown\";\n      this.options.points.map(function (point, index) {\n        var coords = _this.pointCoords(point, bbox);\n\n        var pointElement = _this.drawPoint(coords.x, coords.y).attr('class', _this.options.classPoints + '_' + point).on(mname, getMoseDownFunc(point)).on(ename, getMoseDownFunc(point));\n\n        _this.rectSelection.set.add(pointElement);\n      });\n      this.rectSelection.set.each(function () {\n        this.addClass(_this.options.classPoints);\n      });\n    } // draw rotationPint, if enabled\n\n\n    if (this.options.rotationPoint && (this.options.points && !this.rectSelection.set.get(9) || !this.options.points && !this.rectSelection.set.get(1))) {\n      var curriedEvent = function curriedEvent(ev) {\n        ev = ev || window.event;\n        ev.preventDefault ? ev.preventDefault() : ev.returnValue = false;\n        ev.stopPropagation();\n        var x = ev.pageX || ev.touches[0].pageX;\n        var y = ev.pageY || ev.touches[0].pageY;\n\n        _this.el.fire('rot', {\n          x: x,\n          y: y,\n          event: ev\n        });\n      };\n\n      var pointElement = this.drawPoint(bbox.width / 2, 20).attr('class', this.options.classPoints + '_rot').on(\"touchstart\", curriedEvent).on(\"mousedown\", curriedEvent);\n      this.rectSelection.set.add(pointElement);\n    }\n  };\n\n  SelectHandler.prototype.handler = function () {\n    var bbox = this.el.bbox();\n    this.nested.matrix(new SVG.Matrix(this.el).translate(bbox.x, bbox.y));\n\n    if (this.rectSelection.isSelected) {\n      this.updateRectSelection();\n    }\n\n    if (this.pointSelection.isSelected) {\n      this.updatePointSelection();\n    }\n  };\n\n  SelectHandler.prototype.observe = function () {\n    var _this = this;\n\n    if (MutationObserver) {\n      if (this.rectSelection.isSelected || this.pointSelection.isSelected) {\n        this.observerInst = this.observerInst || new MutationObserver(function () {\n          _this.handler();\n        });\n        this.observerInst.observe(this.el.node, {\n          attributes: true\n        });\n      } else {\n        try {\n          this.observerInst.disconnect();\n          delete this.observerInst;\n        } catch (e) {}\n      }\n    } else {\n      this.el.off('DOMAttrModified.select');\n\n      if (this.rectSelection.isSelected || this.pointSelection.isSelected) {\n        this.el.on('DOMAttrModified.select', function () {\n          _this.handler();\n        });\n      }\n    }\n  };\n\n  SelectHandler.prototype.cleanup = function () {\n    //var _this = this;\n    if (!this.rectSelection.isSelected && this.rectSelection.set) {\n      // stop watching the element, remove the selection\n      this.rectSelection.set.each(function () {\n        this.remove();\n      });\n      this.rectSelection.set.clear();\n      delete this.rectSelection.set;\n    }\n\n    if (!this.pointSelection.isSelected && this.pointSelection.set) {\n      // Remove all points, clear the set, stop watching the element\n      this.pointSelection.set.each(function () {\n        this.remove();\n      });\n      this.pointSelection.set.clear();\n      delete this.pointSelection.set;\n    }\n\n    if (!this.pointSelection.isSelected && !this.rectSelection.isSelected) {\n      this.nested.remove();\n      delete this.nested;\n    }\n  };\n\n  SVG.extend(SVG.Element, {\n    // Select element with mouse\n    selectize: function selectize(value, options) {\n      // Check the parameters and reassign if needed\n      if (_typeof(value) === 'object') {\n        options = value;\n        value = true;\n      }\n\n      var selectHandler = this.remember('_selectHandler') || new SelectHandler(this);\n      selectHandler.init(value === undefined ? true : value, options || {});\n      return this;\n    }\n  });\n  SVG.Element.prototype.selectize.defaults = {\n    points: ['lt', 'rt', 'rb', 'lb', 't', 'r', 'b', 'l'],\n    // which points to draw, default all\n    pointsExclude: [],\n    // easier option if to exclude few than rewrite all\n    classRect: 'svg_select_boundingRect',\n    // Css-class added to the rect\n    classPoints: 'svg_select_points',\n    // Css-class added to the points\n    pointSize: 7,\n    // size of point\n    rotationPoint: true,\n    // If true, rotation point is drawn. Needed for rotation!\n    deepSelect: false,\n    // If true, moving of single points is possible (only line, polyline, polyon)\n    pointType: 'circle',\n    // Point type: circle or rect, default circle\n    pointFill: \"#000\",\n    // Point fill color\n    pointStroke: {\n      width: 1,\n      color: \"#000\"\n    } // Point stroke properties\n\n  };\n})();\n\n//# sourceURL=webpack:///./js/vendor/svg.select.js?")}});

!function(t){var r={};function i(n){if(r[n])return r[n].exports;var e=r[n]={i:n,l:!1,exports:{}};return t[n].call(e.exports,e,e.exports,i),e.l=!0,e.exports}i.m=t,i.c=r,i.d=function(n,e,t){i.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:t})},i.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},i.t=function(e,n){if(1&n&&(e=i(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(i.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var r in e)i.d(t,r,function(n){return e[n]}.bind(null,r));return t},i.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return i.d(e,"a",e),e},i.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},i.p="",i(i.s="./js/main.js")}({"../node_modules/@svgdotjs/svg.js/dist/svg.esm.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"A\", function() { return A; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Animator\", function() { return Animator; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Array\", function() { return SVGArray; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Box\", function() { return Box; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Circle\", function() { return Circle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ClipPath\", function() { return ClipPath; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Color\", function() { return Color; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Container\", function() { return Container; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Controller\", function() { return Controller; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Defs\", function() { return Defs; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Dom\", function() { return Dom; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Ease\", function() { return Ease; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Element\", function() { return Element; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Ellipse\", function() { return Ellipse; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EventTarget\", function() { return EventTarget; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ForeignObject\", function() { return ForeignObject; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"G\", function() { return G; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Gradient\", function() { return Gradient; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Image\", function() { return Image; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Line\", function() { return Line; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"List\", function() { return List; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Marker\", function() { return Marker; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Mask\", function() { return Mask; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Matrix\", function() { return Matrix; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Morphable\", function() { return Morphable; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NonMorphable\", function() { return NonMorphable; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Number\", function() { return SVGNumber; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ObjectBag\", function() { return ObjectBag; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PID\", function() { return PID; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Path\", function() { return Path; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PathArray\", function() { return PathArray; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Pattern\", function() { return Pattern; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Point\", function() { return Point; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PointArray\", function() { return PointArray; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Polygon\", function() { return Polygon; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Polyline\", function() { return Polyline; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Queue\", function() { return Queue; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Rect\", function() { return Rect; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Runner\", function() { return Runner; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SVG\", function() { return SVG; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Shape\", function() { return Shape; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Spring\", function() { return Spring; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Stop\", function() { return Stop; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Style\", function() { return Style; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Svg\", function() { return Svg; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Symbol\", function() { return _Symbol; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Text\", function() { return Text; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TextPath\", function() { return TextPath; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Timeline\", function() { return Timeline; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TransformBag\", function() { return TransformBag; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Tspan\", function() { return Tspan; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Use\", function() { return Use; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"adopt\", function() { return adopt; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"assignNewId\", function() { return assignNewId; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"create\", function() { return create; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"defaults\", function() { return defaults; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dispatch\", function() { return dispatch; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"easing\", function() { return easing; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"eid\", function() { return eid; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"extend\", function() { return extend; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"find\", function() { return baseFind; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getClass\", function() { return getClass; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"invent\", function() { return invent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"makeInstance\", function() { return makeInstance; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"makeMorphable\", function() { return makeMorphable; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mockAdopt\", function() { return mockAdopt; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"namespaces\", function() { return namespaces; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"nodeOrNew\", function() { return nodeOrNew; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"off\", function() { return off; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"on\", function() { return on; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"parser\", function() { return parser; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"regex\", function() { return regex; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"register\", function() { return register; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"registerMorphableType\", function() { return registerMorphableType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"registerWindow\", function() { return registerWindow; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"root\", function() { return root; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"utils\", function() { return utils; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"wrapWithAttrCheck\", function() { return wrapWithAttrCheck; });\n/*!\n* @svgdotjs/svg.js - A lightweight library for manipulating and animating SVG.\n* @version 3.0.16\n* https://svgdotjs.github.io/\n*\n* @copyright Wout Fierens <wout@mick-wout.com>\n* @license MIT\n*\n* BUILT: Tue Nov 12 2019 21:57:16 GMT+0100 (GMT+01:00)\n*/;\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\nfunction createCommonjsModule(fn, module) {\n\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n}\n\nvar check = function (it) {\n  return it && it.Math == Math && it;\n};\n\n// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global_1 =\n  // eslint-disable-next-line no-undef\n  check(typeof globalThis == 'object' && globalThis) ||\n  check(typeof window == 'object' && window) ||\n  check(typeof self == 'object' && self) ||\n  check(typeof commonjsGlobal == 'object' && commonjsGlobal) ||\n  // eslint-disable-next-line no-new-func\n  Function('return this')();\n\nvar fails = function (exec) {\n  try {\n    return !!exec();\n  } catch (error) {\n    return true;\n  }\n};\n\n// Thank's IE8 for his funny defineProperty\nvar descriptors = !fails(function () {\n  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n});\n\nvar nativePropertyIsEnumerable = {}.propertyIsEnumerable;\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n\n// Nashorn ~ JDK8 bug\nvar NASHORN_BUG = getOwnPropertyDescriptor && !nativePropertyIsEnumerable.call({ 1: 2 }, 1);\n\n// `Object.prototype.propertyIsEnumerable` method implementation\n// https://tc39.github.io/ecma262/#sec-object.prototype.propertyisenumerable\nvar f = NASHORN_BUG ? function propertyIsEnumerable(V) {\n  var descriptor = getOwnPropertyDescriptor(this, V);\n  return !!descriptor && descriptor.enumerable;\n} : nativePropertyIsEnumerable;\n\nvar objectPropertyIsEnumerable = {\n\tf: f\n};\n\nvar createPropertyDescriptor = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n\nvar toString = {}.toString;\n\nvar classofRaw = function (it) {\n  return toString.call(it).slice(8, -1);\n};\n\nvar split = ''.split;\n\n// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar indexedObject = fails(function () {\n  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346\n  // eslint-disable-next-line no-prototype-builtins\n  return !Object('z').propertyIsEnumerable(0);\n}) ? function (it) {\n  return classofRaw(it) == 'String' ? split.call(it, '') : Object(it);\n} : Object;\n\n// `RequireObjectCoercible` abstract operation\n// https://tc39.github.io/ecma262/#sec-requireobjectcoercible\nvar requireObjectCoercible = function (it) {\n  if (it == undefined) throw TypeError(\"Can't call method on \" + it);\n  return it;\n};\n\n// toObject with fallback for non-array-like ES3 strings\n\n\n\nvar toIndexedObject = function (it) {\n  return indexedObject(requireObjectCoercible(it));\n};\n\nvar isObject = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n\n// `ToPrimitive` abstract operation\n// https://tc39.github.io/ecma262/#sec-toprimitive\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nvar toPrimitive = function (input, PREFERRED_STRING) {\n  if (!isObject(input)) return input;\n  var fn, val;\n  if (PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;\n  if (typeof (fn = input.valueOf) == 'function' && !isObject(val = fn.call(input))) return val;\n  if (!PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n\nvar hasOwnProperty = {}.hasOwnProperty;\n\nvar has = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n\nvar document$1 = global_1.document;\n// typeof document.createElement is 'object' in old IE\nvar EXISTS = isObject(document$1) && isObject(document$1.createElement);\n\nvar documentCreateElement = function (it) {\n  return EXISTS ? document$1.createElement(it) : {};\n};\n\n// Thank's IE8 for his funny defineProperty\nvar ie8DomDefine = !descriptors && !fails(function () {\n  return Object.defineProperty(documentCreateElement('div'), 'a', {\n    get: function () { return 7; }\n  }).a != 7;\n});\n\nvar nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n\n// `Object.getOwnPropertyDescriptor` method\n// https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor\nvar f$1 = descriptors ? nativeGetOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {\n  O = toIndexedObject(O);\n  P = toPrimitive(P, true);\n  if (ie8DomDefine) try {\n    return nativeGetOwnPropertyDescriptor(O, P);\n  } catch (error) { /* empty */ }\n  if (has(O, P)) return createPropertyDescriptor(!objectPropertyIsEnumerable.f.call(O, P), O[P]);\n};\n\nvar objectGetOwnPropertyDescriptor = {\n\tf: f$1\n};\n\nvar anObject = function (it) {\n  if (!isObject(it)) {\n    throw TypeError(String(it) + ' is not an object');\n  } return it;\n};\n\nvar nativeDefineProperty = Object.defineProperty;\n\n// `Object.defineProperty` method\n// https://tc39.github.io/ecma262/#sec-object.defineproperty\nvar f$2 = descriptors ? nativeDefineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if (ie8DomDefine) try {\n    return nativeDefineProperty(O, P, Attributes);\n  } catch (error) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n\nvar objectDefineProperty = {\n\tf: f$2\n};\n\nvar createNonEnumerableProperty = descriptors ? function (object, key, value) {\n  return objectDefineProperty.f(object, key, createPropertyDescriptor(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n\nvar setGlobal = function (key, value) {\n  try {\n    createNonEnumerableProperty(global_1, key, value);\n  } catch (error) {\n    global_1[key] = value;\n  } return value;\n};\n\nvar SHARED = '__core-js_shared__';\nvar store = global_1[SHARED] || setGlobal(SHARED, {});\n\nvar sharedStore = store;\n\nvar shared = createCommonjsModule(function (module) {\n(module.exports = function (key, value) {\n  return sharedStore[key] || (sharedStore[key] = value !== undefined ? value : {});\n})('versions', []).push({\n  version: '3.3.6',\n  mode:  'global',\n  copyright: '© 2019 Denis Pushkarev (zloirock.ru)'\n});\n});\n\nvar functionToString = shared('native-function-to-string', Function.toString);\n\nvar WeakMap = global_1.WeakMap;\n\nvar nativeWeakMap = typeof WeakMap === 'function' && /native code/.test(functionToString.call(WeakMap));\n\nvar id = 0;\nvar postfix = Math.random();\n\nvar uid = function (key) {\n  return 'Symbol(' + String(key === undefined ? '' : key) + ')_' + (++id + postfix).toString(36);\n};\n\nvar keys = shared('keys');\n\nvar sharedKey = function (key) {\n  return keys[key] || (keys[key] = uid(key));\n};\n\nvar hiddenKeys = {};\n\nvar WeakMap$1 = global_1.WeakMap;\nvar set, get, has$1;\n\nvar enforce = function (it) {\n  return has$1(it) ? get(it) : set(it, {});\n};\n\nvar getterFor = function (TYPE) {\n  return function (it) {\n    var state;\n    if (!isObject(it) || (state = get(it)).type !== TYPE) {\n      throw TypeError('Incompatible receiver, ' + TYPE + ' required');\n    } return state;\n  };\n};\n\nif (nativeWeakMap) {\n  var store$1 = new WeakMap$1();\n  var wmget = store$1.get;\n  var wmhas = store$1.has;\n  var wmset = store$1.set;\n  set = function (it, metadata) {\n    wmset.call(store$1, it, metadata);\n    return metadata;\n  };\n  get = function (it) {\n    return wmget.call(store$1, it) || {};\n  };\n  has$1 = function (it) {\n    return wmhas.call(store$1, it);\n  };\n} else {\n  var STATE = sharedKey('state');\n  hiddenKeys[STATE] = true;\n  set = function (it, metadata) {\n    createNonEnumerableProperty(it, STATE, metadata);\n    return metadata;\n  };\n  get = function (it) {\n    return has(it, STATE) ? it[STATE] : {};\n  };\n  has$1 = function (it) {\n    return has(it, STATE);\n  };\n}\n\nvar internalState = {\n  set: set,\n  get: get,\n  has: has$1,\n  enforce: enforce,\n  getterFor: getterFor\n};\n\nvar redefine = createCommonjsModule(function (module) {\nvar getInternalState = internalState.get;\nvar enforceInternalState = internalState.enforce;\nvar TEMPLATE = String(functionToString).split('toString');\n\nshared('inspectSource', function (it) {\n  return functionToString.call(it);\n});\n\n(module.exports = function (O, key, value, options) {\n  var unsafe = options ? !!options.unsafe : false;\n  var simple = options ? !!options.enumerable : false;\n  var noTargetGet = options ? !!options.noTargetGet : false;\n  if (typeof value == 'function') {\n    if (typeof key == 'string' && !has(value, 'name')) createNonEnumerableProperty(value, 'name', key);\n    enforceInternalState(value).source = TEMPLATE.join(typeof key == 'string' ? key : '');\n  }\n  if (O === global_1) {\n    if (simple) O[key] = value;\n    else setGlobal(key, value);\n    return;\n  } else if (!unsafe) {\n    delete O[key];\n  } else if (!noTargetGet && O[key]) {\n    simple = true;\n  }\n  if (simple) O[key] = value;\n  else createNonEnumerableProperty(O, key, value);\n// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n})(Function.prototype, 'toString', function toString() {\n  return typeof this == 'function' && getInternalState(this).source || functionToString.call(this);\n});\n});\n\nvar path = global_1;\n\nvar aFunction = function (variable) {\n  return typeof variable == 'function' ? variable : undefined;\n};\n\nvar getBuiltIn = function (namespace, method) {\n  return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global_1[namespace])\n    : path[namespace] && path[namespace][method] || global_1[namespace] && global_1[namespace][method];\n};\n\nvar ceil = Math.ceil;\nvar floor = Math.floor;\n\n// `ToInteger` abstract operation\n// https://tc39.github.io/ecma262/#sec-tointeger\nvar toInteger = function (argument) {\n  return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);\n};\n\nvar min = Math.min;\n\n// `ToLength` abstract operation\n// https://tc39.github.io/ecma262/#sec-tolength\nvar toLength = function (argument) {\n  return argument > 0 ? min(toInteger(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991\n};\n\nvar max = Math.max;\nvar min$1 = Math.min;\n\n// Helper for a popular repeating case of the spec:\n// Let integer be ? ToInteger(index).\n// If integer < 0, let result be max((length + integer), 0); else let result be min(length, length).\nvar toAbsoluteIndex = function (index, length) {\n  var integer = toInteger(index);\n  return integer < 0 ? max(integer + length, 0) : min$1(integer, length);\n};\n\n// `Array.prototype.{ indexOf, includes }` methods implementation\nvar createMethod = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIndexedObject($this);\n    var length = toLength(O.length);\n    var index = toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare\n      if (value != value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) {\n      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n\nvar arrayIncludes = {\n  // `Array.prototype.includes` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.includes\n  includes: createMethod(true),\n  // `Array.prototype.indexOf` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.indexof\n  indexOf: createMethod(false)\n};\n\nvar indexOf = arrayIncludes.indexOf;\n\n\nvar objectKeysInternal = function (object, names) {\n  var O = toIndexedObject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) !has(hiddenKeys, key) && has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (has(O, key = names[i++])) {\n    ~indexOf(result, key) || result.push(key);\n  }\n  return result;\n};\n\n// IE8- don't enum bug keys\nvar enumBugKeys = [\n  'constructor',\n  'hasOwnProperty',\n  'isPrototypeOf',\n  'propertyIsEnumerable',\n  'toLocaleString',\n  'toString',\n  'valueOf'\n];\n\nvar hiddenKeys$1 = enumBugKeys.concat('length', 'prototype');\n\n// `Object.getOwnPropertyNames` method\n// https://tc39.github.io/ecma262/#sec-object.getownpropertynames\nvar f$3 = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n  return objectKeysInternal(O, hiddenKeys$1);\n};\n\nvar objectGetOwnPropertyNames = {\n\tf: f$3\n};\n\nvar f$4 = Object.getOwnPropertySymbols;\n\nvar objectGetOwnPropertySymbols = {\n\tf: f$4\n};\n\n// all object keys, includes non-enumerable and symbols\nvar ownKeys = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {\n  var keys = objectGetOwnPropertyNames.f(anObject(it));\n  var getOwnPropertySymbols = objectGetOwnPropertySymbols.f;\n  return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;\n};\n\nvar copyConstructorProperties = function (target, source) {\n  var keys = ownKeys(source);\n  var defineProperty = objectDefineProperty.f;\n  var getOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    if (!has(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));\n  }\n};\n\nvar replacement = /#|\\.prototype\\./;\n\nvar isForced = function (feature, detection) {\n  var value = data[normalize(feature)];\n  return value == POLYFILL ? true\n    : value == NATIVE ? false\n    : typeof detection == 'function' ? fails(detection)\n    : !!detection;\n};\n\nvar normalize = isForced.normalize = function (string) {\n  return String(string).replace(replacement, '.').toLowerCase();\n};\n\nvar data = isForced.data = {};\nvar NATIVE = isForced.NATIVE = 'N';\nvar POLYFILL = isForced.POLYFILL = 'P';\n\nvar isForced_1 = isForced;\n\nvar getOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f;\n\n\n\n\n\n\n/*\n  options.target      - name of the target object\n  options.global      - target is the global object\n  options.stat        - export as static methods of target\n  options.proto       - export as prototype methods of target\n  options.real        - real prototype method for the `pure` version\n  options.forced      - export even if the native feature is available\n  options.bind        - bind methods to the target, required for the `pure` version\n  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version\n  options.unsafe      - use the simple assignment of property instead of delete + defineProperty\n  options.sham        - add a flag to not completely full polyfills\n  options.enumerable  - export as enumerable property\n  options.noTargetGet - prevent calling a getter on target\n*/\nvar _export = function (options, source) {\n  var TARGET = options.target;\n  var GLOBAL = options.global;\n  var STATIC = options.stat;\n  var FORCED, target, key, targetProperty, sourceProperty, descriptor;\n  if (GLOBAL) {\n    target = global_1;\n  } else if (STATIC) {\n    target = global_1[TARGET] || setGlobal(TARGET, {});\n  } else {\n    target = (global_1[TARGET] || {}).prototype;\n  }\n  if (target) for (key in source) {\n    sourceProperty = source[key];\n    if (options.noTargetGet) {\n      descriptor = getOwnPropertyDescriptor$1(target, key);\n      targetProperty = descriptor && descriptor.value;\n    } else targetProperty = target[key];\n    FORCED = isForced_1(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);\n    // contained in target\n    if (!FORCED && targetProperty !== undefined) {\n      if (typeof sourceProperty === typeof targetProperty) continue;\n      copyConstructorProperties(sourceProperty, targetProperty);\n    }\n    // add a flag to not completely full polyfills\n    if (options.sham || (targetProperty && targetProperty.sham)) {\n      createNonEnumerableProperty(sourceProperty, 'sham', true);\n    }\n    // extend global\n    redefine(target, key, sourceProperty, options);\n  }\n};\n\n// `IsArray` abstract operation\n// https://tc39.github.io/ecma262/#sec-isarray\nvar isArray = Array.isArray || function isArray(arg) {\n  return classofRaw(arg) == 'Array';\n};\n\nvar createProperty = function (object, key, value) {\n  var propertyKey = toPrimitive(key);\n  if (propertyKey in object) objectDefineProperty.f(object, propertyKey, createPropertyDescriptor(0, value));\n  else object[propertyKey] = value;\n};\n\nvar nativeSymbol = !!Object.getOwnPropertySymbols && !fails(function () {\n  // Chrome 38 Symbol has incorrect toString conversion\n  // eslint-disable-next-line no-undef\n  return !String(Symbol());\n});\n\nvar Symbol$1 = global_1.Symbol;\nvar store$2 = shared('wks');\n\nvar wellKnownSymbol = function (name) {\n  return store$2[name] || (store$2[name] = nativeSymbol && Symbol$1[name]\n    || (nativeSymbol ? Symbol$1 : uid)('Symbol.' + name));\n};\n\nvar userAgent = getBuiltIn('navigator', 'userAgent') || '';\n\nvar process = global_1.process;\nvar versions = process && process.versions;\nvar v8 = versions && versions.v8;\nvar match, version;\n\nif (v8) {\n  match = v8.split('.');\n  version = match[0] + match[1];\n} else if (userAgent) {\n  match = userAgent.match(/Edge\\/(\\d+)/);\n  if (!match || match[1] >= 74) {\n    match = userAgent.match(/Chrome\\/(\\d+)/);\n    if (match) version = match[1];\n  }\n}\n\nvar v8Version = version && +version;\n\nvar SPECIES = wellKnownSymbol('species');\n\nvar arrayMethodHasSpeciesSupport = function (METHOD_NAME) {\n  // We can't use this feature detection in V8 since it causes\n  // deoptimization and serious performance degradation\n  // https://github.com/zloirock/core-js/issues/677\n  return v8Version >= 51 || !fails(function () {\n    var array = [];\n    var constructor = array.constructor = {};\n    constructor[SPECIES] = function () {\n      return { foo: 1 };\n    };\n    return array[METHOD_NAME](Boolean).foo !== 1;\n  });\n};\n\nvar SPECIES$1 = wellKnownSymbol('species');\nvar nativeSlice = [].slice;\nvar max$1 = Math.max;\n\n// `Array.prototype.slice` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.slice\n// fallback for not array-like ES3 strings and DOM objects\n_export({ target: 'Array', proto: true, forced: !arrayMethodHasSpeciesSupport('slice') }, {\n  slice: function slice(start, end) {\n    var O = toIndexedObject(this);\n    var length = toLength(O.length);\n    var k = toAbsoluteIndex(start, length);\n    var fin = toAbsoluteIndex(end === undefined ? length : end, length);\n    // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible\n    var Constructor, result, n;\n    if (isArray(O)) {\n      Constructor = O.constructor;\n      // cross-realm fallback\n      if (typeof Constructor == 'function' && (Constructor === Array || isArray(Constructor.prototype))) {\n        Constructor = undefined;\n      } else if (isObject(Constructor)) {\n        Constructor = Constructor[SPECIES$1];\n        if (Constructor === null) Constructor = undefined;\n      }\n      if (Constructor === Array || Constructor === undefined) {\n        return nativeSlice.call(O, k, fin);\n      }\n    }\n    result = new (Constructor === undefined ? Array : Constructor)(max$1(fin - k, 0));\n    for (n = 0; k < fin; k++, n++) if (k in O) createProperty(result, n, O[k]);\n    result.length = n;\n    return result;\n  }\n});\n\nvar defineProperty = objectDefineProperty.f;\n\nvar FunctionPrototype = Function.prototype;\nvar FunctionPrototypeToString = FunctionPrototype.toString;\nvar nameRE = /^\\s*function ([^ (]*)/;\nvar NAME = 'name';\n\n// Function instances `.name` property\n// https://tc39.github.io/ecma262/#sec-function-instances-name\nif (descriptors && !(NAME in FunctionPrototype)) {\n  defineProperty(FunctionPrototype, NAME, {\n    configurable: true,\n    get: function () {\n      try {\n        return FunctionPrototypeToString.call(this).match(nameRE)[1];\n      } catch (error) {\n        return '';\n      }\n    }\n  });\n}\n\nvar nativeGetOwnPropertyNames = objectGetOwnPropertyNames.f;\n\nvar toString$1 = {}.toString;\n\nvar windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames\n  ? Object.getOwnPropertyNames(window) : [];\n\nvar getWindowNames = function (it) {\n  try {\n    return nativeGetOwnPropertyNames(it);\n  } catch (error) {\n    return windowNames.slice();\n  }\n};\n\n// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window\nvar f$5 = function getOwnPropertyNames(it) {\n  return windowNames && toString$1.call(it) == '[object Window]'\n    ? getWindowNames(it)\n    : nativeGetOwnPropertyNames(toIndexedObject(it));\n};\n\nvar objectGetOwnPropertyNamesExternal = {\n\tf: f$5\n};\n\nvar nativeGetOwnPropertyNames$1 = objectGetOwnPropertyNamesExternal.f;\n\nvar FAILS_ON_PRIMITIVES = fails(function () { return !Object.getOwnPropertyNames(1); });\n\n// `Object.getOwnPropertyNames` method\n// https://tc39.github.io/ecma262/#sec-object.getownpropertynames\n_export({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES }, {\n  getOwnPropertyNames: nativeGetOwnPropertyNames$1\n});\n\nfunction _typeof2(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return _typeof2(obj);\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n    };\n  }\n\n  return _typeof(obj);\n}\n\n// `ToObject` abstract operation\n// https://tc39.github.io/ecma262/#sec-toobject\nvar toObject = function (argument) {\n  return Object(requireObjectCoercible(argument));\n};\n\n// `Object.keys` method\n// https://tc39.github.io/ecma262/#sec-object.keys\nvar objectKeys = Object.keys || function keys(O) {\n  return objectKeysInternal(O, enumBugKeys);\n};\n\n// `Object.defineProperties` method\n// https://tc39.github.io/ecma262/#sec-object.defineproperties\nvar objectDefineProperties = descriptors ? Object.defineProperties : function defineProperties(O, Properties) {\n  anObject(O);\n  var keys = objectKeys(Properties);\n  var length = keys.length;\n  var index = 0;\n  var key;\n  while (length > index) objectDefineProperty.f(O, key = keys[index++], Properties[key]);\n  return O;\n};\n\nvar html = getBuiltIn('document', 'documentElement');\n\nvar IE_PROTO = sharedKey('IE_PROTO');\n\nvar PROTOTYPE = 'prototype';\nvar Empty = function () { /* empty */ };\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar createDict = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = documentCreateElement('iframe');\n  var length = enumBugKeys.length;\n  var lt = '<';\n  var script = 'script';\n  var gt = '>';\n  var js = 'java' + script + ':';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  html.appendChild(iframe);\n  iframe.src = String(js);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(lt + script + gt + 'document.F=Object' + lt + '/' + script + gt);\n  iframeDocument.close();\n  createDict = iframeDocument.F;\n  while (length--) delete createDict[PROTOTYPE][enumBugKeys[length]];\n  return createDict();\n};\n\n// `Object.create` method\n// https://tc39.github.io/ecma262/#sec-object.create\nvar objectCreate = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    Empty[PROTOTYPE] = anObject(O);\n    result = new Empty();\n    Empty[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = createDict();\n  return Properties === undefined ? result : objectDefineProperties(result, Properties);\n};\n\nhiddenKeys[IE_PROTO] = true;\n\nvar f$6 = wellKnownSymbol;\n\nvar wrappedWellKnownSymbol = {\n\tf: f$6\n};\n\nvar defineProperty$1 = objectDefineProperty.f;\n\nvar defineWellKnownSymbol = function (NAME) {\n  var Symbol = path.Symbol || (path.Symbol = {});\n  if (!has(Symbol, NAME)) defineProperty$1(Symbol, NAME, {\n    value: wrappedWellKnownSymbol.f(NAME)\n  });\n};\n\nvar defineProperty$2 = objectDefineProperty.f;\n\n\n\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\n\nvar setToStringTag = function (it, TAG, STATIC) {\n  if (it && !has(it = STATIC ? it : it.prototype, TO_STRING_TAG)) {\n    defineProperty$2(it, TO_STRING_TAG, { configurable: true, value: TAG });\n  }\n};\n\nvar aFunction$1 = function (it) {\n  if (typeof it != 'function') {\n    throw TypeError(String(it) + ' is not a function');\n  } return it;\n};\n\n// optional / simple context binding\nvar bindContext = function (fn, that, length) {\n  aFunction$1(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 0: return function () {\n      return fn.call(that);\n    };\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n\nvar SPECIES$2 = wellKnownSymbol('species');\n\n// `ArraySpeciesCreate` abstract operation\n// https://tc39.github.io/ecma262/#sec-arrayspeciescreate\nvar arraySpeciesCreate = function (originalArray, length) {\n  var C;\n  if (isArray(originalArray)) {\n    C = originalArray.constructor;\n    // cross-realm fallback\n    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;\n    else if (isObject(C)) {\n      C = C[SPECIES$2];\n      if (C === null) C = undefined;\n    }\n  } return new (C === undefined ? Array : C)(length === 0 ? 0 : length);\n};\n\nvar push = [].push;\n\n// `Array.prototype.{ forEach, map, filter, some, every, find, findIndex }` methods implementation\nvar createMethod$1 = function (TYPE) {\n  var IS_MAP = TYPE == 1;\n  var IS_FILTER = TYPE == 2;\n  var IS_SOME = TYPE == 3;\n  var IS_EVERY = TYPE == 4;\n  var IS_FIND_INDEX = TYPE == 6;\n  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;\n  return function ($this, callbackfn, that, specificCreate) {\n    var O = toObject($this);\n    var self = indexedObject(O);\n    var boundFunction = bindContext(callbackfn, that, 3);\n    var length = toLength(self.length);\n    var index = 0;\n    var create = specificCreate || arraySpeciesCreate;\n    var target = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;\n    var value, result;\n    for (;length > index; index++) if (NO_HOLES || index in self) {\n      value = self[index];\n      result = boundFunction(value, index, O);\n      if (TYPE) {\n        if (IS_MAP) target[index] = result; // map\n        else if (result) switch (TYPE) {\n          case 3: return true;              // some\n          case 5: return value;             // find\n          case 6: return index;             // findIndex\n          case 2: push.call(target, value); // filter\n        } else if (IS_EVERY) return false;  // every\n      }\n    }\n    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;\n  };\n};\n\nvar arrayIteration = {\n  // `Array.prototype.forEach` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.foreach\n  forEach: createMethod$1(0),\n  // `Array.prototype.map` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.map\n  map: createMethod$1(1),\n  // `Array.prototype.filter` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.filter\n  filter: createMethod$1(2),\n  // `Array.prototype.some` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.some\n  some: createMethod$1(3),\n  // `Array.prototype.every` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.every\n  every: createMethod$1(4),\n  // `Array.prototype.find` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.find\n  find: createMethod$1(5),\n  // `Array.prototype.findIndex` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.findIndex\n  findIndex: createMethod$1(6)\n};\n\nvar $forEach = arrayIteration.forEach;\n\nvar HIDDEN = sharedKey('hidden');\nvar SYMBOL = 'Symbol';\nvar PROTOTYPE$1 = 'prototype';\nvar TO_PRIMITIVE = wellKnownSymbol('toPrimitive');\nvar setInternalState = internalState.set;\nvar getInternalState = internalState.getterFor(SYMBOL);\nvar ObjectPrototype = Object[PROTOTYPE$1];\nvar $Symbol = global_1.Symbol;\nvar JSON$1 = global_1.JSON;\nvar nativeJSONStringify = JSON$1 && JSON$1.stringify;\nvar nativeGetOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f;\nvar nativeDefineProperty$1 = objectDefineProperty.f;\nvar nativeGetOwnPropertyNames$2 = objectGetOwnPropertyNamesExternal.f;\nvar nativePropertyIsEnumerable$1 = objectPropertyIsEnumerable.f;\nvar AllSymbols = shared('symbols');\nvar ObjectPrototypeSymbols = shared('op-symbols');\nvar StringToSymbolRegistry = shared('string-to-symbol-registry');\nvar SymbolToStringRegistry = shared('symbol-to-string-registry');\nvar WellKnownSymbolsStore = shared('wks');\nvar QObject = global_1.QObject;\n// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173\nvar USE_SETTER = !QObject || !QObject[PROTOTYPE$1] || !QObject[PROTOTYPE$1].findChild;\n\n// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687\nvar setSymbolDescriptor = descriptors && fails(function () {\n  return objectCreate(nativeDefineProperty$1({}, 'a', {\n    get: function () { return nativeDefineProperty$1(this, 'a', { value: 7 }).a; }\n  })).a != 7;\n}) ? function (O, P, Attributes) {\n  var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor$1(ObjectPrototype, P);\n  if (ObjectPrototypeDescriptor) delete ObjectPrototype[P];\n  nativeDefineProperty$1(O, P, Attributes);\n  if (ObjectPrototypeDescriptor && O !== ObjectPrototype) {\n    nativeDefineProperty$1(ObjectPrototype, P, ObjectPrototypeDescriptor);\n  }\n} : nativeDefineProperty$1;\n\nvar wrap = function (tag, description) {\n  var symbol = AllSymbols[tag] = objectCreate($Symbol[PROTOTYPE$1]);\n  setInternalState(symbol, {\n    type: SYMBOL,\n    tag: tag,\n    description: description\n  });\n  if (!descriptors) symbol.description = description;\n  return symbol;\n};\n\nvar isSymbol = nativeSymbol && typeof $Symbol.iterator == 'symbol' ? function (it) {\n  return typeof it == 'symbol';\n} : function (it) {\n  return Object(it) instanceof $Symbol;\n};\n\nvar $defineProperty = function defineProperty(O, P, Attributes) {\n  if (O === ObjectPrototype) $defineProperty(ObjectPrototypeSymbols, P, Attributes);\n  anObject(O);\n  var key = toPrimitive(P, true);\n  anObject(Attributes);\n  if (has(AllSymbols, key)) {\n    if (!Attributes.enumerable) {\n      if (!has(O, HIDDEN)) nativeDefineProperty$1(O, HIDDEN, createPropertyDescriptor(1, {}));\n      O[HIDDEN][key] = true;\n    } else {\n      if (has(O, HIDDEN) && O[HIDDEN][key]) O[HIDDEN][key] = false;\n      Attributes = objectCreate(Attributes, { enumerable: createPropertyDescriptor(0, false) });\n    } return setSymbolDescriptor(O, key, Attributes);\n  } return nativeDefineProperty$1(O, key, Attributes);\n};\n\nvar $defineProperties = function defineProperties(O, Properties) {\n  anObject(O);\n  var properties = toIndexedObject(Properties);\n  var keys = objectKeys(properties).concat($getOwnPropertySymbols(properties));\n  $forEach(keys, function (key) {\n    if (!descriptors || $propertyIsEnumerable.call(properties, key)) $defineProperty(O, key, properties[key]);\n  });\n  return O;\n};\n\nvar $create = function create(O, Properties) {\n  return Properties === undefined ? objectCreate(O) : $defineProperties(objectCreate(O), Properties);\n};\n\nvar $propertyIsEnumerable = function propertyIsEnumerable(V) {\n  var P = toPrimitive(V, true);\n  var enumerable = nativePropertyIsEnumerable$1.call(this, P);\n  if (this === ObjectPrototype && has(AllSymbols, P) && !has(ObjectPrototypeSymbols, P)) return false;\n  return enumerable || !has(this, P) || !has(AllSymbols, P) || has(this, HIDDEN) && this[HIDDEN][P] ? enumerable : true;\n};\n\nvar $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O, P) {\n  var it = toIndexedObject(O);\n  var key = toPrimitive(P, true);\n  if (it === ObjectPrototype && has(AllSymbols, key) && !has(ObjectPrototypeSymbols, key)) return;\n  var descriptor = nativeGetOwnPropertyDescriptor$1(it, key);\n  if (descriptor && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) {\n    descriptor.enumerable = true;\n  }\n  return descriptor;\n};\n\nvar $getOwnPropertyNames = function getOwnPropertyNames(O) {\n  var names = nativeGetOwnPropertyNames$2(toIndexedObject(O));\n  var result = [];\n  $forEach(names, function (key) {\n    if (!has(AllSymbols, key) && !has(hiddenKeys, key)) result.push(key);\n  });\n  return result;\n};\n\nvar $getOwnPropertySymbols = function getOwnPropertySymbols(O) {\n  var IS_OBJECT_PROTOTYPE = O === ObjectPrototype;\n  var names = nativeGetOwnPropertyNames$2(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject(O));\n  var result = [];\n  $forEach(names, function (key) {\n    if (has(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || has(ObjectPrototype, key))) {\n      result.push(AllSymbols[key]);\n    }\n  });\n  return result;\n};\n\n// `Symbol` constructor\n// https://tc39.github.io/ecma262/#sec-symbol-constructor\nif (!nativeSymbol) {\n  $Symbol = function Symbol() {\n    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor');\n    var description = !arguments.length || arguments[0] === undefined ? undefined : String(arguments[0]);\n    var tag = uid(description);\n    var setter = function (value) {\n      if (this === ObjectPrototype) setter.call(ObjectPrototypeSymbols, value);\n      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;\n      setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));\n    };\n    if (descriptors && USE_SETTER) setSymbolDescriptor(ObjectPrototype, tag, { configurable: true, set: setter });\n    return wrap(tag, description);\n  };\n\n  redefine($Symbol[PROTOTYPE$1], 'toString', function toString() {\n    return getInternalState(this).tag;\n  });\n\n  objectPropertyIsEnumerable.f = $propertyIsEnumerable;\n  objectDefineProperty.f = $defineProperty;\n  objectGetOwnPropertyDescriptor.f = $getOwnPropertyDescriptor;\n  objectGetOwnPropertyNames.f = objectGetOwnPropertyNamesExternal.f = $getOwnPropertyNames;\n  objectGetOwnPropertySymbols.f = $getOwnPropertySymbols;\n\n  if (descriptors) {\n    // https://github.com/tc39/proposal-Symbol-description\n    nativeDefineProperty$1($Symbol[PROTOTYPE$1], 'description', {\n      configurable: true,\n      get: function description() {\n        return getInternalState(this).description;\n      }\n    });\n    {\n      redefine(ObjectPrototype, 'propertyIsEnumerable', $propertyIsEnumerable, { unsafe: true });\n    }\n  }\n\n  wrappedWellKnownSymbol.f = function (name) {\n    return wrap(wellKnownSymbol(name), name);\n  };\n}\n\n_export({ global: true, wrap: true, forced: !nativeSymbol, sham: !nativeSymbol }, {\n  Symbol: $Symbol\n});\n\n$forEach(objectKeys(WellKnownSymbolsStore), function (name) {\n  defineWellKnownSymbol(name);\n});\n\n_export({ target: SYMBOL, stat: true, forced: !nativeSymbol }, {\n  // `Symbol.for` method\n  // https://tc39.github.io/ecma262/#sec-symbol.for\n  'for': function (key) {\n    var string = String(key);\n    if (has(StringToSymbolRegistry, string)) return StringToSymbolRegistry[string];\n    var symbol = $Symbol(string);\n    StringToSymbolRegistry[string] = symbol;\n    SymbolToStringRegistry[symbol] = string;\n    return symbol;\n  },\n  // `Symbol.keyFor` method\n  // https://tc39.github.io/ecma262/#sec-symbol.keyfor\n  keyFor: function keyFor(sym) {\n    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol');\n    if (has(SymbolToStringRegistry, sym)) return SymbolToStringRegistry[sym];\n  },\n  useSetter: function () { USE_SETTER = true; },\n  useSimple: function () { USE_SETTER = false; }\n});\n\n_export({ target: 'Object', stat: true, forced: !nativeSymbol, sham: !descriptors }, {\n  // `Object.create` method\n  // https://tc39.github.io/ecma262/#sec-object.create\n  create: $create,\n  // `Object.defineProperty` method\n  // https://tc39.github.io/ecma262/#sec-object.defineproperty\n  defineProperty: $defineProperty,\n  // `Object.defineProperties` method\n  // https://tc39.github.io/ecma262/#sec-object.defineproperties\n  defineProperties: $defineProperties,\n  // `Object.getOwnPropertyDescriptor` method\n  // https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptors\n  getOwnPropertyDescriptor: $getOwnPropertyDescriptor\n});\n\n_export({ target: 'Object', stat: true, forced: !nativeSymbol }, {\n  // `Object.getOwnPropertyNames` method\n  // https://tc39.github.io/ecma262/#sec-object.getownpropertynames\n  getOwnPropertyNames: $getOwnPropertyNames,\n  // `Object.getOwnPropertySymbols` method\n  // https://tc39.github.io/ecma262/#sec-object.getownpropertysymbols\n  getOwnPropertySymbols: $getOwnPropertySymbols\n});\n\n// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives\n// https://bugs.chromium.org/p/v8/issues/detail?id=3443\n_export({ target: 'Object', stat: true, forced: fails(function () { objectGetOwnPropertySymbols.f(1); }) }, {\n  getOwnPropertySymbols: function getOwnPropertySymbols(it) {\n    return objectGetOwnPropertySymbols.f(toObject(it));\n  }\n});\n\n// `JSON.stringify` method behavior with symbols\n// https://tc39.github.io/ecma262/#sec-json.stringify\nJSON$1 && _export({ target: 'JSON', stat: true, forced: !nativeSymbol || fails(function () {\n  var symbol = $Symbol();\n  // MS Edge converts symbol values to JSON as {}\n  return nativeJSONStringify([symbol]) != '[null]'\n    // WebKit converts symbol values to JSON as null\n    || nativeJSONStringify({ a: symbol }) != '{}'\n    // V8 throws on boxed symbols\n    || nativeJSONStringify(Object(symbol)) != '{}';\n}) }, {\n  stringify: function stringify(it) {\n    var args = [it];\n    var index = 1;\n    var replacer, $replacer;\n    while (arguments.length > index) args.push(arguments[index++]);\n    $replacer = replacer = args[1];\n    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined\n    if (!isArray(replacer)) replacer = function (key, value) {\n      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);\n      if (!isSymbol(value)) return value;\n    };\n    args[1] = replacer;\n    return nativeJSONStringify.apply(JSON$1, args);\n  }\n});\n\n// `Symbol.prototype[@@toPrimitive]` method\n// https://tc39.github.io/ecma262/#sec-symbol.prototype-@@toprimitive\nif (!$Symbol[PROTOTYPE$1][TO_PRIMITIVE]) {\n  createNonEnumerableProperty($Symbol[PROTOTYPE$1], TO_PRIMITIVE, $Symbol[PROTOTYPE$1].valueOf);\n}\n// `Symbol.prototype[@@toStringTag]` property\n// https://tc39.github.io/ecma262/#sec-symbol.prototype-@@tostringtag\nsetToStringTag($Symbol, SYMBOL);\n\nhiddenKeys[HIDDEN] = true;\n\nvar defineProperty$3 = objectDefineProperty.f;\n\n\nvar NativeSymbol = global_1.Symbol;\n\nif (descriptors && typeof NativeSymbol == 'function' && (!('description' in NativeSymbol.prototype) ||\n  // Safari 12 bug\n  NativeSymbol().description !== undefined\n)) {\n  var EmptyStringDescriptionStore = {};\n  // wrap Symbol constructor for correct work with undefined description\n  var SymbolWrapper = function Symbol() {\n    var description = arguments.length < 1 || arguments[0] === undefined ? undefined : String(arguments[0]);\n    var result = this instanceof SymbolWrapper\n      ? new NativeSymbol(description)\n      // in Edge 13, String(Symbol(undefined)) === 'Symbol(undefined)'\n      : description === undefined ? NativeSymbol() : NativeSymbol(description);\n    if (description === '') EmptyStringDescriptionStore[result] = true;\n    return result;\n  };\n  copyConstructorProperties(SymbolWrapper, NativeSymbol);\n  var symbolPrototype = SymbolWrapper.prototype = NativeSymbol.prototype;\n  symbolPrototype.constructor = SymbolWrapper;\n\n  var symbolToString = symbolPrototype.toString;\n  var native = String(NativeSymbol('test')) == 'Symbol(test)';\n  var regexp = /^Symbol\\((.*)\\)[^)]+$/;\n  defineProperty$3(symbolPrototype, 'description', {\n    configurable: true,\n    get: function description() {\n      var symbol = isObject(this) ? this.valueOf() : this;\n      var string = symbolToString.call(symbol);\n      if (has(EmptyStringDescriptionStore, symbol)) return '';\n      var desc = native ? string.slice(7, -1) : string.replace(regexp, '$1');\n      return desc === '' ? undefined : desc;\n    }\n  });\n\n  _export({ global: true, forced: true }, {\n    Symbol: SymbolWrapper\n  });\n}\n\n// `Symbol.iterator` well-known symbol\n// https://tc39.github.io/ecma262/#sec-symbol.iterator\ndefineWellKnownSymbol('iterator');\n\nvar UNSCOPABLES = wellKnownSymbol('unscopables');\nvar ArrayPrototype = Array.prototype;\n\n// Array.prototype[@@unscopables]\n// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables\nif (ArrayPrototype[UNSCOPABLES] == undefined) {\n  createNonEnumerableProperty(ArrayPrototype, UNSCOPABLES, objectCreate(null));\n}\n\n// add a key to Array.prototype[@@unscopables]\nvar addToUnscopables = function (key) {\n  ArrayPrototype[UNSCOPABLES][key] = true;\n};\n\nvar iterators = {};\n\nvar correctPrototypeGetter = !fails(function () {\n  function F() { /* empty */ }\n  F.prototype.constructor = null;\n  return Object.getPrototypeOf(new F()) !== F.prototype;\n});\n\nvar IE_PROTO$1 = sharedKey('IE_PROTO');\nvar ObjectPrototype$1 = Object.prototype;\n\n// `Object.getPrototypeOf` method\n// https://tc39.github.io/ecma262/#sec-object.getprototypeof\nvar objectGetPrototypeOf = correctPrototypeGetter ? Object.getPrototypeOf : function (O) {\n  O = toObject(O);\n  if (has(O, IE_PROTO$1)) return O[IE_PROTO$1];\n  if (typeof O.constructor == 'function' && O instanceof O.constructor) {\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectPrototype$1 : null;\n};\n\nvar ITERATOR = wellKnownSymbol('iterator');\nvar BUGGY_SAFARI_ITERATORS = false;\n\nvar returnThis = function () { return this; };\n\n// `%IteratorPrototype%` object\n// https://tc39.github.io/ecma262/#sec-%iteratorprototype%-object\nvar IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;\n\nif ([].keys) {\n  arrayIterator = [].keys();\n  // Safari 8 has buggy iterators w/o `next`\n  if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;\n  else {\n    PrototypeOfArrayIteratorPrototype = objectGetPrototypeOf(objectGetPrototypeOf(arrayIterator));\n    if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;\n  }\n}\n\nif (IteratorPrototype == undefined) IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\nif ( !has(IteratorPrototype, ITERATOR)) {\n  createNonEnumerableProperty(IteratorPrototype, ITERATOR, returnThis);\n}\n\nvar iteratorsCore = {\n  IteratorPrototype: IteratorPrototype,\n  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS\n};\n\nvar IteratorPrototype$1 = iteratorsCore.IteratorPrototype;\n\n\n\n\n\nvar returnThis$1 = function () { return this; };\n\nvar createIteratorConstructor = function (IteratorConstructor, NAME, next) {\n  var TO_STRING_TAG = NAME + ' Iterator';\n  IteratorConstructor.prototype = objectCreate(IteratorPrototype$1, { next: createPropertyDescriptor(1, next) });\n  setToStringTag(IteratorConstructor, TO_STRING_TAG, false);\n  iterators[TO_STRING_TAG] = returnThis$1;\n  return IteratorConstructor;\n};\n\nvar aPossiblePrototype = function (it) {\n  if (!isObject(it) && it !== null) {\n    throw TypeError(\"Can't set \" + String(it) + ' as a prototype');\n  } return it;\n};\n\n// `Object.setPrototypeOf` method\n// https://tc39.github.io/ecma262/#sec-object.setprototypeof\n// Works with __proto__ only. Old v8 can't work with null proto objects.\n/* eslint-disable no-proto */\nvar objectSetPrototypeOf = Object.setPrototypeOf || ('__proto__' in {} ? function () {\n  var CORRECT_SETTER = false;\n  var test = {};\n  var setter;\n  try {\n    setter = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set;\n    setter.call(test, []);\n    CORRECT_SETTER = test instanceof Array;\n  } catch (error) { /* empty */ }\n  return function setPrototypeOf(O, proto) {\n    anObject(O);\n    aPossiblePrototype(proto);\n    if (CORRECT_SETTER) setter.call(O, proto);\n    else O.__proto__ = proto;\n    return O;\n  };\n}() : undefined);\n\nvar IteratorPrototype$2 = iteratorsCore.IteratorPrototype;\nvar BUGGY_SAFARI_ITERATORS$1 = iteratorsCore.BUGGY_SAFARI_ITERATORS;\nvar ITERATOR$1 = wellKnownSymbol('iterator');\nvar KEYS = 'keys';\nvar VALUES = 'values';\nvar ENTRIES = 'entries';\n\nvar returnThis$2 = function () { return this; };\n\nvar defineIterator = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {\n  createIteratorConstructor(IteratorConstructor, NAME, next);\n\n  var getIterationMethod = function (KIND) {\n    if (KIND === DEFAULT && defaultIterator) return defaultIterator;\n    if (!BUGGY_SAFARI_ITERATORS$1 && KIND in IterablePrototype) return IterablePrototype[KIND];\n    switch (KIND) {\n      case KEYS: return function keys() { return new IteratorConstructor(this, KIND); };\n      case VALUES: return function values() { return new IteratorConstructor(this, KIND); };\n      case ENTRIES: return function entries() { return new IteratorConstructor(this, KIND); };\n    } return function () { return new IteratorConstructor(this); };\n  };\n\n  var TO_STRING_TAG = NAME + ' Iterator';\n  var INCORRECT_VALUES_NAME = false;\n  var IterablePrototype = Iterable.prototype;\n  var nativeIterator = IterablePrototype[ITERATOR$1]\n    || IterablePrototype['@@iterator']\n    || DEFAULT && IterablePrototype[DEFAULT];\n  var defaultIterator = !BUGGY_SAFARI_ITERATORS$1 && nativeIterator || getIterationMethod(DEFAULT);\n  var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;\n  var CurrentIteratorPrototype, methods, KEY;\n\n  // fix native\n  if (anyNativeIterator) {\n    CurrentIteratorPrototype = objectGetPrototypeOf(anyNativeIterator.call(new Iterable()));\n    if (IteratorPrototype$2 !== Object.prototype && CurrentIteratorPrototype.next) {\n      if ( objectGetPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype$2) {\n        if (objectSetPrototypeOf) {\n          objectSetPrototypeOf(CurrentIteratorPrototype, IteratorPrototype$2);\n        } else if (typeof CurrentIteratorPrototype[ITERATOR$1] != 'function') {\n          createNonEnumerableProperty(CurrentIteratorPrototype, ITERATOR$1, returnThis$2);\n        }\n      }\n      // Set @@toStringTag to native iterators\n      setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true);\n    }\n  }\n\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if (DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {\n    INCORRECT_VALUES_NAME = true;\n    defaultIterator = function values() { return nativeIterator.call(this); };\n  }\n\n  // define iterator\n  if ( IterablePrototype[ITERATOR$1] !== defaultIterator) {\n    createNonEnumerableProperty(IterablePrototype, ITERATOR$1, defaultIterator);\n  }\n  iterators[NAME] = defaultIterator;\n\n  // export additional methods\n  if (DEFAULT) {\n    methods = {\n      values: getIterationMethod(VALUES),\n      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),\n      entries: getIterationMethod(ENTRIES)\n    };\n    if (FORCED) for (KEY in methods) {\n      if (BUGGY_SAFARI_ITERATORS$1 || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {\n        redefine(IterablePrototype, KEY, methods[KEY]);\n      }\n    } else _export({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS$1 || INCORRECT_VALUES_NAME }, methods);\n  }\n\n  return methods;\n};\n\nvar ARRAY_ITERATOR = 'Array Iterator';\nvar setInternalState$1 = internalState.set;\nvar getInternalState$1 = internalState.getterFor(ARRAY_ITERATOR);\n\n// `Array.prototype.entries` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.entries\n// `Array.prototype.keys` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.keys\n// `Array.prototype.values` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.values\n// `Array.prototype[@@iterator]` method\n// https://tc39.github.io/ecma262/#sec-array.prototype-@@iterator\n// `CreateArrayIterator` internal method\n// https://tc39.github.io/ecma262/#sec-createarrayiterator\nvar es_array_iterator = defineIterator(Array, 'Array', function (iterated, kind) {\n  setInternalState$1(this, {\n    type: ARRAY_ITERATOR,\n    target: toIndexedObject(iterated), // target\n    index: 0,                          // next index\n    kind: kind                         // kind\n  });\n// `%ArrayIteratorPrototype%.next` method\n// https://tc39.github.io/ecma262/#sec-%arrayiteratorprototype%.next\n}, function () {\n  var state = getInternalState$1(this);\n  var target = state.target;\n  var kind = state.kind;\n  var index = state.index++;\n  if (!target || index >= target.length) {\n    state.target = undefined;\n    return { value: undefined, done: true };\n  }\n  if (kind == 'keys') return { value: index, done: false };\n  if (kind == 'values') return { value: target[index], done: false };\n  return { value: [index, target[index]], done: false };\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values%\n// https://tc39.github.io/ecma262/#sec-createunmappedargumentsobject\n// https://tc39.github.io/ecma262/#sec-createmappedargumentsobject\niterators.Arguments = iterators.Array;\n\n// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables\naddToUnscopables('keys');\naddToUnscopables('values');\naddToUnscopables('entries');\n\nvar nativeAssign = Object.assign;\n\n// `Object.assign` method\n// https://tc39.github.io/ecma262/#sec-object.assign\n// should work with symbols and should have deterministic property order (V8 bug)\nvar objectAssign = !nativeAssign || fails(function () {\n  var A = {};\n  var B = {};\n  // eslint-disable-next-line no-undef\n  var symbol = Symbol();\n  var alphabet = 'abcdefghijklmnopqrst';\n  A[symbol] = 7;\n  alphabet.split('').forEach(function (chr) { B[chr] = chr; });\n  return nativeAssign({}, A)[symbol] != 7 || objectKeys(nativeAssign({}, B)).join('') != alphabet;\n}) ? function assign(target, source) { // eslint-disable-line no-unused-vars\n  var T = toObject(target);\n  var argumentsLength = arguments.length;\n  var index = 1;\n  var getOwnPropertySymbols = objectGetOwnPropertySymbols.f;\n  var propertyIsEnumerable = objectPropertyIsEnumerable.f;\n  while (argumentsLength > index) {\n    var S = indexedObject(arguments[index++]);\n    var keys = getOwnPropertySymbols ? objectKeys(S).concat(getOwnPropertySymbols(S)) : objectKeys(S);\n    var length = keys.length;\n    var j = 0;\n    var key;\n    while (length > j) {\n      key = keys[j++];\n      if (!descriptors || propertyIsEnumerable.call(S, key)) T[key] = S[key];\n    }\n  } return T;\n} : nativeAssign;\n\n// `Object.assign` method\n// https://tc39.github.io/ecma262/#sec-object.assign\n_export({ target: 'Object', stat: true, forced: Object.assign !== objectAssign }, {\n  assign: objectAssign\n});\n\nvar TO_STRING_TAG$1 = wellKnownSymbol('toStringTag');\n// ES3 wrong here\nvar CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function (it, key) {\n  try {\n    return it[key];\n  } catch (error) { /* empty */ }\n};\n\n// getting tag from ES6+ `Object.prototype.toString`\nvar classof = function (it) {\n  var O, tag, result;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG$1)) == 'string' ? tag\n    // builtinTag case\n    : CORRECT_ARGUMENTS ? classofRaw(O)\n    // ES3 arguments fallback\n    : (result = classofRaw(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : result;\n};\n\nvar TO_STRING_TAG$2 = wellKnownSymbol('toStringTag');\nvar test = {};\n\ntest[TO_STRING_TAG$2] = 'z';\n\n// `Object.prototype.toString` method implementation\n// https://tc39.github.io/ecma262/#sec-object.prototype.tostring\nvar objectToString = String(test) !== '[object z]' ? function toString() {\n  return '[object ' + classof(this) + ']';\n} : test.toString;\n\nvar ObjectPrototype$2 = Object.prototype;\n\n// `Object.prototype.toString` method\n// https://tc39.github.io/ecma262/#sec-object.prototype.tostring\nif (objectToString !== ObjectPrototype$2.toString) {\n  redefine(ObjectPrototype$2, 'toString', objectToString, { unsafe: true });\n}\n\nvar freezing = !fails(function () {\n  return Object.isExtensible(Object.preventExtensions({}));\n});\n\nvar internalMetadata = createCommonjsModule(function (module) {\nvar defineProperty = objectDefineProperty.f;\n\n\n\nvar METADATA = uid('meta');\nvar id = 0;\n\nvar isExtensible = Object.isExtensible || function () {\n  return true;\n};\n\nvar setMetadata = function (it) {\n  defineProperty(it, METADATA, { value: {\n    objectID: 'O' + ++id, // object ID\n    weakData: {}          // weak collections IDs\n  } });\n};\n\nvar fastKey = function (it, create) {\n  // return a primitive with prefix\n  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;\n  if (!has(it, METADATA)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return 'F';\n    // not necessary to add metadata\n    if (!create) return 'E';\n    // add missing metadata\n    setMetadata(it);\n  // return object ID\n  } return it[METADATA].objectID;\n};\n\nvar getWeakData = function (it, create) {\n  if (!has(it, METADATA)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return true;\n    // not necessary to add metadata\n    if (!create) return false;\n    // add missing metadata\n    setMetadata(it);\n  // return the store of weak collections IDs\n  } return it[METADATA].weakData;\n};\n\n// add metadata on freeze-family methods calling\nvar onFreeze = function (it) {\n  if (freezing && meta.REQUIRED && isExtensible(it) && !has(it, METADATA)) setMetadata(it);\n  return it;\n};\n\nvar meta = module.exports = {\n  REQUIRED: false,\n  fastKey: fastKey,\n  getWeakData: getWeakData,\n  onFreeze: onFreeze\n};\n\nhiddenKeys[METADATA] = true;\n});\n\nvar ITERATOR$2 = wellKnownSymbol('iterator');\nvar ArrayPrototype$1 = Array.prototype;\n\n// check on default Array iterator\nvar isArrayIteratorMethod = function (it) {\n  return it !== undefined && (iterators.Array === it || ArrayPrototype$1[ITERATOR$2] === it);\n};\n\nvar ITERATOR$3 = wellKnownSymbol('iterator');\n\nvar getIteratorMethod = function (it) {\n  if (it != undefined) return it[ITERATOR$3]\n    || it['@@iterator']\n    || iterators[classof(it)];\n};\n\n// call something on iterator step with safe closing on error\nvar callWithSafeIterationClosing = function (iterator, fn, value, ENTRIES) {\n  try {\n    return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);\n  // 7.4.6 IteratorClose(iterator, completion)\n  } catch (error) {\n    var returnMethod = iterator['return'];\n    if (returnMethod !== undefined) anObject(returnMethod.call(iterator));\n    throw error;\n  }\n};\n\nvar iterate_1 = createCommonjsModule(function (module) {\nvar Result = function (stopped, result) {\n  this.stopped = stopped;\n  this.result = result;\n};\n\nvar iterate = module.exports = function (iterable, fn, that, AS_ENTRIES, IS_ITERATOR) {\n  var boundFunction = bindContext(fn, that, AS_ENTRIES ? 2 : 1);\n  var iterator, iterFn, index, length, result, next, step;\n\n  if (IS_ITERATOR) {\n    iterator = iterable;\n  } else {\n    iterFn = getIteratorMethod(iterable);\n    if (typeof iterFn != 'function') throw TypeError('Target is not iterable');\n    // optimisation for array iterators\n    if (isArrayIteratorMethod(iterFn)) {\n      for (index = 0, length = toLength(iterable.length); length > index; index++) {\n        result = AS_ENTRIES\n          ? boundFunction(anObject(step = iterable[index])[0], step[1])\n          : boundFunction(iterable[index]);\n        if (result && result instanceof Result) return result;\n      } return new Result(false);\n    }\n    iterator = iterFn.call(iterable);\n  }\n\n  next = iterator.next;\n  while (!(step = next.call(iterator)).done) {\n    result = callWithSafeIterationClosing(iterator, boundFunction, step.value, AS_ENTRIES);\n    if (typeof result == 'object' && result && result instanceof Result) return result;\n  } return new Result(false);\n};\n\niterate.stop = function (result) {\n  return new Result(true, result);\n};\n});\n\nvar anInstance = function (it, Constructor, name) {\n  if (!(it instanceof Constructor)) {\n    throw TypeError('Incorrect ' + (name ? name + ' ' : '') + 'invocation');\n  } return it;\n};\n\nvar ITERATOR$4 = wellKnownSymbol('iterator');\nvar SAFE_CLOSING = false;\n\ntry {\n  var called = 0;\n  var iteratorWithReturn = {\n    next: function () {\n      return { done: !!called++ };\n    },\n    'return': function () {\n      SAFE_CLOSING = true;\n    }\n  };\n  iteratorWithReturn[ITERATOR$4] = function () {\n    return this;\n  };\n  // eslint-disable-next-line no-throw-literal\n  Array.from(iteratorWithReturn, function () { throw 2; });\n} catch (error) { /* empty */ }\n\nvar checkCorrectnessOfIteration = function (exec, SKIP_CLOSING) {\n  if (!SKIP_CLOSING && !SAFE_CLOSING) return false;\n  var ITERATION_SUPPORT = false;\n  try {\n    var object = {};\n    object[ITERATOR$4] = function () {\n      return {\n        next: function () {\n          return { done: ITERATION_SUPPORT = true };\n        }\n      };\n    };\n    exec(object);\n  } catch (error) { /* empty */ }\n  return ITERATION_SUPPORT;\n};\n\n// makes subclassing work correct for wrapped built-ins\nvar inheritIfRequired = function ($this, dummy, Wrapper) {\n  var NewTarget, NewTargetPrototype;\n  if (\n    // it can work only with native `setPrototypeOf`\n    objectSetPrototypeOf &&\n    // we haven't completely correct pre-ES6 way for getting `new.target`, so use this\n    typeof (NewTarget = dummy.constructor) == 'function' &&\n    NewTarget !== Wrapper &&\n    isObject(NewTargetPrototype = NewTarget.prototype) &&\n    NewTargetPrototype !== Wrapper.prototype\n  ) objectSetPrototypeOf($this, NewTargetPrototype);\n  return $this;\n};\n\nvar collection = function (CONSTRUCTOR_NAME, wrapper, common, IS_MAP, IS_WEAK) {\n  var NativeConstructor = global_1[CONSTRUCTOR_NAME];\n  var NativePrototype = NativeConstructor && NativeConstructor.prototype;\n  var Constructor = NativeConstructor;\n  var ADDER = IS_MAP ? 'set' : 'add';\n  var exported = {};\n\n  var fixMethod = function (KEY) {\n    var nativeMethod = NativePrototype[KEY];\n    redefine(NativePrototype, KEY,\n      KEY == 'add' ? function add(value) {\n        nativeMethod.call(this, value === 0 ? 0 : value);\n        return this;\n      } : KEY == 'delete' ? function (key) {\n        return IS_WEAK && !isObject(key) ? false : nativeMethod.call(this, key === 0 ? 0 : key);\n      } : KEY == 'get' ? function get(key) {\n        return IS_WEAK && !isObject(key) ? undefined : nativeMethod.call(this, key === 0 ? 0 : key);\n      } : KEY == 'has' ? function has(key) {\n        return IS_WEAK && !isObject(key) ? false : nativeMethod.call(this, key === 0 ? 0 : key);\n      } : function set(key, value) {\n        nativeMethod.call(this, key === 0 ? 0 : key, value);\n        return this;\n      }\n    );\n  };\n\n  // eslint-disable-next-line max-len\n  if (isForced_1(CONSTRUCTOR_NAME, typeof NativeConstructor != 'function' || !(IS_WEAK || NativePrototype.forEach && !fails(function () {\n    new NativeConstructor().entries().next();\n  })))) {\n    // create collection constructor\n    Constructor = common.getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER);\n    internalMetadata.REQUIRED = true;\n  } else if (isForced_1(CONSTRUCTOR_NAME, true)) {\n    var instance = new Constructor();\n    // early implementations not supports chaining\n    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;\n    // V8 ~ Chromium 40- weak-collections throws on primitives, but should return false\n    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });\n    // most early implementations doesn't supports iterables, most modern - not close it correctly\n    // eslint-disable-next-line no-new\n    var ACCEPT_ITERABLES = checkCorrectnessOfIteration(function (iterable) { new NativeConstructor(iterable); });\n    // for early implementations -0 and +0 not the same\n    var BUGGY_ZERO = !IS_WEAK && fails(function () {\n      // V8 ~ Chromium 42- fails only with 5+ elements\n      var $instance = new NativeConstructor();\n      var index = 5;\n      while (index--) $instance[ADDER](index, index);\n      return !$instance.has(-0);\n    });\n\n    if (!ACCEPT_ITERABLES) {\n      Constructor = wrapper(function (dummy, iterable) {\n        anInstance(dummy, Constructor, CONSTRUCTOR_NAME);\n        var that = inheritIfRequired(new NativeConstructor(), dummy, Constructor);\n        if (iterable != undefined) iterate_1(iterable, that[ADDER], that, IS_MAP);\n        return that;\n      });\n      Constructor.prototype = NativePrototype;\n      NativePrototype.constructor = Constructor;\n    }\n\n    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {\n      fixMethod('delete');\n      fixMethod('has');\n      IS_MAP && fixMethod('get');\n    }\n\n    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);\n\n    // weak collections should not contains .clear method\n    if (IS_WEAK && NativePrototype.clear) delete NativePrototype.clear;\n  }\n\n  exported[CONSTRUCTOR_NAME] = Constructor;\n  _export({ global: true, forced: Constructor != NativeConstructor }, exported);\n\n  setToStringTag(Constructor, CONSTRUCTOR_NAME);\n\n  if (!IS_WEAK) common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);\n\n  return Constructor;\n};\n\nvar redefineAll = function (target, src, options) {\n  for (var key in src) redefine(target, key, src[key], options);\n  return target;\n};\n\nvar SPECIES$3 = wellKnownSymbol('species');\n\nvar setSpecies = function (CONSTRUCTOR_NAME) {\n  var Constructor = getBuiltIn(CONSTRUCTOR_NAME);\n  var defineProperty = objectDefineProperty.f;\n\n  if (descriptors && Constructor && !Constructor[SPECIES$3]) {\n    defineProperty(Constructor, SPECIES$3, {\n      configurable: true,\n      get: function () { return this; }\n    });\n  }\n};\n\nvar defineProperty$4 = objectDefineProperty.f;\n\n\n\n\n\n\n\n\nvar fastKey = internalMetadata.fastKey;\n\n\nvar setInternalState$2 = internalState.set;\nvar internalStateGetterFor = internalState.getterFor;\n\nvar collectionStrong = {\n  getConstructor: function (wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {\n    var C = wrapper(function (that, iterable) {\n      anInstance(that, C, CONSTRUCTOR_NAME);\n      setInternalState$2(that, {\n        type: CONSTRUCTOR_NAME,\n        index: objectCreate(null),\n        first: undefined,\n        last: undefined,\n        size: 0\n      });\n      if (!descriptors) that.size = 0;\n      if (iterable != undefined) iterate_1(iterable, that[ADDER], that, IS_MAP);\n    });\n\n    var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);\n\n    var define = function (that, key, value) {\n      var state = getInternalState(that);\n      var entry = getEntry(that, key);\n      var previous, index;\n      // change existing entry\n      if (entry) {\n        entry.value = value;\n      // create new entry\n      } else {\n        state.last = entry = {\n          index: index = fastKey(key, true),\n          key: key,\n          value: value,\n          previous: previous = state.last,\n          next: undefined,\n          removed: false\n        };\n        if (!state.first) state.first = entry;\n        if (previous) previous.next = entry;\n        if (descriptors) state.size++;\n        else that.size++;\n        // add to index\n        if (index !== 'F') state.index[index] = entry;\n      } return that;\n    };\n\n    var getEntry = function (that, key) {\n      var state = getInternalState(that);\n      // fast case\n      var index = fastKey(key);\n      var entry;\n      if (index !== 'F') return state.index[index];\n      // frozen object case\n      for (entry = state.first; entry; entry = entry.next) {\n        if (entry.key == key) return entry;\n      }\n    };\n\n    redefineAll(C.prototype, {\n      // 23.1.3.1 Map.prototype.clear()\n      // 23.2.3.2 Set.prototype.clear()\n      clear: function clear() {\n        var that = this;\n        var state = getInternalState(that);\n        var data = state.index;\n        var entry = state.first;\n        while (entry) {\n          entry.removed = true;\n          if (entry.previous) entry.previous = entry.previous.next = undefined;\n          delete data[entry.index];\n          entry = entry.next;\n        }\n        state.first = state.last = undefined;\n        if (descriptors) state.size = 0;\n        else that.size = 0;\n      },\n      // 23.1.3.3 Map.prototype.delete(key)\n      // 23.2.3.4 Set.prototype.delete(value)\n      'delete': function (key) {\n        var that = this;\n        var state = getInternalState(that);\n        var entry = getEntry(that, key);\n        if (entry) {\n          var next = entry.next;\n          var prev = entry.previous;\n          delete state.index[entry.index];\n          entry.removed = true;\n          if (prev) prev.next = next;\n          if (next) next.previous = prev;\n          if (state.first == entry) state.first = next;\n          if (state.last == entry) state.last = prev;\n          if (descriptors) state.size--;\n          else that.size--;\n        } return !!entry;\n      },\n      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)\n      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)\n      forEach: function forEach(callbackfn /* , that = undefined */) {\n        var state = getInternalState(this);\n        var boundFunction = bindContext(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);\n        var entry;\n        while (entry = entry ? entry.next : state.first) {\n          boundFunction(entry.value, entry.key, this);\n          // revert to the last existing entry\n          while (entry && entry.removed) entry = entry.previous;\n        }\n      },\n      // 23.1.3.7 Map.prototype.has(key)\n      // 23.2.3.7 Set.prototype.has(value)\n      has: function has(key) {\n        return !!getEntry(this, key);\n      }\n    });\n\n    redefineAll(C.prototype, IS_MAP ? {\n      // 23.1.3.6 Map.prototype.get(key)\n      get: function get(key) {\n        var entry = getEntry(this, key);\n        return entry && entry.value;\n      },\n      // 23.1.3.9 Map.prototype.set(key, value)\n      set: function set(key, value) {\n        return define(this, key === 0 ? 0 : key, value);\n      }\n    } : {\n      // 23.2.3.1 Set.prototype.add(value)\n      add: function add(value) {\n        return define(this, value = value === 0 ? 0 : value, value);\n      }\n    });\n    if (descriptors) defineProperty$4(C.prototype, 'size', {\n      get: function () {\n        return getInternalState(this).size;\n      }\n    });\n    return C;\n  },\n  setStrong: function (C, CONSTRUCTOR_NAME, IS_MAP) {\n    var ITERATOR_NAME = CONSTRUCTOR_NAME + ' Iterator';\n    var getInternalCollectionState = internalStateGetterFor(CONSTRUCTOR_NAME);\n    var getInternalIteratorState = internalStateGetterFor(ITERATOR_NAME);\n    // add .keys, .values, .entries, [@@iterator]\n    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11\n    defineIterator(C, CONSTRUCTOR_NAME, function (iterated, kind) {\n      setInternalState$2(this, {\n        type: ITERATOR_NAME,\n        target: iterated,\n        state: getInternalCollectionState(iterated),\n        kind: kind,\n        last: undefined\n      });\n    }, function () {\n      var state = getInternalIteratorState(this);\n      var kind = state.kind;\n      var entry = state.last;\n      // revert to the last existing entry\n      while (entry && entry.removed) entry = entry.previous;\n      // get next entry\n      if (!state.target || !(state.last = entry = entry ? entry.next : state.state.first)) {\n        // or finish the iteration\n        state.target = undefined;\n        return { value: undefined, done: true };\n      }\n      // return step by kind\n      if (kind == 'keys') return { value: entry.key, done: false };\n      if (kind == 'values') return { value: entry.value, done: false };\n      return { value: [entry.key, entry.value], done: false };\n    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);\n\n    // add [@@species], 23.1.2.2, 23.2.2.2\n    setSpecies(CONSTRUCTOR_NAME);\n  }\n};\n\n// `Set` constructor\n// https://tc39.github.io/ecma262/#sec-set-objects\nvar es_set = collection('Set', function (get) {\n  return function Set() { return get(this, arguments.length ? arguments[0] : undefined); };\n}, collectionStrong);\n\n// `String.prototype.{ codePointAt, at }` methods implementation\nvar createMethod$2 = function (CONVERT_TO_STRING) {\n  return function ($this, pos) {\n    var S = String(requireObjectCoercible($this));\n    var position = toInteger(pos);\n    var size = S.length;\n    var first, second;\n    if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;\n    first = S.charCodeAt(position);\n    return first < 0xD800 || first > 0xDBFF || position + 1 === size\n      || (second = S.charCodeAt(position + 1)) < 0xDC00 || second > 0xDFFF\n        ? CONVERT_TO_STRING ? S.charAt(position) : first\n        : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;\n  };\n};\n\nvar stringMultibyte = {\n  // `String.prototype.codePointAt` method\n  // https://tc39.github.io/ecma262/#sec-string.prototype.codepointat\n  codeAt: createMethod$2(false),\n  // `String.prototype.at` method\n  // https://github.com/mathiasbynens/String.prototype.at\n  charAt: createMethod$2(true)\n};\n\nvar charAt = stringMultibyte.charAt;\n\n\n\nvar STRING_ITERATOR = 'String Iterator';\nvar setInternalState$3 = internalState.set;\nvar getInternalState$2 = internalState.getterFor(STRING_ITERATOR);\n\n// `String.prototype[@@iterator]` method\n// https://tc39.github.io/ecma262/#sec-string.prototype-@@iterator\ndefineIterator(String, 'String', function (iterated) {\n  setInternalState$3(this, {\n    type: STRING_ITERATOR,\n    string: String(iterated),\n    index: 0\n  });\n// `%StringIteratorPrototype%.next` method\n// https://tc39.github.io/ecma262/#sec-%stringiteratorprototype%.next\n}, function next() {\n  var state = getInternalState$2(this);\n  var string = state.string;\n  var index = state.index;\n  var point;\n  if (index >= string.length) return { value: undefined, done: true };\n  point = charAt(string, index);\n  state.index += point.length;\n  return { value: point, done: false };\n});\n\n// iterable DOM collections\n// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods\nvar domIterables = {\n  CSSRuleList: 0,\n  CSSStyleDeclaration: 0,\n  CSSValueList: 0,\n  ClientRectList: 0,\n  DOMRectList: 0,\n  DOMStringList: 0,\n  DOMTokenList: 1,\n  DataTransferItemList: 0,\n  FileList: 0,\n  HTMLAllCollection: 0,\n  HTMLCollection: 0,\n  HTMLFormElement: 0,\n  HTMLSelectElement: 0,\n  MediaList: 0,\n  MimeTypeArray: 0,\n  NamedNodeMap: 0,\n  NodeList: 1,\n  PaintRequestList: 0,\n  Plugin: 0,\n  PluginArray: 0,\n  SVGLengthList: 0,\n  SVGNumberList: 0,\n  SVGPathSegList: 0,\n  SVGPointList: 0,\n  SVGStringList: 0,\n  SVGTransformList: 0,\n  SourceBufferList: 0,\n  StyleSheetList: 0,\n  TextTrackCueList: 0,\n  TextTrackList: 0,\n  TouchList: 0\n};\n\nvar ITERATOR$5 = wellKnownSymbol('iterator');\nvar TO_STRING_TAG$3 = wellKnownSymbol('toStringTag');\nvar ArrayValues = es_array_iterator.values;\n\nfor (var COLLECTION_NAME in domIterables) {\n  var Collection = global_1[COLLECTION_NAME];\n  var CollectionPrototype = Collection && Collection.prototype;\n  if (CollectionPrototype) {\n    // some Chrome versions have non-configurable methods on DOMTokenList\n    if (CollectionPrototype[ITERATOR$5] !== ArrayValues) try {\n      createNonEnumerableProperty(CollectionPrototype, ITERATOR$5, ArrayValues);\n    } catch (error) {\n      CollectionPrototype[ITERATOR$5] = ArrayValues;\n    }\n    if (!CollectionPrototype[TO_STRING_TAG$3]) {\n      createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG$3, COLLECTION_NAME);\n    }\n    if (domIterables[COLLECTION_NAME]) for (var METHOD_NAME in es_array_iterator) {\n      // some Chrome versions have non-configurable methods on DOMTokenList\n      if (CollectionPrototype[METHOD_NAME] !== es_array_iterator[METHOD_NAME]) try {\n        createNonEnumerableProperty(CollectionPrototype, METHOD_NAME, es_array_iterator[METHOD_NAME]);\n      } catch (error) {\n        CollectionPrototype[METHOD_NAME] = es_array_iterator[METHOD_NAME];\n      }\n    }\n  }\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nvar methods = {};\nvar names = [];\nfunction registerMethods(name, m) {\n  if (Array.isArray(name)) {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = name[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var _name = _step.value;\n        registerMethods(_name, m);\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return;\n  }\n\n  if (_typeof(name) === 'object') {\n    for (var _name2 in name) {\n      registerMethods(_name2, name[_name2]);\n    }\n\n    return;\n  }\n\n  addMethodNames(Object.getOwnPropertyNames(m));\n  methods[name] = Object.assign(methods[name] || {}, m);\n}\nfunction getMethodsFor(name) {\n  return methods[name] || {};\n}\nfunction getMethodNames() {\n  return _toConsumableArray(new Set(names));\n}\nfunction addMethodNames(_names) {\n  names.push.apply(names, _toConsumableArray(_names));\n}\n\nvar $includes = arrayIncludes.includes;\n\n\n// `Array.prototype.includes` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.includes\n_export({ target: 'Array', proto: true }, {\n  includes: function includes(el /* , fromIndex = 0 */) {\n    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n\n// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables\naddToUnscopables('includes');\n\n// `RegExp.prototype.flags` getter implementation\n// https://tc39.github.io/ecma262/#sec-get-regexp.prototype.flags\nvar regexpFlags = function () {\n  var that = anObject(this);\n  var result = '';\n  if (that.global) result += 'g';\n  if (that.ignoreCase) result += 'i';\n  if (that.multiline) result += 'm';\n  if (that.dotAll) result += 's';\n  if (that.unicode) result += 'u';\n  if (that.sticky) result += 'y';\n  return result;\n};\n\nvar nativeExec = RegExp.prototype.exec;\n// This always refers to the native implementation, because the\n// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,\n// which loads this file before patching the method.\nvar nativeReplace = String.prototype.replace;\n\nvar patchedExec = nativeExec;\n\nvar UPDATES_LAST_INDEX_WRONG = (function () {\n  var re1 = /a/;\n  var re2 = /b*/g;\n  nativeExec.call(re1, 'a');\n  nativeExec.call(re2, 'a');\n  return re1.lastIndex !== 0 || re2.lastIndex !== 0;\n})();\n\n// nonparticipating capturing group, copied from es5-shim's String#split patch.\nvar NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;\n\nvar PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;\n\nif (PATCH) {\n  patchedExec = function exec(str) {\n    var re = this;\n    var lastIndex, reCopy, match, i;\n\n    if (NPCG_INCLUDED) {\n      reCopy = new RegExp('^' + re.source + '$(?!\\\\s)', regexpFlags.call(re));\n    }\n    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;\n\n    match = nativeExec.call(re, str);\n\n    if (UPDATES_LAST_INDEX_WRONG && match) {\n      re.lastIndex = re.global ? match.index + match[0].length : lastIndex;\n    }\n    if (NPCG_INCLUDED && match && match.length > 1) {\n      // Fix browsers whose `exec` methods don't consistently return `undefined`\n      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/\n      nativeReplace.call(match[0], reCopy, function () {\n        for (i = 1; i < arguments.length - 2; i++) {\n          if (arguments[i] === undefined) match[i] = undefined;\n        }\n      });\n    }\n\n    return match;\n  };\n}\n\nvar regexpExec = patchedExec;\n\n_export({ target: 'RegExp', proto: true, forced: /./.exec !== regexpExec }, {\n  exec: regexpExec\n});\n\nvar MATCH = wellKnownSymbol('match');\n\n// `IsRegExp` abstract operation\n// https://tc39.github.io/ecma262/#sec-isregexp\nvar isRegexp = function (it) {\n  var isRegExp;\n  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classofRaw(it) == 'RegExp');\n};\n\nvar notARegexp = function (it) {\n  if (isRegexp(it)) {\n    throw TypeError(\"The method doesn't accept regular expressions\");\n  } return it;\n};\n\nvar MATCH$1 = wellKnownSymbol('match');\n\nvar correctIsRegexpLogic = function (METHOD_NAME) {\n  var regexp = /./;\n  try {\n    '/./'[METHOD_NAME](regexp);\n  } catch (e) {\n    try {\n      regexp[MATCH$1] = false;\n      return '/./'[METHOD_NAME](regexp);\n    } catch (f) { /* empty */ }\n  } return false;\n};\n\n// `String.prototype.includes` method\n// https://tc39.github.io/ecma262/#sec-string.prototype.includes\n_export({ target: 'String', proto: true, forced: !correctIsRegexpLogic('includes') }, {\n  includes: function includes(searchString /* , position = 0 */) {\n    return !!~String(requireObjectCoercible(this))\n      .indexOf(notARegexp(searchString), arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n\nvar SPECIES$4 = wellKnownSymbol('species');\n\nvar REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {\n  // #replace needs built-in support for named groups.\n  // #match works fine because it just return the exec results, even if it has\n  // a \"grops\" property.\n  var re = /./;\n  re.exec = function () {\n    var result = [];\n    result.groups = { a: '7' };\n    return result;\n  };\n  return ''.replace(re, '$<a>') !== '7';\n});\n\n// Chrome 51 has a buggy \"split\" implementation when RegExp#exec !== nativeExec\n// Weex JS has frozen built-in prototypes, so use try / catch wrapper\nvar SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {\n  var re = /(?:)/;\n  var originalExec = re.exec;\n  re.exec = function () { return originalExec.apply(this, arguments); };\n  var result = 'ab'.split(re);\n  return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';\n});\n\nvar fixRegexpWellKnownSymbolLogic = function (KEY, length, exec, sham) {\n  var SYMBOL = wellKnownSymbol(KEY);\n\n  var DELEGATES_TO_SYMBOL = !fails(function () {\n    // String methods call symbol-named RegEp methods\n    var O = {};\n    O[SYMBOL] = function () { return 7; };\n    return ''[KEY](O) != 7;\n  });\n\n  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function () {\n    // Symbol-named RegExp methods call .exec\n    var execCalled = false;\n    var re = /a/;\n\n    if (KEY === 'split') {\n      // We can't use real regex here since it causes deoptimization\n      // and serious performance degradation in V8\n      // https://github.com/zloirock/core-js/issues/306\n      re = {};\n      // RegExp[@@split] doesn't call the regex's exec method, but first creates\n      // a new one. We need to return the patched regex when creating the new one.\n      re.constructor = {};\n      re.constructor[SPECIES$4] = function () { return re; };\n      re.flags = '';\n      re[SYMBOL] = /./[SYMBOL];\n    }\n\n    re.exec = function () { execCalled = true; return null; };\n\n    re[SYMBOL]('');\n    return !execCalled;\n  });\n\n  if (\n    !DELEGATES_TO_SYMBOL ||\n    !DELEGATES_TO_EXEC ||\n    (KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS) ||\n    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)\n  ) {\n    var nativeRegExpMethod = /./[SYMBOL];\n    var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {\n      if (regexp.exec === regexpExec) {\n        if (DELEGATES_TO_SYMBOL && !forceStringMethod) {\n          // The native String method already delegates to @@method (this\n          // polyfilled function), leasing to infinite recursion.\n          // We avoid it by directly calling the native @@method method.\n          return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };\n        }\n        return { done: true, value: nativeMethod.call(str, regexp, arg2) };\n      }\n      return { done: false };\n    });\n    var stringMethod = methods[0];\n    var regexMethod = methods[1];\n\n    redefine(String.prototype, KEY, stringMethod);\n    redefine(RegExp.prototype, SYMBOL, length == 2\n      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)\n      // 21.2.5.11 RegExp.prototype[@@split](string, limit)\n      ? function (string, arg) { return regexMethod.call(string, this, arg); }\n      // 21.2.5.6 RegExp.prototype[@@match](string)\n      // 21.2.5.9 RegExp.prototype[@@search](string)\n      : function (string) { return regexMethod.call(string, this); }\n    );\n    if (sham) createNonEnumerableProperty(RegExp.prototype[SYMBOL], 'sham', true);\n  }\n};\n\nvar charAt$1 = stringMultibyte.charAt;\n\n// `AdvanceStringIndex` abstract operation\n// https://tc39.github.io/ecma262/#sec-advancestringindex\nvar advanceStringIndex = function (S, index, unicode) {\n  return index + (unicode ? charAt$1(S, index).length : 1);\n};\n\n// `RegExpExec` abstract operation\n// https://tc39.github.io/ecma262/#sec-regexpexec\nvar regexpExecAbstract = function (R, S) {\n  var exec = R.exec;\n  if (typeof exec === 'function') {\n    var result = exec.call(R, S);\n    if (typeof result !== 'object') {\n      throw TypeError('RegExp exec method returned something other than an Object or null');\n    }\n    return result;\n  }\n\n  if (classofRaw(R) !== 'RegExp') {\n    throw TypeError('RegExp#exec called on incompatible receiver');\n  }\n\n  return regexpExec.call(R, S);\n};\n\nvar max$2 = Math.max;\nvar min$2 = Math.min;\nvar floor$1 = Math.floor;\nvar SUBSTITUTION_SYMBOLS = /\\$([$&'`]|\\d\\d?|<[^>]*>)/g;\nvar SUBSTITUTION_SYMBOLS_NO_NAMED = /\\$([$&'`]|\\d\\d?)/g;\n\nvar maybeToString = function (it) {\n  return it === undefined ? it : String(it);\n};\n\n// @@replace logic\nfixRegexpWellKnownSymbolLogic('replace', 2, function (REPLACE, nativeReplace, maybeCallNative) {\n  return [\n    // `String.prototype.replace` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.replace\n    function replace(searchValue, replaceValue) {\n      var O = requireObjectCoercible(this);\n      var replacer = searchValue == undefined ? undefined : searchValue[REPLACE];\n      return replacer !== undefined\n        ? replacer.call(searchValue, O, replaceValue)\n        : nativeReplace.call(String(O), searchValue, replaceValue);\n    },\n    // `RegExp.prototype[@@replace]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace\n    function (regexp, replaceValue) {\n      var res = maybeCallNative(nativeReplace, regexp, this, replaceValue);\n      if (res.done) return res.value;\n\n      var rx = anObject(regexp);\n      var S = String(this);\n\n      var functionalReplace = typeof replaceValue === 'function';\n      if (!functionalReplace) replaceValue = String(replaceValue);\n\n      var global = rx.global;\n      if (global) {\n        var fullUnicode = rx.unicode;\n        rx.lastIndex = 0;\n      }\n      var results = [];\n      while (true) {\n        var result = regexpExecAbstract(rx, S);\n        if (result === null) break;\n\n        results.push(result);\n        if (!global) break;\n\n        var matchStr = String(result[0]);\n        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);\n      }\n\n      var accumulatedResult = '';\n      var nextSourcePosition = 0;\n      for (var i = 0; i < results.length; i++) {\n        result = results[i];\n\n        var matched = String(result[0]);\n        var position = max$2(min$2(toInteger(result.index), S.length), 0);\n        var captures = [];\n        // NOTE: This is equivalent to\n        //   captures = result.slice(1).map(maybeToString)\n        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in\n        // the slice polyfill when slicing native arrays) \"doesn't work\" in safari 9 and\n        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.\n        for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));\n        var namedCaptures = result.groups;\n        if (functionalReplace) {\n          var replacerArgs = [matched].concat(captures, position, S);\n          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);\n          var replacement = String(replaceValue.apply(undefined, replacerArgs));\n        } else {\n          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);\n        }\n        if (position >= nextSourcePosition) {\n          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;\n          nextSourcePosition = position + matched.length;\n        }\n      }\n      return accumulatedResult + S.slice(nextSourcePosition);\n    }\n  ];\n\n  // https://tc39.github.io/ecma262/#sec-getsubstitution\n  function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {\n    var tailPos = position + matched.length;\n    var m = captures.length;\n    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;\n    if (namedCaptures !== undefined) {\n      namedCaptures = toObject(namedCaptures);\n      symbols = SUBSTITUTION_SYMBOLS;\n    }\n    return nativeReplace.call(replacement, symbols, function (match, ch) {\n      var capture;\n      switch (ch.charAt(0)) {\n        case '$': return '$';\n        case '&': return matched;\n        case '`': return str.slice(0, position);\n        case \"'\": return str.slice(tailPos);\n        case '<':\n          capture = namedCaptures[ch.slice(1, -1)];\n          break;\n        default: // \\d\\d?\n          var n = +ch;\n          if (n === 0) return match;\n          if (n > m) {\n            var f = floor$1(n / 10);\n            if (f === 0) return match;\n            if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);\n            return match;\n          }\n          capture = captures[n - 1];\n      }\n      return capture === undefined ? '' : capture;\n    });\n  }\n});\n\n// a string of all valid unicode whitespaces\n// eslint-disable-next-line max-len\nvar whitespaces = '\\u0009\\u000A\\u000B\\u000C\\u000D\\u0020\\u00A0\\u1680\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF';\n\nvar whitespace = '[' + whitespaces + ']';\nvar ltrim = RegExp('^' + whitespace + whitespace + '*');\nvar rtrim = RegExp(whitespace + whitespace + '*$');\n\n// `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation\nvar createMethod$3 = function (TYPE) {\n  return function ($this) {\n    var string = String(requireObjectCoercible($this));\n    if (TYPE & 1) string = string.replace(ltrim, '');\n    if (TYPE & 2) string = string.replace(rtrim, '');\n    return string;\n  };\n};\n\nvar stringTrim = {\n  // `String.prototype.{ trimLeft, trimStart }` methods\n  // https://tc39.github.io/ecma262/#sec-string.prototype.trimstart\n  start: createMethod$3(1),\n  // `String.prototype.{ trimRight, trimEnd }` methods\n  // https://tc39.github.io/ecma262/#sec-string.prototype.trimend\n  end: createMethod$3(2),\n  // `String.prototype.trim` method\n  // https://tc39.github.io/ecma262/#sec-string.prototype.trim\n  trim: createMethod$3(3)\n};\n\nvar non = '\\u200B\\u0085\\u180E';\n\n// check that a method works with the correct list\n// of whitespaces and has a correct name\nvar forcedStringTrimMethod = function (METHOD_NAME) {\n  return fails(function () {\n    return !!whitespaces[METHOD_NAME]() || non[METHOD_NAME]() != non || whitespaces[METHOD_NAME].name !== METHOD_NAME;\n  });\n};\n\nvar $trim = stringTrim.trim;\n\n\n// `String.prototype.trim` method\n// https://tc39.github.io/ecma262/#sec-string.prototype.trim\n_export({ target: 'String', proto: true, forced: forcedStringTrimMethod('trim') }, {\n  trim: function trim() {\n    return $trim(this);\n  }\n});\n\n// Map function\nfunction map(array, block) {\n  var i;\n  var il = array.length;\n  var result = [];\n\n  for (i = 0; i < il; i++) {\n    result.push(block(array[i]));\n  }\n\n  return result;\n} // Filter function\n\nfunction filter(array, block) {\n  var i;\n  var il = array.length;\n  var result = [];\n\n  for (i = 0; i < il; i++) {\n    if (block(array[i])) {\n      result.push(array[i]);\n    }\n  }\n\n  return result;\n} // Degrees to radians\n\nfunction radians(d) {\n  return d % 360 * Math.PI / 180;\n} // Radians to degrees\n\nfunction degrees(r) {\n  return r * 180 / Math.PI % 360;\n} // Convert dash-separated-string to camelCase\n\nfunction camelCase(s) {\n  return s.toLowerCase().replace(/-(.)/g, function (m, g) {\n    return g.toUpperCase();\n  });\n} // Convert camel cased string to string seperated\n\nfunction unCamelCase(s) {\n  return s.replace(/([A-Z])/g, function (m, g) {\n    return '-' + g.toLowerCase();\n  });\n} // Capitalize first letter of a string\n\nfunction capitalize(s) {\n  return s.charAt(0).toUpperCase() + s.slice(1);\n} // Calculate proportional width and height values when necessary\n\nfunction proportionalSize(element, width, height, box) {\n  if (width == null || height == null) {\n    box = box || element.bbox();\n\n    if (width == null) {\n      width = box.width / box.height * height;\n    } else if (height == null) {\n      height = box.height / box.width * width;\n    }\n  }\n\n  return {\n    width: width,\n    height: height\n  };\n}\nfunction getOrigin(o, element) {\n  // Allow origin or around as the names\n  var origin = o.origin; // o.around == null ? o.origin : o.around\n\n  var ox, oy; // Allow the user to pass a string to rotate around a given point\n\n  if (typeof origin === 'string' || origin == null) {\n    // Get the bounding box of the element with no transformations applied\n    var string = (origin || 'center').toLowerCase().trim();\n\n    var _element$bbox = element.bbox(),\n        height = _element$bbox.height,\n        width = _element$bbox.width,\n        x = _element$bbox.x,\n        y = _element$bbox.y; // Calculate the transformed x and y coordinates\n\n\n    var bx = string.includes('left') ? x : string.includes('right') ? x + width : x + width / 2;\n    var by = string.includes('top') ? y : string.includes('bottom') ? y + height : y + height / 2; // Set the bounds eg : \"bottom-left\", \"Top right\", \"middle\" etc...\n\n    ox = o.ox != null ? o.ox : bx;\n    oy = o.oy != null ? o.oy : by;\n  } else {\n    ox = origin[0];\n    oy = origin[1];\n  } // Return the origin as it is if it wasn't a string\n\n\n  return [ox, oy];\n}\n\nvar utils = ({\n\t__proto__: null,\n\tmap: map,\n\tfilter: filter,\n\tradians: radians,\n\tdegrees: degrees,\n\tcamelCase: camelCase,\n\tunCamelCase: unCamelCase,\n\tcapitalize: capitalize,\n\tproportionalSize: proportionalSize,\n\tgetOrigin: getOrigin\n});\n\n// Default namespaces\nvar ns = 'http://www.w3.org/2000/svg';\nvar xmlns = 'http://www.w3.org/2000/xmlns/';\nvar xlink = 'http://www.w3.org/1999/xlink';\nvar svgjs = 'http://svgjs.com/svgjs';\n\nvar namespaces = ({\n\t__proto__: null,\n\tns: ns,\n\txmlns: xmlns,\n\txlink: xlink,\n\tsvgjs: svgjs\n});\n\nvar globals = {\n  window: typeof window === 'undefined' ? null : window,\n  document: typeof document === 'undefined' ? null : document\n};\nfunction registerWindow() {\n  var win = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  var doc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  globals.window = win;\n  globals.document = doc;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar Base = function Base() {\n  _classCallCheck(this, Base);\n};\n\nvar elements = {};\nvar root = '___SYMBOL___ROOT___'; // Method for element creation\n\nfunction create(name) {\n  // create element\n  return globals.document.createElementNS(ns, name);\n}\nfunction makeInstance(element) {\n  if (element instanceof Base) return element;\n\n  if (_typeof(element) === 'object') {\n    return adopter(element);\n  }\n\n  if (element == null) {\n    return new elements[root]();\n  }\n\n  if (typeof element === 'string' && element.charAt(0) !== '<') {\n    return adopter(globals.document.querySelector(element));\n  }\n\n  var node = create('svg');\n  node.innerHTML = element; // We can use firstChild here because we know,\n  // that the first char is < and thus an element\n\n  element = adopter(node.firstChild);\n  return element;\n}\nfunction nodeOrNew(name, node) {\n  return node instanceof globals.window.Node ? node : create(name);\n} // Adopt existing svg elements\n\nfunction adopt(node) {\n  // check for presence of node\n  if (!node) return null; // make sure a node isn't already adopted\n\n  if (node.instance instanceof Base) return node.instance; // initialize variables\n\n  var className = capitalize(node.nodeName || 'Dom'); // Make sure that gradients are adopted correctly\n\n  if (className === 'LinearGradient' || className === 'RadialGradient') {\n    className = 'Gradient'; // Fallback to Dom if element is not known\n  } else if (!elements[className]) {\n    className = 'Dom';\n  }\n\n  return new elements[className](node);\n}\nvar adopter = adopt;\nfunction mockAdopt() {\n  var mock = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : adopt;\n  adopter = mock;\n}\nfunction register(element) {\n  var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : element.name;\n  var asRoot = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  elements[name] = element;\n  if (asRoot) elements[root] = element;\n  addMethodNames(Object.getOwnPropertyNames(element.prototype));\n  return element;\n}\nfunction getClass(name) {\n  return elements[name];\n} // Element id sequence\n\nvar did = 1000; // Get next named element id\n\nfunction eid(name) {\n  return 'Svgjs' + capitalize(name) + did++;\n} // Deep new id assignment\n\nfunction assignNewId(node) {\n  // do the same for SVG child nodes as well\n  for (var i = node.children.length - 1; i >= 0; i--) {\n    assignNewId(node.children[i]);\n  }\n\n  if (node.id) {\n    return adopt(node).id(eid(node.nodeName));\n  }\n\n  return adopt(node);\n} // Method for extending objects\n\nfunction extend(modules, methods, attrCheck) {\n  var key, i;\n  modules = Array.isArray(modules) ? modules : [modules];\n\n  for (i = modules.length - 1; i >= 0; i--) {\n    for (key in methods) {\n      var method = methods[key];\n\n      if (attrCheck) {\n        method = wrapWithAttrCheck(methods[key]);\n      }\n\n      modules[i].prototype[key] = method;\n    }\n  }\n} // export function extendWithAttrCheck (...args) {\n//   extend(...args, true)\n// }\n\nfunction wrapWithAttrCheck(fn) {\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var o = args[args.length - 1];\n\n    if (o && o.constructor === Object && !(o instanceof Array)) {\n      return fn.apply(this, args.slice(0, -1)).attr(o);\n    } else {\n      return fn.apply(this, args);\n    }\n  };\n}\nfunction invent(config) {\n  // Create element initializer\n  var initializer = typeof config.create === 'function' ? config.create : function (node) {\n    this.constructor(node || create(config.create));\n  }; // Inherit prototype\n\n  if (config.inherit) {\n    /* eslint new-cap: off */\n    initializer.prototype = new config.inherit();\n    initializer.prototype.constructor = initializer;\n  } // Extend with methods\n\n\n  if (config.extend) {\n    extend(initializer, config.extend);\n  } // Attach construct method to parent\n\n\n  if (config.construct) {\n    extend(config.parent || elements.Container, config.construct);\n  }\n\n  return initializer;\n}\n\nfunction siblings() {\n  return this.parent().children();\n} // Get the curent position siblings\n\nfunction position() {\n  return this.parent().index(this);\n} // Get the next element (will return null if there is none)\n\nfunction next() {\n  return this.siblings()[this.position() + 1];\n} // Get the next element (will return null if there is none)\n\nfunction prev() {\n  return this.siblings()[this.position() - 1];\n} // Send given element one step forward\n\nfunction forward() {\n  var i = this.position() + 1;\n  var p = this.parent(); // move node one step forward\n\n  p.removeElement(this).add(this, i); // make sure defs node is always at the top\n\n  if (typeof p.isRoot === 'function' && p.isRoot()) {\n    p.node.appendChild(p.defs().node);\n  }\n\n  return this;\n} // Send given element one step backward\n\nfunction backward() {\n  var i = this.position();\n\n  if (i > 0) {\n    this.parent().removeElement(this).add(this, i - 1);\n  }\n\n  return this;\n} // Send given element all the way to the front\n\nfunction front() {\n  var p = this.parent(); // Move node forward\n\n  p.node.appendChild(this.node); // Make sure defs node is always at the top\n\n  if (typeof p.isRoot === 'function' && p.isRoot()) {\n    p.node.appendChild(p.defs().node);\n  }\n\n  return this;\n} // Send given element all the way to the back\n\nfunction back() {\n  if (this.position() > 0) {\n    this.parent().removeElement(this).add(this, 0);\n  }\n\n  return this;\n} // Inserts a given element before the targeted element\n\nfunction before(element) {\n  element = makeInstance(element);\n  element.remove();\n  var i = this.position();\n  this.parent().add(element, i);\n  return this;\n} // Inserts a given element after the targeted element\n\nfunction after(element) {\n  element = makeInstance(element);\n  element.remove();\n  var i = this.position();\n  this.parent().add(element, i + 1);\n  return this;\n}\nfunction insertBefore(element) {\n  element = makeInstance(element);\n  element.before(this);\n  return this;\n}\nfunction insertAfter(element) {\n  element = makeInstance(element);\n  element.after(this);\n  return this;\n}\nregisterMethods('Dom', {\n  siblings: siblings,\n  position: position,\n  next: next,\n  prev: prev,\n  forward: forward,\n  backward: backward,\n  front: front,\n  back: back,\n  before: before,\n  after: after,\n  insertBefore: insertBefore,\n  insertAfter: insertAfter\n});\n\nvar $filter = arrayIteration.filter;\n\n\n// `Array.prototype.filter` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.filter\n// with adding support of @@species\n_export({ target: 'Array', proto: true, forced: !arrayMethodHasSpeciesSupport('filter') }, {\n  filter: function filter(callbackfn /* , thisArg */) {\n    return $filter(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n\nvar sloppyArrayMethod = function (METHOD_NAME, argument) {\n  var method = [][METHOD_NAME];\n  return !method || !fails(function () {\n    // eslint-disable-next-line no-useless-call,no-throw-literal\n    method.call(null, argument || function () { throw 1; }, 1);\n  });\n};\n\nvar $indexOf = arrayIncludes.indexOf;\n\n\nvar nativeIndexOf = [].indexOf;\n\nvar NEGATIVE_ZERO = !!nativeIndexOf && 1 / [1].indexOf(1, -0) < 0;\nvar SLOPPY_METHOD = sloppyArrayMethod('indexOf');\n\n// `Array.prototype.indexOf` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.indexof\n_export({ target: 'Array', proto: true, forced: NEGATIVE_ZERO || SLOPPY_METHOD }, {\n  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {\n    return NEGATIVE_ZERO\n      // convert -0 to +0\n      ? nativeIndexOf.apply(this, arguments) || 0\n      : $indexOf(this, searchElement, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n\nvar nativeJoin = [].join;\n\nvar ES3_STRINGS = indexedObject != Object;\nvar SLOPPY_METHOD$1 = sloppyArrayMethod('join', ',');\n\n// `Array.prototype.join` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.join\n_export({ target: 'Array', proto: true, forced: ES3_STRINGS || SLOPPY_METHOD$1 }, {\n  join: function join(separator) {\n    return nativeJoin.call(toIndexedObject(this), separator === undefined ? ',' : separator);\n  }\n});\n\nvar SPECIES$5 = wellKnownSymbol('species');\n\n// `SpeciesConstructor` abstract operation\n// https://tc39.github.io/ecma262/#sec-speciesconstructor\nvar speciesConstructor = function (O, defaultConstructor) {\n  var C = anObject(O).constructor;\n  var S;\n  return C === undefined || (S = anObject(C)[SPECIES$5]) == undefined ? defaultConstructor : aFunction$1(S);\n};\n\nvar arrayPush = [].push;\nvar min$3 = Math.min;\nvar MAX_UINT32 = 0xFFFFFFFF;\n\n// babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError\nvar SUPPORTS_Y = !fails(function () { return !RegExp(MAX_UINT32, 'y'); });\n\n// @@split logic\nfixRegexpWellKnownSymbolLogic('split', 2, function (SPLIT, nativeSplit, maybeCallNative) {\n  var internalSplit;\n  if (\n    'abbc'.split(/(b)*/)[1] == 'c' ||\n    'test'.split(/(?:)/, -1).length != 4 ||\n    'ab'.split(/(?:ab)*/).length != 2 ||\n    '.'.split(/(.?)(.?)/).length != 4 ||\n    '.'.split(/()()/).length > 1 ||\n    ''.split(/.?/).length\n  ) {\n    // based on es5-shim implementation, need to rework it\n    internalSplit = function (separator, limit) {\n      var string = String(requireObjectCoercible(this));\n      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;\n      if (lim === 0) return [];\n      if (separator === undefined) return [string];\n      // If `separator` is not a regex, use native split\n      if (!isRegexp(separator)) {\n        return nativeSplit.call(string, separator, lim);\n      }\n      var output = [];\n      var flags = (separator.ignoreCase ? 'i' : '') +\n                  (separator.multiline ? 'm' : '') +\n                  (separator.unicode ? 'u' : '') +\n                  (separator.sticky ? 'y' : '');\n      var lastLastIndex = 0;\n      // Make `global` and avoid `lastIndex` issues by working with a copy\n      var separatorCopy = new RegExp(separator.source, flags + 'g');\n      var match, lastIndex, lastLength;\n      while (match = regexpExec.call(separatorCopy, string)) {\n        lastIndex = separatorCopy.lastIndex;\n        if (lastIndex > lastLastIndex) {\n          output.push(string.slice(lastLastIndex, match.index));\n          if (match.length > 1 && match.index < string.length) arrayPush.apply(output, match.slice(1));\n          lastLength = match[0].length;\n          lastLastIndex = lastIndex;\n          if (output.length >= lim) break;\n        }\n        if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop\n      }\n      if (lastLastIndex === string.length) {\n        if (lastLength || !separatorCopy.test('')) output.push('');\n      } else output.push(string.slice(lastLastIndex));\n      return output.length > lim ? output.slice(0, lim) : output;\n    };\n  // Chakra, V8\n  } else if ('0'.split(undefined, 0).length) {\n    internalSplit = function (separator, limit) {\n      return separator === undefined && limit === 0 ? [] : nativeSplit.call(this, separator, limit);\n    };\n  } else internalSplit = nativeSplit;\n\n  return [\n    // `String.prototype.split` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.split\n    function split(separator, limit) {\n      var O = requireObjectCoercible(this);\n      var splitter = separator == undefined ? undefined : separator[SPLIT];\n      return splitter !== undefined\n        ? splitter.call(separator, O, limit)\n        : internalSplit.call(String(O), separator, limit);\n    },\n    // `RegExp.prototype[@@split]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split\n    //\n    // NOTE: This cannot be properly polyfilled in engines that don't support\n    // the 'y' flag.\n    function (regexp, limit) {\n      var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== nativeSplit);\n      if (res.done) return res.value;\n\n      var rx = anObject(regexp);\n      var S = String(this);\n      var C = speciesConstructor(rx, RegExp);\n\n      var unicodeMatching = rx.unicode;\n      var flags = (rx.ignoreCase ? 'i' : '') +\n                  (rx.multiline ? 'm' : '') +\n                  (rx.unicode ? 'u' : '') +\n                  (SUPPORTS_Y ? 'y' : 'g');\n\n      // ^(? + rx + ) is needed, in combination with some S slicing, to\n      // simulate the 'y' flag.\n      var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);\n      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;\n      if (lim === 0) return [];\n      if (S.length === 0) return regexpExecAbstract(splitter, S) === null ? [S] : [];\n      var p = 0;\n      var q = 0;\n      var A = [];\n      while (q < S.length) {\n        splitter.lastIndex = SUPPORTS_Y ? q : 0;\n        var z = regexpExecAbstract(splitter, SUPPORTS_Y ? S : S.slice(q));\n        var e;\n        if (\n          z === null ||\n          (e = min$3(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p\n        ) {\n          q = advanceStringIndex(S, q, unicodeMatching);\n        } else {\n          A.push(S.slice(p, q));\n          if (A.length === lim) return A;\n          for (var i = 1; i <= z.length - 1; i++) {\n            A.push(z[i]);\n            if (A.length === lim) return A;\n          }\n          q = p = e;\n        }\n      }\n      A.push(S.slice(p));\n      return A;\n    }\n  ];\n}, !SUPPORTS_Y);\n\n// Parse unit value\nvar numberAndUnit = /^([+-]?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?)([a-z%]*)$/i; // Parse hex value\n\nvar hex = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i; // Parse rgb value\n\nvar rgb = /rgb\\((\\d+),(\\d+),(\\d+)\\)/; // Parse reference id\n\nvar reference = /(#[a-z0-9\\-_]+)/i; // splits a transformation chain\n\nvar transforms = /\\)\\s*,?\\s*/; // Whitespace\n\nvar whitespace$1 = /\\s/g; // Test hex value\n\nvar isHex = /^#[a-f0-9]{3,6}$/i; // Test rgb value\n\nvar isRgb = /^rgb\\(/; // Test css declaration\n\nvar isCss = /[^:]+:[^;]+;?/; // Test for blank string\n\nvar isBlank = /^(\\s+)?$/; // Test for numeric string\n\nvar isNumber = /^[+-]?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i; // Test for percent value\n\nvar isPercent = /^-?[\\d.]+%$/; // Test for image url\n\nvar isImage = /\\.(jpg|jpeg|png|gif|svg)(\\?[^=]+.*)?/i; // split at whitespace and comma\n\nvar delimiter = /[\\s,]+/; // The following regex are used to parse the d attribute of a path\n// Matches all hyphens which are not after an exponent\n\nvar hyphen = /([^e])-/gi; // Replaces and tests for all path letters\n\nvar pathLetters = /[MLHVCSQTAZ]/gi; // yes we need this one, too\n\nvar isPathLetter = /[MLHVCSQTAZ]/i; // matches 0.154.23.45\n\nvar numbersWithDots = /((\\d?\\.\\d+(?:e[+-]?\\d+)?)((?:\\.\\d+(?:e[+-]?\\d+)?)+))+/gi; // matches .\n\nvar dots = /\\./g;\n\nvar regex = ({\n\t__proto__: null,\n\tnumberAndUnit: numberAndUnit,\n\thex: hex,\n\trgb: rgb,\n\treference: reference,\n\ttransforms: transforms,\n\twhitespace: whitespace$1,\n\tisHex: isHex,\n\tisRgb: isRgb,\n\tisCss: isCss,\n\tisBlank: isBlank,\n\tisNumber: isNumber,\n\tisPercent: isPercent,\n\tisImage: isImage,\n\tdelimiter: delimiter,\n\thyphen: hyphen,\n\tpathLetters: pathLetters,\n\tisPathLetter: isPathLetter,\n\tnumbersWithDots: numbersWithDots,\n\tdots: dots\n});\n\nfunction classes() {\n  var attr = this.attr('class');\n  return attr == null ? [] : attr.trim().split(delimiter);\n} // Return true if class exists on the node, false otherwise\n\nfunction hasClass(name) {\n  return this.classes().indexOf(name) !== -1;\n} // Add class to the node\n\nfunction addClass(name) {\n  if (!this.hasClass(name)) {\n    var array = this.classes();\n    array.push(name);\n    this.attr('class', array.join(' '));\n  }\n\n  return this;\n} // Remove class from the node\n\nfunction removeClass(name) {\n  if (this.hasClass(name)) {\n    this.attr('class', this.classes().filter(function (c) {\n      return c !== name;\n    }).join(' '));\n  }\n\n  return this;\n} // Toggle the presence of a class on the node\n\nfunction toggleClass(name) {\n  return this.hasClass(name) ? this.removeClass(name) : this.addClass(name);\n}\nregisterMethods('Dom', {\n  classes: classes,\n  hasClass: hasClass,\n  addClass: addClass,\n  removeClass: removeClass,\n  toggleClass: toggleClass\n});\n\nvar $forEach$1 = arrayIteration.forEach;\n\n\n// `Array.prototype.forEach` method implementation\n// https://tc39.github.io/ecma262/#sec-array.prototype.foreach\nvar arrayForEach = sloppyArrayMethod('forEach') ? function forEach(callbackfn /* , thisArg */) {\n  return $forEach$1(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n} : [].forEach;\n\n// `Array.prototype.forEach` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.foreach\n_export({ target: 'Array', proto: true, forced: [].forEach != arrayForEach }, {\n  forEach: arrayForEach\n});\n\nfor (var COLLECTION_NAME$1 in domIterables) {\n  var Collection$1 = global_1[COLLECTION_NAME$1];\n  var CollectionPrototype$1 = Collection$1 && Collection$1.prototype;\n  // some Chrome versions have non-configurable methods on DOMTokenList\n  if (CollectionPrototype$1 && CollectionPrototype$1.forEach !== arrayForEach) try {\n    createNonEnumerableProperty(CollectionPrototype$1, 'forEach', arrayForEach);\n  } catch (error) {\n    CollectionPrototype$1.forEach = arrayForEach;\n  }\n}\n\nfunction css(style, val) {\n  var ret = {};\n\n  if (arguments.length === 0) {\n    // get full style as object\n    this.node.style.cssText.split(/\\s*;\\s*/).filter(function (el) {\n      return !!el.length;\n    }).forEach(function (el) {\n      var t = el.split(/\\s*:\\s*/);\n      ret[t[0]] = t[1];\n    });\n    return ret;\n  }\n\n  if (arguments.length < 2) {\n    // get style properties in the array\n    if (Array.isArray(style)) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = style[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var name = _step.value;\n          var cased = camelCase(name);\n          ret[cased] = this.node.style[cased];\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return ret;\n    } // get style for property\n\n\n    if (typeof style === 'string') {\n      return this.node.style[camelCase(style)];\n    } // set styles in object\n\n\n    if (_typeof(style) === 'object') {\n      for (var _name in style) {\n        // set empty string if null/undefined/'' was given\n        this.node.style[camelCase(_name)] = style[_name] == null || isBlank.test(style[_name]) ? '' : style[_name];\n      }\n    }\n  } // set style for property\n\n\n  if (arguments.length === 2) {\n    this.node.style[camelCase(style)] = val == null || isBlank.test(val) ? '' : val;\n  }\n\n  return this;\n} // Show element\n\nfunction show() {\n  return this.css('display', '');\n} // Hide element\n\nfunction hide() {\n  return this.css('display', 'none');\n} // Is element visible?\n\nfunction visible() {\n  return this.css('display') !== 'none';\n}\nregisterMethods('Dom', {\n  css: css,\n  show: show,\n  hide: hide,\n  visible: visible\n});\n\nfunction data$1(a, v, r) {\n  if (_typeof(a) === 'object') {\n    for (v in a) {\n      this.data(v, a[v]);\n    }\n  } else if (arguments.length < 2) {\n    try {\n      return JSON.parse(this.attr('data-' + a));\n    } catch (e) {\n      return this.attr('data-' + a);\n    }\n  } else {\n    this.attr('data-' + a, v === null ? null : r === true || typeof v === 'string' || typeof v === 'number' ? v : JSON.stringify(v));\n  }\n\n  return this;\n}\nregisterMethods('Dom', {\n  data: data$1\n});\n\nfunction remember(k, v) {\n  // remember every item in an object individually\n  if (_typeof(arguments[0]) === 'object') {\n    for (var key in k) {\n      this.remember(key, k[key]);\n    }\n  } else if (arguments.length === 1) {\n    // retrieve memory\n    return this.memory()[k];\n  } else {\n    // store memory\n    this.memory()[k] = v;\n  }\n\n  return this;\n} // Erase a given memory\n\nfunction forget() {\n  if (arguments.length === 0) {\n    this._memory = {};\n  } else {\n    for (var i = arguments.length - 1; i >= 0; i--) {\n      delete this.memory()[arguments[i]];\n    }\n  }\n\n  return this;\n} // This triggers creation of a new hidden class which is not performant\n// However, this function is not rarely used so it will not happen frequently\n// Return local memory object\n\nfunction memory() {\n  return this._memory = this._memory || {};\n}\nregisterMethods('Dom', {\n  remember: remember,\n  forget: forget,\n  memory: memory\n});\n\n// `Array.prototype.{ reduce, reduceRight }` methods implementation\nvar createMethod$4 = function (IS_RIGHT) {\n  return function (that, callbackfn, argumentsLength, memo) {\n    aFunction$1(callbackfn);\n    var O = toObject(that);\n    var self = indexedObject(O);\n    var length = toLength(O.length);\n    var index = IS_RIGHT ? length - 1 : 0;\n    var i = IS_RIGHT ? -1 : 1;\n    if (argumentsLength < 2) while (true) {\n      if (index in self) {\n        memo = self[index];\n        index += i;\n        break;\n      }\n      index += i;\n      if (IS_RIGHT ? index < 0 : length <= index) {\n        throw TypeError('Reduce of empty array with no initial value');\n      }\n    }\n    for (;IS_RIGHT ? index >= 0 : length > index; index += i) if (index in self) {\n      memo = callbackfn(memo, self[index], index, O);\n    }\n    return memo;\n  };\n};\n\nvar arrayReduce = {\n  // `Array.prototype.reduce` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.reduce\n  left: createMethod$4(false),\n  // `Array.prototype.reduceRight` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.reduceright\n  right: createMethod$4(true)\n};\n\nvar $reduce = arrayReduce.left;\n\n\n// `Array.prototype.reduce` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.reduce\n_export({ target: 'Array', proto: true, forced: sloppyArrayMethod('reduce') }, {\n  reduce: function reduce(callbackfn /* , initialValue */) {\n    return $reduce(this, callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n\nvar listenerId = 0;\nvar windowEvents = {};\n\nfunction getEvents(instance) {\n  var n = instance.getEventHolder(); // We dont want to save events in global space\n\n  if (n === globals.window) n = windowEvents;\n  if (!n.events) n.events = {};\n  return n.events;\n}\n\nfunction getEventTarget(instance) {\n  return instance.getEventTarget();\n}\n\nfunction clearEvents(instance) {\n  var n = instance.getEventHolder();\n  if (n.events) n.events = {};\n} // Add event binder in the SVG namespace\n\n\nfunction on(node, events, listener, binding, options) {\n  var l = listener.bind(binding || node);\n  var instance = makeInstance(node);\n  var bag = getEvents(instance);\n  var n = getEventTarget(instance); // events can be an array of events or a string of events\n\n  events = Array.isArray(events) ? events : events.split(delimiter); // add id to listener\n\n  if (!listener._svgjsListenerId) {\n    listener._svgjsListenerId = ++listenerId;\n  }\n\n  events.forEach(function (event) {\n    var ev = event.split('.')[0];\n    var ns = event.split('.')[1] || '*'; // ensure valid object\n\n    bag[ev] = bag[ev] || {};\n    bag[ev][ns] = bag[ev][ns] || {}; // reference listener\n\n    bag[ev][ns][listener._svgjsListenerId] = l; // add listener\n\n    n.addEventListener(ev, l, options || false);\n  });\n} // Add event unbinder in the SVG namespace\n\nfunction off(node, events, listener, options) {\n  var instance = makeInstance(node);\n  var bag = getEvents(instance);\n  var n = getEventTarget(instance); // listener can be a function or a number\n\n  if (typeof listener === 'function') {\n    listener = listener._svgjsListenerId;\n    if (!listener) return;\n  } // events can be an array of events or a string or undefined\n\n\n  events = Array.isArray(events) ? events : (events || '').split(delimiter);\n  events.forEach(function (event) {\n    var ev = event && event.split('.')[0];\n    var ns = event && event.split('.')[1];\n    var namespace, l;\n\n    if (listener) {\n      // remove listener reference\n      if (bag[ev] && bag[ev][ns || '*']) {\n        // removeListener\n        n.removeEventListener(ev, bag[ev][ns || '*'][listener], options || false);\n        delete bag[ev][ns || '*'][listener];\n      }\n    } else if (ev && ns) {\n      // remove all listeners for a namespaced event\n      if (bag[ev] && bag[ev][ns]) {\n        for (l in bag[ev][ns]) {\n          off(n, [ev, ns].join('.'), l);\n        }\n\n        delete bag[ev][ns];\n      }\n    } else if (ns) {\n      // remove all listeners for a specific namespace\n      for (event in bag) {\n        for (namespace in bag[event]) {\n          if (ns === namespace) {\n            off(n, [event, ns].join('.'));\n          }\n        }\n      }\n    } else if (ev) {\n      // remove all listeners for the event\n      if (bag[ev]) {\n        for (namespace in bag[ev]) {\n          off(n, [ev, namespace].join('.'));\n        }\n\n        delete bag[ev];\n      }\n    } else {\n      // remove all listeners on a given node\n      for (event in bag) {\n        off(n, event);\n      }\n\n      clearEvents(instance);\n    }\n  });\n}\nfunction dispatch(node, event, data) {\n  var n = getEventTarget(node); // Dispatch event\n\n  if (event instanceof globals.window.Event) {\n    n.dispatchEvent(event);\n  } else {\n    event = new globals.window.CustomEvent(event, {\n      detail: data,\n      cancelable: true\n    });\n    n.dispatchEvent(event);\n  }\n\n  return event;\n}\n\nvar IS_CONCAT_SPREADABLE = wellKnownSymbol('isConcatSpreadable');\nvar MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;\nvar MAXIMUM_ALLOWED_INDEX_EXCEEDED = 'Maximum allowed index exceeded';\n\n// We can't use this feature detection in V8 since it causes\n// deoptimization and serious performance degradation\n// https://github.com/zloirock/core-js/issues/679\nvar IS_CONCAT_SPREADABLE_SUPPORT = v8Version >= 51 || !fails(function () {\n  var array = [];\n  array[IS_CONCAT_SPREADABLE] = false;\n  return array.concat()[0] !== array;\n});\n\nvar SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('concat');\n\nvar isConcatSpreadable = function (O) {\n  if (!isObject(O)) return false;\n  var spreadable = O[IS_CONCAT_SPREADABLE];\n  return spreadable !== undefined ? !!spreadable : isArray(O);\n};\n\nvar FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;\n\n// `Array.prototype.concat` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.concat\n// with adding support of @@isConcatSpreadable and @@species\n_export({ target: 'Array', proto: true, forced: FORCED }, {\n  concat: function concat(arg) { // eslint-disable-line no-unused-vars\n    var O = toObject(this);\n    var A = arraySpeciesCreate(O, 0);\n    var n = 0;\n    var i, k, length, len, E;\n    for (i = -1, length = arguments.length; i < length; i++) {\n      E = i === -1 ? O : arguments[i];\n      if (isConcatSpreadable(E)) {\n        len = toLength(E.length);\n        if (n + len > MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);\n        for (k = 0; k < len; k++, n++) if (k in E) createProperty(A, n, E[k]);\n      } else {\n        if (n >= MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);\n        createProperty(A, n++, E);\n      }\n    }\n    A.length = n;\n    return A;\n  }\n});\n\nvar $map = arrayIteration.map;\n\n\n// `Array.prototype.map` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.map\n// with adding support of @@species\n_export({ target: 'Array', proto: true, forced: !arrayMethodHasSpeciesSupport('map') }, {\n  map: function map(callbackfn /* , thisArg */) {\n    return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n\nvar DatePrototype = Date.prototype;\nvar INVALID_DATE = 'Invalid Date';\nvar TO_STRING = 'toString';\nvar nativeDateToString = DatePrototype[TO_STRING];\nvar getTime = DatePrototype.getTime;\n\n// `Date.prototype.toString` method\n// https://tc39.github.io/ecma262/#sec-date.prototype.tostring\nif (new Date(NaN) + '' != INVALID_DATE) {\n  redefine(DatePrototype, TO_STRING, function toString() {\n    var value = getTime.call(this);\n    // eslint-disable-next-line no-self-compare\n    return value === value ? nativeDateToString.call(this) : INVALID_DATE;\n  });\n}\n\nvar trim = stringTrim.trim;\n\n\nvar nativeParseInt = global_1.parseInt;\nvar hex$1 = /^[+-]?0[Xx]/;\nvar FORCED$1 = nativeParseInt(whitespaces + '08') !== 8 || nativeParseInt(whitespaces + '0x16') !== 22;\n\n// `parseInt` method\n// https://tc39.github.io/ecma262/#sec-parseint-string-radix\nvar _parseInt = FORCED$1 ? function parseInt(string, radix) {\n  var S = trim(String(string));\n  return nativeParseInt(S, (radix >>> 0) || (hex$1.test(S) ? 16 : 10));\n} : nativeParseInt;\n\n// `parseInt` method\n// https://tc39.github.io/ecma262/#sec-parseint-string-radix\n_export({ global: true, forced: parseInt != _parseInt }, {\n  parseInt: _parseInt\n});\n\nvar TO_STRING$1 = 'toString';\nvar RegExpPrototype = RegExp.prototype;\nvar nativeToString = RegExpPrototype[TO_STRING$1];\n\nvar NOT_GENERIC = fails(function () { return nativeToString.call({ source: 'a', flags: 'b' }) != '/a/b'; });\n// FF44- RegExp#toString has a wrong name\nvar INCORRECT_NAME = nativeToString.name != TO_STRING$1;\n\n// `RegExp.prototype.toString` method\n// https://tc39.github.io/ecma262/#sec-regexp.prototype.tostring\nif (NOT_GENERIC || INCORRECT_NAME) {\n  redefine(RegExp.prototype, TO_STRING$1, function toString() {\n    var R = anObject(this);\n    var p = String(R.source);\n    var rf = R.flags;\n    var f = String(rf === undefined && R instanceof RegExp && !('flags' in RegExpPrototype) ? regexpFlags.call(R) : rf);\n    return '/' + p + '/' + f;\n  }, { unsafe: true });\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction sixDigitHex(hex) {\n  return hex.length === 4 ? ['#', hex.substring(1, 2), hex.substring(1, 2), hex.substring(2, 3), hex.substring(2, 3), hex.substring(3, 4), hex.substring(3, 4)].join('') : hex;\n}\n\nfunction componentHex(component) {\n  var integer = Math.round(component);\n  var bounded = Math.max(0, Math.min(255, integer));\n  var hex = bounded.toString(16);\n  return hex.length === 1 ? '0' + hex : hex;\n}\n\nfunction is(object, space) {\n  for (var i = space.length; i--;) {\n    if (object[space[i]] == null) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction getParameters(a, b) {\n  var params = is(a, 'rgb') ? {\n    _a: a.r,\n    _b: a.g,\n    _c: a.b,\n    space: 'rgb'\n  } : is(a, 'xyz') ? {\n    _a: a.x,\n    _b: a.y,\n    _c: a.z,\n    _d: 0,\n    space: 'xyz'\n  } : is(a, 'hsl') ? {\n    _a: a.h,\n    _b: a.s,\n    _c: a.l,\n    _d: 0,\n    space: 'hsl'\n  } : is(a, 'lab') ? {\n    _a: a.l,\n    _b: a.a,\n    _c: a.b,\n    _d: 0,\n    space: 'lab'\n  } : is(a, 'lch') ? {\n    _a: a.l,\n    _b: a.c,\n    _c: a.h,\n    _d: 0,\n    space: 'lch'\n  } : is(a, 'cmyk') ? {\n    _a: a.c,\n    _b: a.m,\n    _c: a.y,\n    _d: a.k,\n    space: 'cmyk'\n  } : {\n    _a: 0,\n    _b: 0,\n    _c: 0,\n    space: 'rgb'\n  };\n  params.space = b || params.space;\n  return params;\n}\n\nfunction cieSpace(space) {\n  if (space === 'lab' || space === 'xyz' || space === 'lch') {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction hueToRgb(p, q, t) {\n  if (t < 0) t += 1;\n  if (t > 1) t -= 1;\n  if (t < 1 / 6) return p + (q - p) * 6 * t;\n  if (t < 1 / 2) return q;\n  if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n  return p;\n}\n\nvar Color =\n/*#__PURE__*/\nfunction () {\n  function Color() {\n    _classCallCheck(this, Color);\n\n    this.init.apply(this, arguments);\n  }\n\n  _createClass(Color, [{\n    key: \"init\",\n    value: function init() {\n      var a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      var space = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'rgb';\n      // This catches the case when a falsy value is passed like ''\n      a = !a ? 0 : a; // Reset all values in case the init function is rerun with new color space\n\n      if (this.space) {\n        for (var component in this.space) {\n          delete this[this.space[component]];\n        }\n      }\n\n      if (typeof a === 'number') {\n        // Allow for the case that we don't need d...\n        space = typeof d === 'string' ? d : space;\n        d = typeof d === 'string' ? 0 : d; // Assign the values straight to the color\n\n        Object.assign(this, {\n          _a: a,\n          _b: b,\n          _c: c,\n          _d: d,\n          space: space\n        }); // If the user gave us an array, make the color from it\n      } else if (a instanceof Array) {\n        this.space = b || (typeof a[3] === 'string' ? a[3] : a[4]) || 'rgb';\n        Object.assign(this, {\n          _a: a[0],\n          _b: a[1],\n          _c: a[2],\n          _d: a[3] || 0\n        });\n      } else if (a instanceof Object) {\n        // Set the object up and assign its values directly\n        var values = getParameters(a, b);\n        Object.assign(this, values);\n      } else if (typeof a === 'string') {\n        if (isRgb.test(a)) {\n          var noWhitespace = a.replace(whitespace$1, '');\n\n          var _rgb$exec$slice$map = rgb.exec(noWhitespace).slice(1, 4).map(function (v) {\n            return parseInt(v);\n          }),\n              _rgb$exec$slice$map2 = _slicedToArray(_rgb$exec$slice$map, 3),\n              _a2 = _rgb$exec$slice$map2[0],\n              _b2 = _rgb$exec$slice$map2[1],\n              _c2 = _rgb$exec$slice$map2[2];\n\n          Object.assign(this, {\n            _a: _a2,\n            _b: _b2,\n            _c: _c2,\n            _d: 0,\n            space: 'rgb'\n          });\n        } else if (isHex.test(a)) {\n          var hexParse = function hexParse(v) {\n            return parseInt(v, 16);\n          };\n\n          var _hex$exec$map = hex.exec(sixDigitHex(a)).map(hexParse),\n              _hex$exec$map2 = _slicedToArray(_hex$exec$map, 4),\n              _a3 = _hex$exec$map2[1],\n              _b3 = _hex$exec$map2[2],\n              _c3 = _hex$exec$map2[3];\n\n          Object.assign(this, {\n            _a: _a3,\n            _b: _b3,\n            _c: _c3,\n            _d: 0,\n            space: 'rgb'\n          });\n        } else throw Error('Unsupported string format, can\\'t construct Color');\n      } // Now add the components as a convenience\n\n\n      var _a = this._a,\n          _b = this._b,\n          _c = this._c,\n          _d = this._d;\n      var components = this.space === 'rgb' ? {\n        r: _a,\n        g: _b,\n        b: _c\n      } : this.space === 'xyz' ? {\n        x: _a,\n        y: _b,\n        z: _c\n      } : this.space === 'hsl' ? {\n        h: _a,\n        s: _b,\n        l: _c\n      } : this.space === 'lab' ? {\n        l: _a,\n        a: _b,\n        b: _c\n      } : this.space === 'lch' ? {\n        l: _a,\n        c: _b,\n        h: _c\n      } : this.space === 'cmyk' ? {\n        c: _a,\n        m: _b,\n        y: _c,\n        k: _d\n      } : {};\n      Object.assign(this, components);\n    }\n    /*\r\n    Conversion Methods\r\n    */\n\n  }, {\n    key: \"rgb\",\n    value: function rgb() {\n      if (this.space === 'rgb') {\n        return this;\n      } else if (cieSpace(this.space)) {\n        // Convert to the xyz color space\n        var x = this.x,\n            y = this.y,\n            z = this.z;\n\n        if (this.space === 'lab' || this.space === 'lch') {\n          // Get the values in the lab space\n          var l = this.l,\n              a = this.a,\n              _b4 = this.b;\n\n          if (this.space === 'lch') {\n            var c = this.c,\n                h = this.h;\n            var dToR = Math.PI / 180;\n            a = c * Math.cos(dToR * h);\n            _b4 = c * Math.sin(dToR * h);\n          } // Undo the nonlinear function\n\n\n          var yL = (l + 16) / 116;\n          var xL = a / 500 + yL;\n          var zL = yL - _b4 / 200; // Get the xyz values\n\n          var ct = 16 / 116;\n          var mx = 0.008856;\n          var nm = 7.787;\n          x = 0.95047 * (Math.pow(xL, 3) > mx ? Math.pow(xL, 3) : (xL - ct) / nm);\n          y = 1.00000 * (Math.pow(yL, 3) > mx ? Math.pow(yL, 3) : (yL - ct) / nm);\n          z = 1.08883 * (Math.pow(zL, 3) > mx ? Math.pow(zL, 3) : (zL - ct) / nm);\n        } // Convert xyz to unbounded rgb values\n\n\n        var rU = x * 3.2406 + y * -1.5372 + z * -0.4986;\n        var gU = x * -0.9689 + y * 1.8758 + z * 0.0415;\n        var bU = x * 0.0557 + y * -0.2040 + z * 1.0570; // Convert the values to true rgb values\n\n        var pow = Math.pow;\n        var bd = 0.0031308;\n        var r = rU > bd ? 1.055 * pow(rU, 1 / 2.4) - 0.055 : 12.92 * rU;\n        var g = gU > bd ? 1.055 * pow(gU, 1 / 2.4) - 0.055 : 12.92 * gU;\n        var b = bU > bd ? 1.055 * pow(bU, 1 / 2.4) - 0.055 : 12.92 * bU; // Make and return the color\n\n        var color = new Color(255 * r, 255 * g, 255 * b);\n        return color;\n      } else if (this.space === 'hsl') {\n        // https://bgrins.github.io/TinyColor/docs/tinycolor.html\n        // Get the current hsl values\n        var _h = this.h,\n            s = this.s,\n            _l = this.l;\n        _h /= 360;\n        s /= 100;\n        _l /= 100; // If we are grey, then just make the color directly\n\n        if (s === 0) {\n          _l *= 255;\n\n          var _color2 = new Color(_l, _l, _l);\n\n          return _color2;\n        } // TODO I have no idea what this does :D If you figure it out, tell me!\n\n\n        var q = _l < 0.5 ? _l * (1 + s) : _l + s - _l * s;\n        var p = 2 * _l - q; // Get the rgb values\n\n        var _r = 255 * hueToRgb(p, q, _h + 1 / 3);\n\n        var _g = 255 * hueToRgb(p, q, _h);\n\n        var _b5 = 255 * hueToRgb(p, q, _h - 1 / 3); // Make a new color\n\n\n        var _color = new Color(_r, _g, _b5);\n\n        return _color;\n      } else if (this.space === 'cmyk') {\n        // https://gist.github.com/felipesabino/5066336\n        // Get the normalised cmyk values\n        var _c4 = this.c,\n            m = this.m,\n            _y = this.y,\n            k = this.k; // Get the rgb values\n\n        var _r2 = 255 * (1 - Math.min(1, _c4 * (1 - k) + k));\n\n        var _g2 = 255 * (1 - Math.min(1, m * (1 - k) + k));\n\n        var _b6 = 255 * (1 - Math.min(1, _y * (1 - k) + k)); // Form the color and return it\n\n\n        var _color3 = new Color(_r2, _g2, _b6);\n\n        return _color3;\n      } else {\n        return this;\n      }\n    }\n  }, {\n    key: \"lab\",\n    value: function lab() {\n      // Get the xyz color\n      var _this$xyz = this.xyz(),\n          x = _this$xyz.x,\n          y = _this$xyz.y,\n          z = _this$xyz.z; // Get the lab components\n\n\n      var l = 116 * y - 16;\n      var a = 500 * (x - y);\n      var b = 200 * (y - z); // Construct and return a new color\n\n      var color = new Color(l, a, b, 'lab');\n      return color;\n    }\n  }, {\n    key: \"xyz\",\n    value: function xyz() {\n      // Normalise the red, green and blue values\n      var _this$rgb = this.rgb(),\n          r255 = _this$rgb._a,\n          g255 = _this$rgb._b,\n          b255 = _this$rgb._c;\n\n      var _map = [r255, g255, b255].map(function (v) {\n        return v / 255;\n      }),\n          _map2 = _slicedToArray(_map, 3),\n          r = _map2[0],\n          g = _map2[1],\n          b = _map2[2]; // Convert to the lab rgb space\n\n\n      var rL = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;\n      var gL = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;\n      var bL = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92; // Convert to the xyz color space without bounding the values\n\n      var xU = (rL * 0.4124 + gL * 0.3576 + bL * 0.1805) / 0.95047;\n      var yU = (rL * 0.2126 + gL * 0.7152 + bL * 0.0722) / 1.00000;\n      var zU = (rL * 0.0193 + gL * 0.1192 + bL * 0.9505) / 1.08883; // Get the proper xyz values by applying the bounding\n\n      var x = xU > 0.008856 ? Math.pow(xU, 1 / 3) : 7.787 * xU + 16 / 116;\n      var y = yU > 0.008856 ? Math.pow(yU, 1 / 3) : 7.787 * yU + 16 / 116;\n      var z = zU > 0.008856 ? Math.pow(zU, 1 / 3) : 7.787 * zU + 16 / 116; // Make and return the color\n\n      var color = new Color(x, y, z, 'xyz');\n      return color;\n    }\n  }, {\n    key: \"lch\",\n    value: function lch() {\n      // Get the lab color directly\n      var _this$lab = this.lab(),\n          l = _this$lab.l,\n          a = _this$lab.a,\n          b = _this$lab.b; // Get the chromaticity and the hue using polar coordinates\n\n\n      var c = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));\n      var h = 180 * Math.atan2(b, a) / Math.PI;\n\n      if (h < 0) {\n        h *= -1;\n        h = 360 - h;\n      } // Make a new color and return it\n\n\n      var color = new Color(l, c, h, 'lch');\n      return color;\n    }\n  }, {\n    key: \"hsl\",\n    value: function hsl() {\n      // Get the rgb values\n      var _this$rgb2 = this.rgb(),\n          _a = _this$rgb2._a,\n          _b = _this$rgb2._b,\n          _c = _this$rgb2._c;\n\n      var _map3 = [_a, _b, _c].map(function (v) {\n        return v / 255;\n      }),\n          _map4 = _slicedToArray(_map3, 3),\n          r = _map4[0],\n          g = _map4[1],\n          b = _map4[2]; // Find the maximum and minimum values to get the lightness\n\n\n      var max = Math.max(r, g, b);\n      var min = Math.min(r, g, b);\n      var l = (max + min) / 2; // If the r, g, v values are identical then we are grey\n\n      var isGrey = max === min; // Calculate the hue and saturation\n\n      var delta = max - min;\n      var s = isGrey ? 0 : l > 0.5 ? delta / (2 - max - min) : delta / (max + min);\n      var h = isGrey ? 0 : max === r ? ((g - b) / delta + (g < b ? 6 : 0)) / 6 : max === g ? ((b - r) / delta + 2) / 6 : max === b ? ((r - g) / delta + 4) / 6 : 0; // Construct and return the new color\n\n      var color = new Color(360 * h, 100 * s, 100 * l, 'hsl');\n      return color;\n    }\n  }, {\n    key: \"cmyk\",\n    value: function cmyk() {\n      // Get the rgb values for the current color\n      var _this$rgb3 = this.rgb(),\n          _a = _this$rgb3._a,\n          _b = _this$rgb3._b,\n          _c = _this$rgb3._c;\n\n      var _map5 = [_a, _b, _c].map(function (v) {\n        return v / 255;\n      }),\n          _map6 = _slicedToArray(_map5, 3),\n          r = _map6[0],\n          g = _map6[1],\n          b = _map6[2]; // Get the cmyk values in an unbounded format\n\n\n      var k = Math.min(1 - r, 1 - g, 1 - b);\n\n      if (k === 1) {\n        // Catch the black case\n        return new Color(0, 0, 0, 1, 'cmyk');\n      }\n\n      var c = (1 - r - k) / (1 - k);\n      var m = (1 - g - k) / (1 - k);\n      var y = (1 - b - k) / (1 - k); // Construct the new color\n\n      var color = new Color(c, m, y, k, 'cmyk');\n      return color;\n    }\n    /*\r\n    Input and Output methods\r\n    */\n\n  }, {\n    key: \"_clamped\",\n    value: function _clamped() {\n      var _this$rgb4 = this.rgb(),\n          _a = _this$rgb4._a,\n          _b = _this$rgb4._b,\n          _c = _this$rgb4._c;\n\n      var max = Math.max,\n          min = Math.min,\n          round = Math.round;\n\n      var format = function format(v) {\n        return max(0, min(round(v), 255));\n      };\n\n      return [_a, _b, _c].map(format);\n    }\n  }, {\n    key: \"toHex\",\n    value: function toHex() {\n      var _this$_clamped$map = this._clamped().map(componentHex),\n          _this$_clamped$map2 = _slicedToArray(_this$_clamped$map, 3),\n          r = _this$_clamped$map2[0],\n          g = _this$_clamped$map2[1],\n          b = _this$_clamped$map2[2];\n\n      return \"#\".concat(r).concat(g).concat(b);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.toHex();\n    }\n  }, {\n    key: \"toRgb\",\n    value: function toRgb() {\n      var _this$_clamped = this._clamped(),\n          _this$_clamped2 = _slicedToArray(_this$_clamped, 3),\n          rV = _this$_clamped2[0],\n          gV = _this$_clamped2[1],\n          bV = _this$_clamped2[2];\n\n      var string = \"rgb(\".concat(rV, \",\").concat(gV, \",\").concat(bV, \")\");\n      return string;\n    }\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      var _a = this._a,\n          _b = this._b,\n          _c = this._c,\n          _d = this._d,\n          space = this.space;\n      return [_a, _b, _c, _d, space];\n    }\n    /*\r\n    Generating random colors\r\n    */\n\n  }], [{\n    key: \"random\",\n    value: function random() {\n      var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'vibrant';\n      var t = arguments.length > 1 ? arguments[1] : undefined;\n      // Get the math modules\n      var random = Math.random,\n          round = Math.round,\n          sin = Math.sin,\n          pi = Math.PI; // Run the correct generator\n\n      if (mode === 'vibrant') {\n        var l = (81 - 57) * random() + 57;\n        var c = (83 - 45) * random() + 45;\n        var h = 360 * random();\n        var color = new Color(l, c, h, 'lch');\n        return color;\n      } else if (mode === 'sine') {\n        t = t == null ? random() : t;\n        var r = round(80 * sin(2 * pi * t / 0.5 + 0.01) + 150);\n        var g = round(50 * sin(2 * pi * t / 0.5 + 4.6) + 200);\n        var b = round(100 * sin(2 * pi * t / 0.5 + 2.3) + 150);\n\n        var _color4 = new Color(r, g, b);\n\n        return _color4;\n      } else if (mode === 'pastel') {\n        var _l2 = (94 - 86) * random() + 86;\n\n        var _c5 = (26 - 9) * random() + 9;\n\n        var _h2 = 360 * random();\n\n        var _color5 = new Color(_l2, _c5, _h2, 'lch');\n\n        return _color5;\n      } else if (mode === 'dark') {\n        var _l3 = 10 + 10 * random();\n\n        var _c6 = (125 - 75) * random() + 86;\n\n        var _h3 = 360 * random();\n\n        var _color6 = new Color(_l3, _c6, _h3, 'lch');\n\n        return _color6;\n      } else if (mode === 'rgb') {\n        var _r3 = 255 * random();\n\n        var _g3 = 255 * random();\n\n        var _b7 = 255 * random();\n\n        var _color7 = new Color(_r3, _g3, _b7);\n\n        return _color7;\n      } else if (mode === 'lab') {\n        var _l4 = 100 * random();\n\n        var a = 256 * random() - 128;\n\n        var _b8 = 256 * random() - 128;\n\n        var _color8 = new Color(_l4, a, _b8, 'lab');\n\n        return _color8;\n      } else if (mode === 'grey') {\n        var grey = 255 * random();\n\n        var _color9 = new Color(grey, grey, grey);\n\n        return _color9;\n      }\n    }\n    /*\r\n    Constructing colors\r\n    */\n    // Test if given value is a color string\n\n  }, {\n    key: \"test\",\n    value: function test(color) {\n      return typeof color === 'string' && (isHex.test(color) || isRgb.test(color));\n    } // Test if given value is an rgb object\n\n  }, {\n    key: \"isRgb\",\n    value: function isRgb(color) {\n      return color && typeof color.r === 'number' && typeof color.g === 'number' && typeof color.b === 'number';\n    } // Test if given value is a color\n\n  }, {\n    key: \"isColor\",\n    value: function isColor(color) {\n      return color && (color instanceof Color || this.isRgb(color) || this.test(color));\n    }\n  }]);\n\n  return Color;\n}();\n\nvar FAILS_ON_PRIMITIVES$1 = fails(function () { objectKeys(1); });\n\n// `Object.keys` method\n// https://tc39.github.io/ecma262/#sec-object.keys\n_export({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES$1 }, {\n  keys: function keys(it) {\n    return objectKeys(toObject(it));\n  }\n});\n\n// @@match logic\nfixRegexpWellKnownSymbolLogic('match', 1, function (MATCH, nativeMatch, maybeCallNative) {\n  return [\n    // `String.prototype.match` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.match\n    function match(regexp) {\n      var O = requireObjectCoercible(this);\n      var matcher = regexp == undefined ? undefined : regexp[MATCH];\n      return matcher !== undefined ? matcher.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));\n    },\n    // `RegExp.prototype[@@match]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match\n    function (regexp) {\n      var res = maybeCallNative(nativeMatch, regexp, this);\n      if (res.done) return res.value;\n\n      var rx = anObject(regexp);\n      var S = String(this);\n\n      if (!rx.global) return regexpExecAbstract(rx, S);\n\n      var fullUnicode = rx.unicode;\n      rx.lastIndex = 0;\n      var A = [];\n      var n = 0;\n      var result;\n      while ((result = regexpExecAbstract(rx, S)) !== null) {\n        var matchStr = String(result[0]);\n        A[n] = matchStr;\n        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);\n        n++;\n      }\n      return n === 0 ? null : A;\n    }\n  ];\n});\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nvar getOwnPropertyNames = objectGetOwnPropertyNames.f;\nvar getOwnPropertyDescriptor$2 = objectGetOwnPropertyDescriptor.f;\nvar defineProperty$5 = objectDefineProperty.f;\nvar trim$1 = stringTrim.trim;\n\nvar NUMBER = 'Number';\nvar NativeNumber = global_1[NUMBER];\nvar NumberPrototype = NativeNumber.prototype;\n\n// Opera ~12 has broken Object#toString\nvar BROKEN_CLASSOF = classofRaw(objectCreate(NumberPrototype)) == NUMBER;\n\n// `ToNumber` abstract operation\n// https://tc39.github.io/ecma262/#sec-tonumber\nvar toNumber = function (argument) {\n  var it = toPrimitive(argument, false);\n  var first, third, radix, maxCode, digits, length, index, code;\n  if (typeof it == 'string' && it.length > 2) {\n    it = trim$1(it);\n    first = it.charCodeAt(0);\n    if (first === 43 || first === 45) {\n      third = it.charCodeAt(2);\n      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix\n    } else if (first === 48) {\n      switch (it.charCodeAt(1)) {\n        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal of /^0b[01]+$/i\n        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal of /^0o[0-7]+$/i\n        default: return +it;\n      }\n      digits = it.slice(2);\n      length = digits.length;\n      for (index = 0; index < length; index++) {\n        code = digits.charCodeAt(index);\n        // parseInt parses a string to a first unavailable symbol\n        // but ToNumber should return NaN if a string contains unavailable symbols\n        if (code < 48 || code > maxCode) return NaN;\n      } return parseInt(digits, radix);\n    }\n  } return +it;\n};\n\n// `Number` constructor\n// https://tc39.github.io/ecma262/#sec-number-constructor\nif (isForced_1(NUMBER, !NativeNumber(' 0o1') || !NativeNumber('0b1') || NativeNumber('+0x1'))) {\n  var NumberWrapper = function Number(value) {\n    var it = arguments.length < 1 ? 0 : value;\n    var dummy = this;\n    return dummy instanceof NumberWrapper\n      // check on 1..constructor(foo) case\n      && (BROKEN_CLASSOF ? fails(function () { NumberPrototype.valueOf.call(dummy); }) : classofRaw(dummy) != NUMBER)\n        ? inheritIfRequired(new NativeNumber(toNumber(it)), dummy, NumberWrapper) : toNumber(it);\n  };\n  for (var keys$1 = descriptors ? getOwnPropertyNames(NativeNumber) : (\n    // ES3:\n    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +\n    // ES2015 (in case, if modules with ES2015 Number statics required before):\n    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +\n    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'\n  ).split(','), j = 0, key; keys$1.length > j; j++) {\n    if (has(NativeNumber, key = keys$1[j]) && !has(NumberWrapper, key)) {\n      defineProperty$5(NumberWrapper, key, getOwnPropertyDescriptor$2(NativeNumber, key));\n    }\n  }\n  NumberWrapper.prototype = NumberPrototype;\n  NumberPrototype.constructor = NumberWrapper;\n  redefine(global_1, NUMBER, NumberWrapper);\n}\n\nvar trim$2 = stringTrim.trim;\n\n\nvar nativeParseFloat = global_1.parseFloat;\nvar FORCED$2 = 1 / nativeParseFloat(whitespaces + '-0') !== -Infinity;\n\n// `parseFloat` method\n// https://tc39.github.io/ecma262/#sec-parsefloat-string\nvar _parseFloat = FORCED$2 ? function parseFloat(string) {\n  var trimmedString = trim$2(String(string));\n  var result = nativeParseFloat(trimmedString);\n  return result === 0 && trimmedString.charAt(0) == '-' ? -0 : result;\n} : nativeParseFloat;\n\n// `parseFloat` method\n// https://tc39.github.io/ecma262/#sec-parsefloat-string\n_export({ global: true, forced: parseFloat != _parseFloat }, {\n  parseFloat: _parseFloat\n});\n\nvar Point =\n/*#__PURE__*/\nfunction () {\n  // Initialize\n  function Point() {\n    _classCallCheck(this, Point);\n\n    this.init.apply(this, arguments);\n  }\n\n  _createClass(Point, [{\n    key: \"init\",\n    value: function init(x, y) {\n      var base = {\n        x: 0,\n        y: 0\n      }; // ensure source as object\n\n      var source = Array.isArray(x) ? {\n        x: x[0],\n        y: x[1]\n      } : _typeof(x) === 'object' ? {\n        x: x.x,\n        y: x.y\n      } : {\n        x: x,\n        y: y\n      }; // merge source\n\n      this.x = source.x == null ? base.x : source.x;\n      this.y = source.y == null ? base.y : source.y;\n      return this;\n    } // Clone point\n\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new Point(this);\n    }\n  }, {\n    key: \"transform\",\n    value: function transform(m) {\n      return this.clone().transformO(m);\n    } // Transform point with matrix\n\n  }, {\n    key: \"transformO\",\n    value: function transformO(m) {\n      if (!Matrix.isMatrixLike(m)) {\n        m = new Matrix(m);\n      }\n\n      var x = this.x,\n          y = this.y; // Perform the matrix multiplication\n\n      this.x = m.a * x + m.c * y + m.e;\n      this.y = m.b * x + m.d * y + m.f;\n      return this;\n    }\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      return [this.x, this.y];\n    }\n  }]);\n\n  return Point;\n}();\nfunction point(x, y) {\n  return new Point(x, y).transform(this.screenCTM().inverse());\n}\n\nfunction closeEnough(a, b, threshold) {\n  return Math.abs(b - a) < (threshold || 1e-6);\n}\n\nvar Matrix =\n/*#__PURE__*/\nfunction () {\n  function Matrix() {\n    _classCallCheck(this, Matrix);\n\n    this.init.apply(this, arguments);\n  } // Initialize\n\n\n  _createClass(Matrix, [{\n    key: \"init\",\n    value: function init(source) {\n      var base = Matrix.fromArray([1, 0, 0, 1, 0, 0]); // ensure source as object\n\n      source = source instanceof Element ? source.matrixify() : typeof source === 'string' ? Matrix.fromArray(source.split(delimiter).map(parseFloat)) : Array.isArray(source) ? Matrix.fromArray(source) : _typeof(source) === 'object' && Matrix.isMatrixLike(source) ? source : _typeof(source) === 'object' ? new Matrix().transform(source) : arguments.length === 6 ? Matrix.fromArray([].slice.call(arguments)) : base; // Merge the source matrix with the base matrix\n\n      this.a = source.a != null ? source.a : base.a;\n      this.b = source.b != null ? source.b : base.b;\n      this.c = source.c != null ? source.c : base.c;\n      this.d = source.d != null ? source.d : base.d;\n      this.e = source.e != null ? source.e : base.e;\n      this.f = source.f != null ? source.f : base.f;\n      return this;\n    } // Clones this matrix\n\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new Matrix(this);\n    } // Transform a matrix into another matrix by manipulating the space\n\n  }, {\n    key: \"transform\",\n    value: function transform(o) {\n      // Check if o is a matrix and then left multiply it directly\n      if (Matrix.isMatrixLike(o)) {\n        var matrix = new Matrix(o);\n        return matrix.multiplyO(this);\n      } // Get the proposed transformations and the current transformations\n\n\n      var t = Matrix.formatTransforms(o);\n      var current = this;\n\n      var _transform = new Point(t.ox, t.oy).transform(current),\n          ox = _transform.x,\n          oy = _transform.y; // Construct the resulting matrix\n\n\n      var transformer = new Matrix().translateO(t.rx, t.ry).lmultiplyO(current).translateO(-ox, -oy).scaleO(t.scaleX, t.scaleY).skewO(t.skewX, t.skewY).shearO(t.shear).rotateO(t.theta).translateO(ox, oy); // If we want the origin at a particular place, we force it there\n\n      if (isFinite(t.px) || isFinite(t.py)) {\n        var origin = new Point(ox, oy).transform(transformer); // TODO: Replace t.px with isFinite(t.px)\n\n        var dx = t.px ? t.px - origin.x : 0;\n        var dy = t.py ? t.py - origin.y : 0;\n        transformer.translateO(dx, dy);\n      } // Translate now after positioning\n\n\n      transformer.translateO(t.tx, t.ty);\n      return transformer;\n    } // Applies a matrix defined by its affine parameters\n\n  }, {\n    key: \"compose\",\n    value: function compose(o) {\n      if (o.origin) {\n        o.originX = o.origin[0];\n        o.originY = o.origin[1];\n      } // Get the parameters\n\n\n      var ox = o.originX || 0;\n      var oy = o.originY || 0;\n      var sx = o.scaleX || 1;\n      var sy = o.scaleY || 1;\n      var lam = o.shear || 0;\n      var theta = o.rotate || 0;\n      var tx = o.translateX || 0;\n      var ty = o.translateY || 0; // Apply the standard matrix\n\n      var result = new Matrix().translateO(-ox, -oy).scaleO(sx, sy).shearO(lam).rotateO(theta).translateO(tx, ty).lmultiplyO(this).translateO(ox, oy);\n      return result;\n    } // Decomposes this matrix into its affine parameters\n\n  }, {\n    key: \"decompose\",\n    value: function decompose() {\n      var cx = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var cy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      // Get the parameters from the matrix\n      var a = this.a;\n      var b = this.b;\n      var c = this.c;\n      var d = this.d;\n      var e = this.e;\n      var f = this.f; // Figure out if the winding direction is clockwise or counterclockwise\n\n      var determinant = a * d - b * c;\n      var ccw = determinant > 0 ? 1 : -1; // Since we only shear in x, we can use the x basis to get the x scale\n      // and the rotation of the resulting matrix\n\n      var sx = ccw * Math.sqrt(a * a + b * b);\n      var thetaRad = Math.atan2(ccw * b, ccw * a);\n      var theta = 180 / Math.PI * thetaRad;\n      var ct = Math.cos(thetaRad);\n      var st = Math.sin(thetaRad); // We can then solve the y basis vector simultaneously to get the other\n      // two affine parameters directly from these parameters\n\n      var lam = (a * c + b * d) / determinant;\n      var sy = c * sx / (lam * a - b) || d * sx / (lam * b + a); // Use the translations\n\n      var tx = e - cx + cx * ct * sx + cy * (lam * ct * sx - st * sy);\n      var ty = f - cy + cx * st * sx + cy * (lam * st * sx + ct * sy); // Construct the decomposition and return it\n\n      return {\n        // Return the affine parameters\n        scaleX: sx,\n        scaleY: sy,\n        shear: lam,\n        rotate: theta,\n        translateX: tx,\n        translateY: ty,\n        originX: cx,\n        originY: cy,\n        // Return the matrix parameters\n        a: this.a,\n        b: this.b,\n        c: this.c,\n        d: this.d,\n        e: this.e,\n        f: this.f\n      };\n    } // Left multiplies by the given matrix\n\n  }, {\n    key: \"multiply\",\n    value: function multiply(matrix) {\n      return this.clone().multiplyO(matrix);\n    }\n  }, {\n    key: \"multiplyO\",\n    value: function multiplyO(matrix) {\n      // Get the matrices\n      var l = this;\n      var r = matrix instanceof Matrix ? matrix : new Matrix(matrix);\n      return Matrix.matrixMultiply(l, r, this);\n    }\n  }, {\n    key: \"lmultiply\",\n    value: function lmultiply(matrix) {\n      return this.clone().lmultiplyO(matrix);\n    }\n  }, {\n    key: \"lmultiplyO\",\n    value: function lmultiplyO(matrix) {\n      var r = this;\n      var l = matrix instanceof Matrix ? matrix : new Matrix(matrix);\n      return Matrix.matrixMultiply(l, r, this);\n    } // Inverses matrix\n\n  }, {\n    key: \"inverseO\",\n    value: function inverseO() {\n      // Get the current parameters out of the matrix\n      var a = this.a;\n      var b = this.b;\n      var c = this.c;\n      var d = this.d;\n      var e = this.e;\n      var f = this.f; // Invert the 2x2 matrix in the top left\n\n      var det = a * d - b * c;\n      if (!det) throw new Error('Cannot invert ' + this); // Calculate the top 2x2 matrix\n\n      var na = d / det;\n      var nb = -b / det;\n      var nc = -c / det;\n      var nd = a / det; // Apply the inverted matrix to the top right\n\n      var ne = -(na * e + nc * f);\n      var nf = -(nb * e + nd * f); // Construct the inverted matrix\n\n      this.a = na;\n      this.b = nb;\n      this.c = nc;\n      this.d = nd;\n      this.e = ne;\n      this.f = nf;\n      return this;\n    }\n  }, {\n    key: \"inverse\",\n    value: function inverse() {\n      return this.clone().inverseO();\n    } // Translate matrix\n\n  }, {\n    key: \"translate\",\n    value: function translate(x, y) {\n      return this.clone().translateO(x, y);\n    }\n  }, {\n    key: \"translateO\",\n    value: function translateO(x, y) {\n      this.e += x || 0;\n      this.f += y || 0;\n      return this;\n    } // Scale matrix\n\n  }, {\n    key: \"scale\",\n    value: function scale(x, y, cx, cy) {\n      var _this$clone;\n\n      return (_this$clone = this.clone()).scaleO.apply(_this$clone, arguments);\n    }\n  }, {\n    key: \"scaleO\",\n    value: function scaleO(x) {\n      var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : x;\n      var cx = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var cy = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n      // Support uniform scaling\n      if (arguments.length === 3) {\n        cy = cx;\n        cx = y;\n        y = x;\n      }\n\n      var a = this.a,\n          b = this.b,\n          c = this.c,\n          d = this.d,\n          e = this.e,\n          f = this.f;\n      this.a = a * x;\n      this.b = b * y;\n      this.c = c * x;\n      this.d = d * y;\n      this.e = e * x - cx * x + cx;\n      this.f = f * y - cy * y + cy;\n      return this;\n    } // Rotate matrix\n\n  }, {\n    key: \"rotate\",\n    value: function rotate(r, cx, cy) {\n      return this.clone().rotateO(r, cx, cy);\n    }\n  }, {\n    key: \"rotateO\",\n    value: function rotateO(r) {\n      var cx = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var cy = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      // Convert degrees to radians\n      r = radians(r);\n      var cos = Math.cos(r);\n      var sin = Math.sin(r);\n      var a = this.a,\n          b = this.b,\n          c = this.c,\n          d = this.d,\n          e = this.e,\n          f = this.f;\n      this.a = a * cos - b * sin;\n      this.b = b * cos + a * sin;\n      this.c = c * cos - d * sin;\n      this.d = d * cos + c * sin;\n      this.e = e * cos - f * sin + cy * sin - cx * cos + cx;\n      this.f = f * cos + e * sin - cx * sin - cy * cos + cy;\n      return this;\n    } // Flip matrix on x or y, at a given offset\n\n  }, {\n    key: \"flip\",\n    value: function flip(axis, around) {\n      return this.clone().flipO(axis, around);\n    }\n  }, {\n    key: \"flipO\",\n    value: function flipO(axis, around) {\n      return axis === 'x' ? this.scaleO(-1, 1, around, 0) : axis === 'y' ? this.scaleO(1, -1, 0, around) : this.scaleO(-1, -1, axis, around || axis); // Define an x, y flip point\n    } // Shear matrix\n\n  }, {\n    key: \"shear\",\n    value: function shear(a, cx, cy) {\n      return this.clone().shearO(a, cx, cy);\n    }\n  }, {\n    key: \"shearO\",\n    value: function shearO(lx) {\n      var cy = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var a = this.a,\n          b = this.b,\n          c = this.c,\n          d = this.d,\n          e = this.e,\n          f = this.f;\n      this.a = a + b * lx;\n      this.c = c + d * lx;\n      this.e = e + f * lx - cy * lx;\n      return this;\n    } // Skew Matrix\n\n  }, {\n    key: \"skew\",\n    value: function skew(x, y, cx, cy) {\n      var _this$clone2;\n\n      return (_this$clone2 = this.clone()).skewO.apply(_this$clone2, arguments);\n    }\n  }, {\n    key: \"skewO\",\n    value: function skewO(x) {\n      var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : x;\n      var cx = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var cy = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n      // support uniformal skew\n      if (arguments.length === 3) {\n        cy = cx;\n        cx = y;\n        y = x;\n      } // Convert degrees to radians\n\n\n      x = radians(x);\n      y = radians(y);\n      var lx = Math.tan(x);\n      var ly = Math.tan(y);\n      var a = this.a,\n          b = this.b,\n          c = this.c,\n          d = this.d,\n          e = this.e,\n          f = this.f;\n      this.a = a + b * lx;\n      this.b = b + a * ly;\n      this.c = c + d * lx;\n      this.d = d + c * ly;\n      this.e = e + f * lx - cy * lx;\n      this.f = f + e * ly - cx * ly;\n      return this;\n    } // SkewX\n\n  }, {\n    key: \"skewX\",\n    value: function skewX(x, cx, cy) {\n      return this.skew(x, 0, cx, cy);\n    }\n  }, {\n    key: \"skewXO\",\n    value: function skewXO(x, cx, cy) {\n      return this.skewO(x, 0, cx, cy);\n    } // SkewY\n\n  }, {\n    key: \"skewY\",\n    value: function skewY(y, cx, cy) {\n      return this.skew(0, y, cx, cy);\n    }\n  }, {\n    key: \"skewYO\",\n    value: function skewYO(y, cx, cy) {\n      return this.skewO(0, y, cx, cy);\n    } // Transform around a center point\n\n  }, {\n    key: \"aroundO\",\n    value: function aroundO(cx, cy, matrix) {\n      var dx = cx || 0;\n      var dy = cy || 0;\n      return this.translateO(-dx, -dy).lmultiplyO(matrix).translateO(dx, dy);\n    }\n  }, {\n    key: \"around\",\n    value: function around(cx, cy, matrix) {\n      return this.clone().aroundO(cx, cy, matrix);\n    } // Check if two matrices are equal\n\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      var comp = new Matrix(other);\n      return closeEnough(this.a, comp.a) && closeEnough(this.b, comp.b) && closeEnough(this.c, comp.c) && closeEnough(this.d, comp.d) && closeEnough(this.e, comp.e) && closeEnough(this.f, comp.f);\n    } // Convert matrix to string\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return 'matrix(' + this.a + ',' + this.b + ',' + this.c + ',' + this.d + ',' + this.e + ',' + this.f + ')';\n    }\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      return [this.a, this.b, this.c, this.d, this.e, this.f];\n    }\n  }, {\n    key: \"valueOf\",\n    value: function valueOf() {\n      return {\n        a: this.a,\n        b: this.b,\n        c: this.c,\n        d: this.d,\n        e: this.e,\n        f: this.f\n      };\n    }\n  }], [{\n    key: \"fromArray\",\n    value: function fromArray(a) {\n      return {\n        a: a[0],\n        b: a[1],\n        c: a[2],\n        d: a[3],\n        e: a[4],\n        f: a[5]\n      };\n    }\n  }, {\n    key: \"isMatrixLike\",\n    value: function isMatrixLike(o) {\n      return o.a != null || o.b != null || o.c != null || o.d != null || o.e != null || o.f != null;\n    }\n  }, {\n    key: \"formatTransforms\",\n    value: function formatTransforms(o) {\n      // Get all of the parameters required to form the matrix\n      var flipBoth = o.flip === 'both' || o.flip === true;\n      var flipX = o.flip && (flipBoth || o.flip === 'x') ? -1 : 1;\n      var flipY = o.flip && (flipBoth || o.flip === 'y') ? -1 : 1;\n      var skewX = o.skew && o.skew.length ? o.skew[0] : isFinite(o.skew) ? o.skew : isFinite(o.skewX) ? o.skewX : 0;\n      var skewY = o.skew && o.skew.length ? o.skew[1] : isFinite(o.skew) ? o.skew : isFinite(o.skewY) ? o.skewY : 0;\n      var scaleX = o.scale && o.scale.length ? o.scale[0] * flipX : isFinite(o.scale) ? o.scale * flipX : isFinite(o.scaleX) ? o.scaleX * flipX : flipX;\n      var scaleY = o.scale && o.scale.length ? o.scale[1] * flipY : isFinite(o.scale) ? o.scale * flipY : isFinite(o.scaleY) ? o.scaleY * flipY : flipY;\n      var shear = o.shear || 0;\n      var theta = o.rotate || o.theta || 0;\n      var origin = new Point(o.origin || o.around || o.ox || o.originX, o.oy || o.originY);\n      var ox = origin.x;\n      var oy = origin.y;\n      var position = new Point(o.position || o.px || o.positionX, o.py || o.positionY);\n      var px = position.x;\n      var py = position.y;\n      var translate = new Point(o.translate || o.tx || o.translateX, o.ty || o.translateY);\n      var tx = translate.x;\n      var ty = translate.y;\n      var relative = new Point(o.relative || o.rx || o.relativeX, o.ry || o.relativeY);\n      var rx = relative.x;\n      var ry = relative.y; // Populate all of the values\n\n      return {\n        scaleX: scaleX,\n        scaleY: scaleY,\n        skewX: skewX,\n        skewY: skewY,\n        shear: shear,\n        theta: theta,\n        rx: rx,\n        ry: ry,\n        tx: tx,\n        ty: ty,\n        ox: ox,\n        oy: oy,\n        px: px,\n        py: py\n      };\n    } // left matrix, right matrix, target matrix which is overwritten\n\n  }, {\n    key: \"matrixMultiply\",\n    value: function matrixMultiply(l, r, o) {\n      // Work out the product directly\n      var a = l.a * r.a + l.c * r.b;\n      var b = l.b * r.a + l.d * r.b;\n      var c = l.a * r.c + l.c * r.d;\n      var d = l.b * r.c + l.d * r.d;\n      var e = l.e + l.a * r.e + l.c * r.f;\n      var f = l.f + l.b * r.e + l.d * r.f; // make sure to use local variables because l/r and o could be the same\n\n      o.a = a;\n      o.b = b;\n      o.c = c;\n      o.d = d;\n      o.e = e;\n      o.f = f;\n      return o;\n    }\n  }]);\n\n  return Matrix;\n}();\nfunction ctm() {\n  return new Matrix(this.node.getCTM());\n}\nfunction screenCTM() {\n  /* https://bugzilla.mozilla.org/show_bug.cgi?id=1344537\r\n     This is needed because FF does not return the transformation matrix\r\n     for the inner coordinate system when getScreenCTM() is called on nested svgs.\r\n     However all other Browsers do that */\n  if (typeof this.isRoot === 'function' && !this.isRoot()) {\n    var rect = this.rect(1, 1);\n    var m = rect.node.getScreenCTM();\n    rect.remove();\n    return new Matrix(m);\n  }\n\n  return new Matrix(this.node.getScreenCTM());\n}\nregister(Matrix, 'Matrix');\n\nfunction parser() {\n  // Reuse cached element if possible\n  if (!parser.nodes) {\n    var svg = makeInstance().size(2, 0);\n    svg.node.style.cssText = ['opacity: 0', 'position: absolute', 'left: -100%', 'top: -100%', 'overflow: hidden'].join(';');\n    svg.attr('focusable', 'false');\n    svg.attr('aria-hidden', 'true');\n    var path = svg.path().node;\n    parser.nodes = {\n      svg: svg,\n      path: path\n    };\n  }\n\n  if (!parser.nodes.svg.node.parentNode) {\n    var b = globals.document.body || globals.document.documentElement;\n    parser.nodes.svg.addTo(b);\n  }\n\n  return parser.nodes;\n}\n\nfunction isNulledBox(box) {\n  return !box.width && !box.height && !box.x && !box.y;\n}\n\nfunction domContains(node) {\n  return node === globals.document || (globals.document.documentElement.contains || function (node) {\n    // This is IE - it does not support contains() for top-level SVGs\n    while (node.parentNode) {\n      node = node.parentNode;\n    }\n\n    return node === globals.document;\n  }).call(globals.document.documentElement, node);\n}\n\nvar Box =\n/*#__PURE__*/\nfunction () {\n  function Box() {\n    _classCallCheck(this, Box);\n\n    this.init.apply(this, arguments);\n  }\n\n  _createClass(Box, [{\n    key: \"init\",\n    value: function init(source) {\n      var base = [0, 0, 0, 0];\n      source = typeof source === 'string' ? source.split(delimiter).map(parseFloat) : Array.isArray(source) ? source : _typeof(source) === 'object' ? [source.left != null ? source.left : source.x, source.top != null ? source.top : source.y, source.width, source.height] : arguments.length === 4 ? [].slice.call(arguments) : base;\n      this.x = source[0] || 0;\n      this.y = source[1] || 0;\n      this.width = this.w = source[2] || 0;\n      this.height = this.h = source[3] || 0; // Add more bounding box properties\n\n      this.x2 = this.x + this.w;\n      this.y2 = this.y + this.h;\n      this.cx = this.x + this.w / 2;\n      this.cy = this.y + this.h / 2;\n      return this;\n    } // Merge rect box with another, return a new instance\n\n  }, {\n    key: \"merge\",\n    value: function merge(box) {\n      var x = Math.min(this.x, box.x);\n      var y = Math.min(this.y, box.y);\n      var width = Math.max(this.x + this.width, box.x + box.width) - x;\n      var height = Math.max(this.y + this.height, box.y + box.height) - y;\n      return new Box(x, y, width, height);\n    }\n  }, {\n    key: \"transform\",\n    value: function transform(m) {\n      if (!(m instanceof Matrix)) {\n        m = new Matrix(m);\n      }\n\n      var xMin = Infinity;\n      var xMax = -Infinity;\n      var yMin = Infinity;\n      var yMax = -Infinity;\n      var pts = [new Point(this.x, this.y), new Point(this.x2, this.y), new Point(this.x, this.y2), new Point(this.x2, this.y2)];\n      pts.forEach(function (p) {\n        p = p.transform(m);\n        xMin = Math.min(xMin, p.x);\n        xMax = Math.max(xMax, p.x);\n        yMin = Math.min(yMin, p.y);\n        yMax = Math.max(yMax, p.y);\n      });\n      return new Box(xMin, yMin, xMax - xMin, yMax - yMin);\n    }\n  }, {\n    key: \"addOffset\",\n    value: function addOffset() {\n      // offset by window scroll position, because getBoundingClientRect changes when window is scrolled\n      this.x += globals.window.pageXOffset;\n      this.y += globals.window.pageYOffset;\n      return this;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.x + ' ' + this.y + ' ' + this.width + ' ' + this.height;\n    }\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      return [this.x, this.y, this.width, this.height];\n    }\n  }, {\n    key: \"isNulled\",\n    value: function isNulled() {\n      return isNulledBox(this);\n    }\n  }]);\n\n  return Box;\n}();\n\nfunction getBox(cb, retry) {\n  var box;\n\n  try {\n    box = cb(this.node);\n\n    if (isNulledBox(box) && !domContains(this.node)) {\n      throw new Error('Element not in the dom');\n    }\n  } catch (e) {\n    box = retry(this);\n  }\n\n  return box;\n}\n\nfunction bbox() {\n  return new Box(getBox.call(this, function (node) {\n    return node.getBBox();\n  }, function (el) {\n    try {\n      var clone = el.clone().addTo(parser().svg).show();\n      var box = clone.node.getBBox();\n      clone.remove();\n      return box;\n    } catch (e) {\n      throw new Error('Getting bbox of element \"' + el.node.nodeName + '\" is not possible. ' + e.toString());\n    }\n  }));\n}\nfunction rbox(el) {\n  var box = new Box(getBox.call(this, function (node) {\n    return node.getBoundingClientRect();\n  }, function (el) {\n    throw new Error('Getting rbox of element \"' + el.node.nodeName + '\" is not possible');\n  }));\n  if (el) return box.transform(el.screenCTM().inverse());\n  return box.addOffset();\n}\nregisterMethods({\n  viewbox: {\n    viewbox: function viewbox(x, y, width, height) {\n      // act as getter\n      if (x == null) return new Box(this.attr('viewBox')); // act as setter\n\n      return this.attr('viewBox', new Box(x, y, width, height));\n    },\n    zoom: function zoom(level, point) {\n      var width = this.node.clientWidth;\n      var height = this.node.clientHeight;\n      var v = this.viewbox(); // Firefox does not support clientHeight and returns 0\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=874811\n\n      if (!width && !height) {\n        var style = window.getComputedStyle(this.node);\n        width = parseFloat(style.getPropertyValue('width'));\n        height = parseFloat(style.getPropertyValue('height'));\n      }\n\n      var zoomX = width / v.width;\n      var zoomY = height / v.height;\n      var zoom = Math.min(zoomX, zoomY);\n\n      if (level == null) {\n        return zoom;\n      }\n\n      var zoomAmount = zoom / level;\n      if (zoomAmount === Infinity) zoomAmount = Number.MIN_VALUE;\n      point = point || new Point(width / 2 / zoomX + v.x, height / 2 / zoomY + v.y);\n      var box = new Box(v).transform(new Matrix({\n        scale: zoomAmount,\n        origin: point\n      }));\n      return this.viewbox(box);\n    }\n  }\n});\nregister(Box, 'Box');\n\n/* eslint no-new-func: \"off\" */\nvar subClassArray = function () {\n  try {\n    // try es6 subclassing\n    return Function('name', 'baseClass', '_constructor', ['baseClass = baseClass || Array', 'return {', '  [name]: class extends baseClass {', '    constructor (...args) {', '      super(...args)', '      _constructor && _constructor.apply(this, args)', '    }', '  }', '}[name]'].join('\\n'));\n  } catch (e) {\n    // Use es5 approach\n    return function (name) {\n      var baseClass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Array;\n\n      var _constructor = arguments.length > 2 ? arguments[2] : undefined;\n\n      var Arr = function Arr() {\n        baseClass.apply(this, arguments);\n        _constructor && _constructor.apply(this, arguments);\n      };\n\n      Arr.prototype = Object.create(baseClass.prototype);\n      Arr.prototype.constructor = Arr;\n\n      Arr.prototype.map = function (fn) {\n        var arr = new Arr();\n        arr.push.apply(arr, Array.prototype.map.call(this, fn));\n        return arr;\n      };\n\n      return Arr;\n    };\n  }\n}();\n\nvar List = subClassArray('List', Array, function () {\n  var arr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  // This catches the case, that native map tries to create an array with new Array(1)\n  if (typeof arr === 'number') return this;\n  this.length = 0;\n  this.push.apply(this, _toConsumableArray(arr));\n});\nextend(List, {\n  each: function each(fnOrMethodName) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    if (typeof fnOrMethodName === 'function') {\n      return this.map(function (el) {\n        return fnOrMethodName.call(el, el);\n      });\n    } else {\n      return this.map(function (el) {\n        return el[fnOrMethodName].apply(el, args);\n      });\n    }\n  },\n  toArray: function toArray() {\n    return Array.prototype.concat.apply([], this);\n  }\n});\nvar reserved = ['toArray', 'constructor', 'each'];\n\nList.extend = function (methods) {\n  methods = methods.reduce(function (obj, name) {\n    // Don't overwrite own methods\n    if (reserved.includes(name)) return obj; // Don't add private methods\n\n    if (name[0] === '_') return obj; // Relay every call to each()\n\n    obj[name] = function () {\n      for (var _len2 = arguments.length, attrs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        attrs[_key2] = arguments[_key2];\n      }\n\n      return this.each.apply(this, [name].concat(attrs));\n    };\n\n    return obj;\n  }, {});\n  extend(List, methods);\n};\n\nfunction baseFind(query, parent) {\n  return new List(map((parent || globals.document).querySelectorAll(query), function (node) {\n    return adopt(node);\n  }));\n} // Scoped find method\n\nfunction find(query) {\n  return baseFind(query, this.node);\n}\nfunction findOne(query) {\n  return adopt(this.node.querySelector(query));\n}\n\nvar EventTarget =\n/*#__PURE__*/\nfunction (_Base) {\n  _inherits(EventTarget, _Base);\n\n  function EventTarget() {\n    var _this;\n\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref$events = _ref.events,\n        events = _ref$events === void 0 ? {} : _ref$events;\n\n    _classCallCheck(this, EventTarget);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EventTarget).call(this));\n    _this.events = events;\n    return _this;\n  }\n\n  _createClass(EventTarget, [{\n    key: \"addEventListener\",\n    value: function addEventListener() {}\n  }, {\n    key: \"dispatch\",\n    value: function dispatch$1(event, data) {\n      return dispatch(this, event, data);\n    }\n  }, {\n    key: \"dispatchEvent\",\n    value: function dispatchEvent(event) {\n      var bag = this.getEventHolder().events;\n      if (!bag) return true;\n      var events = bag[event.type];\n\n      for (var i in events) {\n        for (var j in events[i]) {\n          events[i][j](event);\n        }\n      }\n\n      return !event.defaultPrevented;\n    } // Fire given event\n\n  }, {\n    key: \"fire\",\n    value: function fire(event, data) {\n      this.dispatch(event, data);\n      return this;\n    }\n  }, {\n    key: \"getEventHolder\",\n    value: function getEventHolder() {\n      return this;\n    }\n  }, {\n    key: \"getEventTarget\",\n    value: function getEventTarget() {\n      return this;\n    } // Unbind event from listener\n\n  }, {\n    key: \"off\",\n    value: function off$1(event, listener) {\n      off(this, event, listener);\n\n      return this;\n    } // Bind given event to listener\n\n  }, {\n    key: \"on\",\n    value: function on$1(event, listener, binding, options) {\n      on(this, event, listener, binding, options);\n\n      return this;\n    }\n  }, {\n    key: \"removeEventListener\",\n    value: function removeEventListener() {}\n  }]);\n\n  return EventTarget;\n}(Base);\nregister(EventTarget, 'EventTarget');\n\nfunction noop() {} // Default animation values\n\nvar timeline = {\n  duration: 400,\n  ease: '>',\n  delay: 0\n}; // Default attribute values\n\nvar attrs = {\n  // fill and stroke\n  'fill-opacity': 1,\n  'stroke-opacity': 1,\n  'stroke-width': 0,\n  'stroke-linejoin': 'miter',\n  'stroke-linecap': 'butt',\n  fill: '#000000',\n  stroke: '#000000',\n  opacity: 1,\n  // position\n  x: 0,\n  y: 0,\n  cx: 0,\n  cy: 0,\n  // size\n  width: 0,\n  height: 0,\n  // radius\n  r: 0,\n  rx: 0,\n  ry: 0,\n  // gradient\n  offset: 0,\n  'stop-opacity': 1,\n  'stop-color': '#000000',\n  // text\n  'text-anchor': 'start'\n};\n\nvar defaults = ({\n\t__proto__: null,\n\tnoop: noop,\n\ttimeline: timeline,\n\tattrs: attrs\n});\n\nvar SVGArray = subClassArray('SVGArray', Array, function (arr) {\n  this.init(arr);\n});\nextend(SVGArray, {\n  init: function init(arr) {\n    // This catches the case, that native map tries to create an array with new Array(1)\n    if (typeof arr === 'number') return this;\n    this.length = 0;\n    this.push.apply(this, _toConsumableArray(this.parse(arr)));\n    return this;\n  },\n  toArray: function toArray() {\n    return Array.prototype.concat.apply([], this);\n  },\n  toString: function toString() {\n    return this.join(' ');\n  },\n  // Flattens the array if needed\n  valueOf: function valueOf() {\n    var ret = [];\n    ret.push.apply(ret, _toConsumableArray(this));\n    return ret;\n  },\n  // Parse whitespace separated string\n  parse: function parse() {\n    var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    // If already is an array, no need to parse it\n    if (array instanceof Array) return array;\n    return array.trim().split(delimiter).map(parseFloat);\n  },\n  clone: function clone() {\n    return new this.constructor(this);\n  },\n  toSet: function toSet() {\n    return new Set(this);\n  }\n});\n\nvar SVGNumber =\n/*#__PURE__*/\nfunction () {\n  // Initialize\n  function SVGNumber() {\n    _classCallCheck(this, SVGNumber);\n\n    this.init.apply(this, arguments);\n  }\n\n  _createClass(SVGNumber, [{\n    key: \"init\",\n    value: function init(value, unit) {\n      unit = Array.isArray(value) ? value[1] : unit;\n      value = Array.isArray(value) ? value[0] : value; // initialize defaults\n\n      this.value = 0;\n      this.unit = unit || ''; // parse value\n\n      if (typeof value === 'number') {\n        // ensure a valid numeric value\n        this.value = isNaN(value) ? 0 : !isFinite(value) ? value < 0 ? -3.4e+38 : +3.4e+38 : value;\n      } else if (typeof value === 'string') {\n        unit = value.match(numberAndUnit);\n\n        if (unit) {\n          // make value numeric\n          this.value = parseFloat(unit[1]); // normalize\n\n          if (unit[5] === '%') {\n            this.value /= 100;\n          } else if (unit[5] === 's') {\n            this.value *= 1000;\n          } // store unit\n\n\n          this.unit = unit[5];\n        }\n      } else {\n        if (value instanceof SVGNumber) {\n          this.value = value.valueOf();\n          this.unit = value.unit;\n        }\n      }\n\n      return this;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return (this.unit === '%' ? ~~(this.value * 1e8) / 1e6 : this.unit === 's' ? this.value / 1e3 : this.value) + this.unit;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.toString();\n    }\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      return [this.value, this.unit];\n    }\n  }, {\n    key: \"valueOf\",\n    value: function valueOf() {\n      return this.value;\n    } // Add number\n\n  }, {\n    key: \"plus\",\n    value: function plus(number) {\n      number = new SVGNumber(number);\n      return new SVGNumber(this + number, this.unit || number.unit);\n    } // Subtract number\n\n  }, {\n    key: \"minus\",\n    value: function minus(number) {\n      number = new SVGNumber(number);\n      return new SVGNumber(this - number, this.unit || number.unit);\n    } // Multiply number\n\n  }, {\n    key: \"times\",\n    value: function times(number) {\n      number = new SVGNumber(number);\n      return new SVGNumber(this * number, this.unit || number.unit);\n    } // Divide number\n\n  }, {\n    key: \"divide\",\n    value: function divide(number) {\n      number = new SVGNumber(number);\n      return new SVGNumber(this / number, this.unit || number.unit);\n    }\n  }, {\n    key: \"convert\",\n    value: function convert(unit) {\n      return new SVGNumber(this.value, unit);\n    }\n  }]);\n\n  return SVGNumber;\n}();\n\nvar hooks = [];\nfunction registerAttrHook(fn) {\n  hooks.push(fn);\n} // Set svg element attribute\n\nfunction attr(attr, val, ns) {\n  var _this = this;\n\n  // act as full getter\n  if (attr == null) {\n    // get an object of attributes\n    attr = {};\n    val = this.node.attributes;\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = val[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var node = _step.value;\n        attr[node.nodeName] = isNumber.test(node.nodeValue) ? parseFloat(node.nodeValue) : node.nodeValue;\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return attr;\n  } else if (attr instanceof Array) {\n    // loop through array and get all values\n    return attr.reduce(function (last, curr) {\n      last[curr] = _this.attr(curr);\n      return last;\n    }, {});\n  } else if (_typeof(attr) === 'object' && attr.constructor === Object) {\n    // apply every attribute individually if an object is passed\n    for (val in attr) {\n      this.attr(val, attr[val]);\n    }\n  } else if (val === null) {\n    // remove value\n    this.node.removeAttribute(attr);\n  } else if (val == null) {\n    // act as a getter if the first and only argument is not an object\n    val = this.node.getAttribute(attr);\n    return val == null ? attrs[attr] : isNumber.test(val) ? parseFloat(val) : val;\n  } else {\n    // Loop through hooks and execute them to convert value\n    val = hooks.reduce(function (_val, hook) {\n      return hook(attr, _val, _this);\n    }, val); // ensure correct numeric values (also accepts NaN and Infinity)\n\n    if (typeof val === 'number') {\n      val = new SVGNumber(val);\n    } else if (Color.isColor(val)) {\n      // ensure full hex color\n      val = new Color(val);\n    } else if (val.constructor === Array) {\n      // Check for plain arrays and parse array values\n      val = new SVGArray(val);\n    } // if the passed attribute is leading...\n\n\n    if (attr === 'leading') {\n      // ... call the leading method instead\n      if (this.leading) {\n        this.leading(val);\n      }\n    } else {\n      // set given attribute on node\n      typeof ns === 'string' ? this.node.setAttributeNS(ns, attr, val.toString()) : this.node.setAttribute(attr, val.toString());\n    } // rebuild if required\n\n\n    if (this.rebuild && (attr === 'font-size' || attr === 'x')) {\n      this.rebuild();\n    }\n  }\n\n  return this;\n}\n\nvar Dom =\n/*#__PURE__*/\nfunction (_EventTarget) {\n  _inherits(Dom, _EventTarget);\n\n  function Dom(node, attrs) {\n    var _this2;\n\n    _classCallCheck(this, Dom);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(Dom).call(this, node));\n    _this2.node = node;\n    _this2.type = node.nodeName;\n\n    if (attrs && node !== attrs) {\n      _this2.attr(attrs);\n    }\n\n    return _this2;\n  } // Add given element at a position\n\n\n  _createClass(Dom, [{\n    key: \"add\",\n    value: function add(element, i) {\n      element = makeInstance(element);\n\n      if (i == null) {\n        this.node.appendChild(element.node);\n      } else if (element.node !== this.node.childNodes[i]) {\n        this.node.insertBefore(element.node, this.node.childNodes[i]);\n      }\n\n      return this;\n    } // Add element to given container and return self\n\n  }, {\n    key: \"addTo\",\n    value: function addTo(parent) {\n      return makeInstance(parent).put(this);\n    } // Returns all child elements\n\n  }, {\n    key: \"children\",\n    value: function children() {\n      return new List(map(this.node.children, function (node) {\n        return adopt(node);\n      }));\n    } // Remove all elements in this container\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      // remove children\n      while (this.node.hasChildNodes()) {\n        this.node.removeChild(this.node.lastChild);\n      }\n\n      return this;\n    } // Clone element\n\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      // write dom data to the dom so the clone can pickup the data\n      this.writeDataToDom(); // clone element and assign new id\n\n      return assignNewId(this.node.cloneNode(true));\n    } // Iterates over all children and invokes a given block\n\n  }, {\n    key: \"each\",\n    value: function each(block, deep) {\n      var children = this.children();\n      var i, il;\n\n      for (i = 0, il = children.length; i < il; i++) {\n        block.apply(children[i], [i, children]);\n\n        if (deep) {\n          children[i].each(block, deep);\n        }\n      }\n\n      return this;\n    }\n  }, {\n    key: \"element\",\n    value: function element(nodeName) {\n      return this.put(new Dom(create(nodeName)));\n    } // Get first child\n\n  }, {\n    key: \"first\",\n    value: function first() {\n      return adopt(this.node.firstChild);\n    } // Get a element at the given index\n\n  }, {\n    key: \"get\",\n    value: function get(i) {\n      return adopt(this.node.childNodes[i]);\n    }\n  }, {\n    key: \"getEventHolder\",\n    value: function getEventHolder() {\n      return this.node;\n    }\n  }, {\n    key: \"getEventTarget\",\n    value: function getEventTarget() {\n      return this.node;\n    } // Checks if the given element is a child\n\n  }, {\n    key: \"has\",\n    value: function has(element) {\n      return this.index(element) >= 0;\n    } // Get / set id\n\n  }, {\n    key: \"id\",\n    value: function id(_id) {\n      // generate new id if no id set\n      if (typeof _id === 'undefined' && !this.node.id) {\n        this.node.id = eid(this.type);\n      } // dont't set directly width this.node.id to make `null` work correctly\n\n\n      return this.attr('id', _id);\n    } // Gets index of given element\n\n  }, {\n    key: \"index\",\n    value: function index(element) {\n      return [].slice.call(this.node.childNodes).indexOf(element.node);\n    } // Get the last child\n\n  }, {\n    key: \"last\",\n    value: function last() {\n      return adopt(this.node.lastChild);\n    } // matches the element vs a css selector\n\n  }, {\n    key: \"matches\",\n    value: function matches(selector) {\n      var el = this.node;\n      return (el.matches || el.matchesSelector || el.msMatchesSelector || el.mozMatchesSelector || el.webkitMatchesSelector || el.oMatchesSelector).call(el, selector);\n    } // Returns the parent element instance\n\n  }, {\n    key: \"parent\",\n    value: function parent(type) {\n      var parent = this; // check for parent\n\n      if (!parent.node.parentNode) return null; // get parent element\n\n      parent = adopt(parent.node.parentNode);\n      if (!type) return parent; // loop trough ancestors if type is given\n\n      while (parent) {\n        if (typeof type === 'string' ? parent.matches(type) : parent instanceof type) return parent;\n        if (!parent.node.parentNode || parent.node.parentNode.nodeName === '#document' || parent.node.parentNode.nodeName === '#document-fragment') return null; // #759, #720\n\n        parent = adopt(parent.node.parentNode);\n      }\n    } // Basically does the same as `add()` but returns the added element instead\n\n  }, {\n    key: \"put\",\n    value: function put(element, i) {\n      this.add(element, i);\n      return element;\n    } // Add element to given container and return container\n\n  }, {\n    key: \"putIn\",\n    value: function putIn(parent) {\n      return makeInstance(parent).add(this);\n    } // Remove element\n\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      if (this.parent()) {\n        this.parent().removeElement(this);\n      }\n\n      return this;\n    } // Remove a given child\n\n  }, {\n    key: \"removeElement\",\n    value: function removeElement(element) {\n      this.node.removeChild(element.node);\n      return this;\n    } // Replace this with element\n\n  }, {\n    key: \"replace\",\n    value: function replace(element) {\n      element = makeInstance(element);\n      this.node.parentNode.replaceChild(element.node, this.node);\n      return element;\n    }\n  }, {\n    key: \"round\",\n    value: function round() {\n      var precision = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n      var map = arguments.length > 1 ? arguments[1] : undefined;\n      var factor = Math.pow(10, precision);\n      var attrs = this.attr(); // If we have no map, build one from attrs\n\n      if (!map) {\n        map = Object.keys(attrs);\n      } // Holds rounded attributes\n\n\n      var newAttrs = {};\n      map.forEach(function (key) {\n        newAttrs[key] = Math.round(attrs[key] * factor) / factor;\n      });\n      this.attr(newAttrs);\n      return this;\n    } // Return id on string conversion\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.id();\n    } // Import raw svg\n\n  }, {\n    key: \"svg\",\n    value: function svg(svgOrFn, outerHTML) {\n      var well, len, fragment;\n\n      if (svgOrFn === false) {\n        outerHTML = false;\n        svgOrFn = null;\n      } // act as getter if no svg string is given\n\n\n      if (svgOrFn == null || typeof svgOrFn === 'function') {\n        // The default for exports is, that the outerNode is included\n        outerHTML = outerHTML == null ? true : outerHTML; // write svgjs data to the dom\n\n        this.writeDataToDom();\n        var current = this; // An export modifier was passed\n\n        if (svgOrFn != null) {\n          current = adopt(current.node.cloneNode(true)); // If the user wants outerHTML we need to process this node, too\n\n          if (outerHTML) {\n            var result = svgOrFn(current);\n            current = result || current; // The user does not want this node? Well, then he gets nothing\n\n            if (result === false) return '';\n          } // Deep loop through all children and apply modifier\n\n\n          current.each(function () {\n            var result = svgOrFn(this);\n\n            var _this = result || this; // If modifier returns false, discard node\n\n\n            if (result === false) {\n              this.remove(); // If modifier returns new node, use it\n            } else if (result && this !== _this) {\n              this.replace(_this);\n            }\n          }, true);\n        } // Return outer or inner content\n\n\n        return outerHTML ? current.node.outerHTML : current.node.innerHTML;\n      } // Act as setter if we got a string\n      // The default for import is, that the current node is not replaced\n\n\n      outerHTML = outerHTML == null ? false : outerHTML; // Create temporary holder\n\n      well = globals.document.createElementNS(ns, 'svg');\n      fragment = globals.document.createDocumentFragment(); // Dump raw svg\n\n      well.innerHTML = svgOrFn; // Transplant nodes into the fragment\n\n      for (len = well.children.length; len--;) {\n        fragment.appendChild(well.firstElementChild);\n      }\n\n      var parent = this.parent(); // Add the whole fragment at once\n\n      return outerHTML ? this.replace(fragment) && parent : this.add(fragment);\n    }\n  }, {\n    key: \"words\",\n    value: function words(text) {\n      // This is faster than removing all children and adding a new one\n      this.node.textContent = text;\n      return this;\n    } // write svgjs data to the dom\n\n  }, {\n    key: \"writeDataToDom\",\n    value: function writeDataToDom() {\n      // dump variables recursively\n      this.each(function () {\n        this.writeDataToDom();\n      });\n      return this;\n    }\n  }]);\n\n  return Dom;\n}(EventTarget);\nextend(Dom, {\n  attr: attr,\n  find: find,\n  findOne: findOne\n});\nregister(Dom, 'Dom');\n\nvar Element =\n/*#__PURE__*/\nfunction (_Dom) {\n  _inherits(Element, _Dom);\n\n  function Element(node, attrs) {\n    var _this;\n\n    _classCallCheck(this, Element);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Element).call(this, node, attrs)); // initialize data object\n\n    _this.dom = {}; // create circular reference\n\n    _this.node.instance = _assertThisInitialized(_this);\n\n    if (node.hasAttribute('svgjs:data')) {\n      // pull svgjs data from the dom (getAttributeNS doesn't work in html5)\n      _this.setData(JSON.parse(node.getAttribute('svgjs:data')) || {});\n    }\n\n    return _this;\n  } // Move element by its center\n\n\n  _createClass(Element, [{\n    key: \"center\",\n    value: function center(x, y) {\n      return this.cx(x).cy(y);\n    } // Move by center over x-axis\n\n  }, {\n    key: \"cx\",\n    value: function cx(x) {\n      return x == null ? this.x() + this.width() / 2 : this.x(x - this.width() / 2);\n    } // Move by center over y-axis\n\n  }, {\n    key: \"cy\",\n    value: function cy(y) {\n      return y == null ? this.y() + this.height() / 2 : this.y(y - this.height() / 2);\n    } // Get defs\n\n  }, {\n    key: \"defs\",\n    value: function defs() {\n      return this.root().defs();\n    } // Relative move over x and y axes\n\n  }, {\n    key: \"dmove\",\n    value: function dmove(x, y) {\n      return this.dx(x).dy(y);\n    } // Relative move over x axis\n\n  }, {\n    key: \"dx\",\n    value: function dx() {\n      var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      return this.x(new SVGNumber(x).plus(this.x()));\n    } // Relative move over y axis\n\n  }, {\n    key: \"dy\",\n    value: function dy() {\n      var y = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      return this.y(new SVGNumber(y).plus(this.y()));\n    } // Get parent document\n\n  }, {\n    key: \"root\",\n    value: function root$1() {\n      var p = this.parent(getClass(root));\n      return p && p.root();\n    }\n  }, {\n    key: \"getEventHolder\",\n    value: function getEventHolder() {\n      return this;\n    } // Set height of element\n\n  }, {\n    key: \"height\",\n    value: function height(_height) {\n      return this.attr('height', _height);\n    } // Checks whether the given point inside the bounding box of the element\n\n  }, {\n    key: \"inside\",\n    value: function inside(x, y) {\n      var box = this.bbox();\n      return x > box.x && y > box.y && x < box.x + box.width && y < box.y + box.height;\n    } // Move element to given x and y values\n\n  }, {\n    key: \"move\",\n    value: function move(x, y) {\n      return this.x(x).y(y);\n    } // return array of all ancestors of given type up to the root svg\n\n  }, {\n    key: \"parents\",\n    value: function parents() {\n      var until = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : globals.document;\n      until = makeInstance(until);\n      var parents = new List();\n      var parent = this;\n\n      while ((parent = parent.parent()) && parent.node !== until.node && parent.node !== globals.document) {\n        parents.push(parent);\n      }\n\n      return parents;\n    } // Get referenced element form attribute value\n\n  }, {\n    key: \"reference\",\n    value: function reference$1(attr) {\n      attr = this.attr(attr);\n      if (!attr) return null;\n      var m = attr.match(reference);\n      return m ? makeInstance(m[1]) : null;\n    } // set given data to the elements data property\n\n  }, {\n    key: \"setData\",\n    value: function setData(o) {\n      this.dom = o;\n      return this;\n    } // Set element size to given width and height\n\n  }, {\n    key: \"size\",\n    value: function size(width, height) {\n      var p = proportionalSize(this, width, height);\n      return this.width(new SVGNumber(p.width)).height(new SVGNumber(p.height));\n    } // Set width of element\n\n  }, {\n    key: \"width\",\n    value: function width(_width) {\n      return this.attr('width', _width);\n    } // write svgjs data to the dom\n\n  }, {\n    key: \"writeDataToDom\",\n    value: function writeDataToDom() {\n      // remove previously set data\n      this.node.removeAttribute('svgjs:data');\n\n      if (Object.keys(this.dom).length) {\n        this.node.setAttribute('svgjs:data', JSON.stringify(this.dom)); // see #428\n      }\n\n      return _get(_getPrototypeOf(Element.prototype), \"writeDataToDom\", this).call(this);\n    } // Move over x-axis\n\n  }, {\n    key: \"x\",\n    value: function x(_x) {\n      return this.attr('x', _x);\n    } // Move over y-axis\n\n  }, {\n    key: \"y\",\n    value: function y(_y) {\n      return this.attr('y', _y);\n    }\n  }]);\n\n  return Element;\n}(Dom);\nextend(Element, {\n  bbox: bbox,\n  rbox: rbox,\n  point: point,\n  ctm: ctm,\n  screenCTM: screenCTM\n});\nregister(Element, 'Element');\n\nvar sugar = {\n  stroke: ['color', 'width', 'opacity', 'linecap', 'linejoin', 'miterlimit', 'dasharray', 'dashoffset'],\n  fill: ['color', 'opacity', 'rule'],\n  prefix: function prefix(t, a) {\n    return a === 'color' ? t : t + '-' + a;\n  }\n} // Add sugar for fill and stroke\n;\n['fill', 'stroke'].forEach(function (m) {\n  var extension = {};\n  var i;\n\n  extension[m] = function (o) {\n    if (typeof o === 'undefined') {\n      return this.attr(m);\n    }\n\n    if (typeof o === 'string' || o instanceof Color || Color.isRgb(o) || o instanceof Element) {\n      this.attr(m, o);\n    } else {\n      // set all attributes from sugar.fill and sugar.stroke list\n      for (i = sugar[m].length - 1; i >= 0; i--) {\n        if (o[sugar[m][i]] != null) {\n          this.attr(sugar.prefix(m, sugar[m][i]), o[sugar[m][i]]);\n        }\n      }\n    }\n\n    return this;\n  };\n\n  registerMethods(['Element', 'Runner'], extension);\n});\nregisterMethods(['Element', 'Runner'], {\n  // Let the user set the matrix directly\n  matrix: function matrix(mat, b, c, d, e, f) {\n    // Act as a getter\n    if (mat == null) {\n      return new Matrix(this);\n    } // Act as a setter, the user can pass a matrix or a set of numbers\n\n\n    return this.attr('transform', new Matrix(mat, b, c, d, e, f));\n  },\n  // Map rotation to transform\n  rotate: function rotate(angle, cx, cy) {\n    return this.transform({\n      rotate: angle,\n      ox: cx,\n      oy: cy\n    }, true);\n  },\n  // Map skew to transform\n  skew: function skew(x, y, cx, cy) {\n    return arguments.length === 1 || arguments.length === 3 ? this.transform({\n      skew: x,\n      ox: y,\n      oy: cx\n    }, true) : this.transform({\n      skew: [x, y],\n      ox: cx,\n      oy: cy\n    }, true);\n  },\n  shear: function shear(lam, cx, cy) {\n    return this.transform({\n      shear: lam,\n      ox: cx,\n      oy: cy\n    }, true);\n  },\n  // Map scale to transform\n  scale: function scale(x, y, cx, cy) {\n    return arguments.length === 1 || arguments.length === 3 ? this.transform({\n      scale: x,\n      ox: y,\n      oy: cx\n    }, true) : this.transform({\n      scale: [x, y],\n      ox: cx,\n      oy: cy\n    }, true);\n  },\n  // Map translate to transform\n  translate: function translate(x, y) {\n    return this.transform({\n      translate: [x, y]\n    }, true);\n  },\n  // Map relative translations to transform\n  relative: function relative(x, y) {\n    return this.transform({\n      relative: [x, y]\n    }, true);\n  },\n  // Map flip to transform\n  flip: function flip(direction, around) {\n    var directionString = typeof direction === 'string' ? direction : isFinite(direction) ? 'both' : 'both';\n    var origin = direction === 'both' && isFinite(around) ? [around, around] : direction === 'x' ? [around, 0] : direction === 'y' ? [0, around] : isFinite(direction) ? [direction, direction] : [0, 0];\n    return this.transform({\n      flip: directionString,\n      origin: origin\n    }, true);\n  },\n  // Opacity\n  opacity: function opacity(value) {\n    return this.attr('opacity', value);\n  }\n});\nregisterMethods('radius', {\n  // Add x and y radius\n  radius: function radius(x, y) {\n    var type = (this._element || this).type;\n    return type === 'radialGradient' || type === 'radialGradient' ? this.attr('r', new SVGNumber(x)) : this.rx(x).ry(y == null ? x : y);\n  }\n});\nregisterMethods('Path', {\n  // Get path length\n  length: function length() {\n    return this.node.getTotalLength();\n  },\n  // Get point at length\n  pointAt: function pointAt(length) {\n    return new Point(this.node.getPointAtLength(length));\n  }\n});\nregisterMethods(['Element', 'Runner'], {\n  // Set font\n  font: function font(a, v) {\n    if (_typeof(a) === 'object') {\n      for (v in a) {\n        this.font(v, a[v]);\n      }\n\n      return this;\n    }\n\n    return a === 'leading' ? this.leading(v) : a === 'anchor' ? this.attr('text-anchor', v) : a === 'size' || a === 'family' || a === 'weight' || a === 'stretch' || a === 'variant' || a === 'style' ? this.attr('font-' + a, v) : this.attr(a, v);\n  }\n});\nregisterMethods('Text', {\n  ax: function ax(x) {\n    return this.attr('x', x);\n  },\n  ay: function ay(y) {\n    return this.attr('y', y);\n  },\n  amove: function amove(x, y) {\n    return this.ax(x).ay(y);\n  }\n}); // Add events to elements\n\nvar methods$1 = ['click', 'dblclick', 'mousedown', 'mouseup', 'mouseover', 'mouseout', 'mousemove', 'mouseenter', 'mouseleave', 'touchstart', 'touchmove', 'touchleave', 'touchend', 'touchcancel'].reduce(function (last, event) {\n  // add event to Element\n  var fn = function fn(f) {\n    if (f === null) {\n      off(this, event);\n    } else {\n      on(this, event, f);\n    }\n\n    return this;\n  };\n\n  last[event] = fn;\n  return last;\n}, {});\nregisterMethods('Element', methods$1);\n\nvar nativeReverse = [].reverse;\nvar test$1 = [1, 2];\n\n// `Array.prototype.reverse` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.reverse\n// fix for Safari 12.0 bug\n// https://bugs.webkit.org/show_bug.cgi?id=188794\n_export({ target: 'Array', proto: true, forced: String(test$1) === String(test$1.reverse()) }, {\n  reverse: function reverse() {\n    // eslint-disable-next-line no-self-assign\n    if (isArray(this)) this.length = this.length;\n    return nativeReverse.call(this);\n  }\n});\n\n// `Object.defineProperties` method\n// https://tc39.github.io/ecma262/#sec-object.defineproperties\n_export({ target: 'Object', stat: true, forced: !descriptors, sham: !descriptors }, {\n  defineProperties: objectDefineProperties\n});\n\n// `Object.defineProperty` method\n// https://tc39.github.io/ecma262/#sec-object.defineproperty\n_export({ target: 'Object', stat: true, forced: !descriptors, sham: !descriptors }, {\n  defineProperty: objectDefineProperty.f\n});\n\nvar nativeGetOwnPropertyDescriptor$2 = objectGetOwnPropertyDescriptor.f;\n\n\nvar FAILS_ON_PRIMITIVES$2 = fails(function () { nativeGetOwnPropertyDescriptor$2(1); });\nvar FORCED$3 = !descriptors || FAILS_ON_PRIMITIVES$2;\n\n// `Object.getOwnPropertyDescriptor` method\n// https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor\n_export({ target: 'Object', stat: true, forced: FORCED$3, sham: !descriptors }, {\n  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(it, key) {\n    return nativeGetOwnPropertyDescriptor$2(toIndexedObject(it), key);\n  }\n});\n\n// `Object.getOwnPropertyDescriptors` method\n// https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptors\n_export({ target: 'Object', stat: true, sham: !descriptors }, {\n  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {\n    var O = toIndexedObject(object);\n    var getOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;\n    var keys = ownKeys(O);\n    var result = {};\n    var index = 0;\n    var key, descriptor;\n    while (keys.length > index) {\n      descriptor = getOwnPropertyDescriptor(O, key = keys[index++]);\n      if (descriptor !== undefined) createProperty(result, key, descriptor);\n    }\n    return result;\n  }\n});\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$1(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$1(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction untransform() {\n  return this.attr('transform', null);\n} // merge the whole transformation chain into one matrix and returns it\n\nfunction matrixify() {\n  var matrix = (this.attr('transform') || ''). // split transformations\n  split(transforms).slice(0, -1).map(function (str) {\n    // generate key => value pairs\n    var kv = str.trim().split('(');\n    return [kv[0], kv[1].split(delimiter).map(function (str) {\n      return parseFloat(str);\n    })];\n  }).reverse() // merge every transformation into one matrix\n  .reduce(function (matrix, transform) {\n    if (transform[0] === 'matrix') {\n      return matrix.lmultiply(Matrix.fromArray(transform[1]));\n    }\n\n    return matrix[transform[0]].apply(matrix, transform[1]);\n  }, new Matrix());\n  return matrix;\n} // add an element to another parent without changing the visual representation on the screen\n\nfunction toParent(parent) {\n  if (this === parent) return this;\n  var ctm = this.screenCTM();\n  var pCtm = parent.screenCTM().inverse();\n  this.addTo(parent).untransform().transform(pCtm.multiply(ctm));\n  return this;\n} // same as above with parent equals root-svg\n\nfunction toRoot() {\n  return this.toParent(this.root());\n} // Add transformations\n\nfunction transform(o, relative) {\n  // Act as a getter if no object was passed\n  if (o == null || typeof o === 'string') {\n    var decomposed = new Matrix(this).decompose();\n    return o == null ? decomposed : decomposed[o];\n  }\n\n  if (!Matrix.isMatrixLike(o)) {\n    // Set the origin according to the defined transform\n    o = _objectSpread({}, o, {\n      origin: getOrigin(o, this)\n    });\n  } // The user can pass a boolean, an Element or an Matrix or nothing\n\n\n  var cleanRelative = relative === true ? this : relative || false;\n  var result = new Matrix(cleanRelative).transform(o);\n  return this.attr('transform', result);\n}\nregisterMethods('Element', {\n  untransform: untransform,\n  matrixify: matrixify,\n  toParent: toParent,\n  toRoot: toRoot,\n  transform: transform\n});\n\nfunction rx(rx) {\n  return this.attr('rx', rx);\n} // Radius y value\n\nfunction ry(ry) {\n  return this.attr('ry', ry);\n} // Move over x-axis\n\nfunction x(x) {\n  return x == null ? this.cx() - this.rx() : this.cx(x + this.rx());\n} // Move over y-axis\n\nfunction y(y) {\n  return y == null ? this.cy() - this.ry() : this.cy(y + this.ry());\n} // Move by center over x-axis\n\nfunction cx(x) {\n  return x == null ? this.attr('cx') : this.attr('cx', x);\n} // Move by center over y-axis\n\nfunction cy(y) {\n  return y == null ? this.attr('cy') : this.attr('cy', y);\n} // Set width of element\n\nfunction width(width) {\n  return width == null ? this.rx() * 2 : this.rx(new SVGNumber(width).divide(2));\n} // Set height of element\n\nfunction height(height) {\n  return height == null ? this.ry() * 2 : this.ry(new SVGNumber(height).divide(2));\n}\n\nvar circled = ({\n\t__proto__: null,\n\trx: rx,\n\try: ry,\n\tx: x,\n\ty: y,\n\tcx: cx,\n\tcy: cy,\n\twidth: width,\n\theight: height\n});\n\nvar Shape =\n/*#__PURE__*/\nfunction (_Element) {\n  _inherits(Shape, _Element);\n\n  function Shape() {\n    _classCallCheck(this, Shape);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Shape).apply(this, arguments));\n  }\n\n  return Shape;\n}(Element);\nregister(Shape, 'Shape');\n\nvar Circle =\n/*#__PURE__*/\nfunction (_Shape) {\n  _inherits(Circle, _Shape);\n\n  function Circle(node) {\n    _classCallCheck(this, Circle);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Circle).call(this, nodeOrNew('circle', node), node));\n  }\n\n  _createClass(Circle, [{\n    key: \"radius\",\n    value: function radius(r) {\n      return this.attr('r', r);\n    } // Radius x value\n\n  }, {\n    key: \"rx\",\n    value: function rx(_rx) {\n      return this.attr('r', _rx);\n    } // Alias radius x value\n\n  }, {\n    key: \"ry\",\n    value: function ry(_ry) {\n      return this.rx(_ry);\n    }\n  }, {\n    key: \"size\",\n    value: function size(_size) {\n      return this.radius(new SVGNumber(_size).divide(2));\n    }\n  }]);\n\n  return Circle;\n}(Shape);\nextend(Circle, {\n  x: x,\n  y: y,\n  cx: cx,\n  cy: cy,\n  width: width,\n  height: height\n});\nregisterMethods({\n  Container: {\n    // Create circle element\n    circle: wrapWithAttrCheck(function (size) {\n      return this.put(new Circle()).size(size).move(0, 0);\n    })\n  }\n});\nregister(Circle, 'Circle');\n\nvar Container =\n/*#__PURE__*/\nfunction (_Element) {\n  _inherits(Container, _Element);\n\n  function Container() {\n    _classCallCheck(this, Container);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Container).apply(this, arguments));\n  }\n\n  _createClass(Container, [{\n    key: \"flatten\",\n    value: function flatten(parent) {\n      this.each(function () {\n        if (this instanceof Container) return this.flatten(parent).ungroup(parent);\n        return this.toParent(parent);\n      }); // we need this so that the root does not get removed\n\n      this.node.firstElementChild || this.remove();\n      return this;\n    }\n  }, {\n    key: \"ungroup\",\n    value: function ungroup(parent) {\n      parent = parent || this.parent();\n      this.each(function () {\n        return this.toParent(parent);\n      });\n      this.remove();\n      return this;\n    }\n  }]);\n\n  return Container;\n}(Element);\nregister(Container, 'Container');\n\nvar Defs =\n/*#__PURE__*/\nfunction (_Container) {\n  _inherits(Defs, _Container);\n\n  function Defs(node) {\n    _classCallCheck(this, Defs);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Defs).call(this, nodeOrNew('defs', node), node));\n  }\n\n  _createClass(Defs, [{\n    key: \"flatten\",\n    value: function flatten() {\n      return this;\n    }\n  }, {\n    key: \"ungroup\",\n    value: function ungroup() {\n      return this;\n    }\n  }]);\n\n  return Defs;\n}(Container);\nregister(Defs, 'Defs');\n\nvar Ellipse =\n/*#__PURE__*/\nfunction (_Shape) {\n  _inherits(Ellipse, _Shape);\n\n  function Ellipse(node) {\n    _classCallCheck(this, Ellipse);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Ellipse).call(this, nodeOrNew('ellipse', node), node));\n  }\n\n  _createClass(Ellipse, [{\n    key: \"size\",\n    value: function size(width, height) {\n      var p = proportionalSize(this, width, height);\n      return this.rx(new SVGNumber(p.width).divide(2)).ry(new SVGNumber(p.height).divide(2));\n    }\n  }]);\n\n  return Ellipse;\n}(Shape);\nextend(Ellipse, circled);\nregisterMethods('Container', {\n  // Create an ellipse\n  ellipse: wrapWithAttrCheck(function () {\n    var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : width;\n    return this.put(new Ellipse()).size(width, height).move(0, 0);\n  })\n});\nregister(Ellipse, 'Ellipse');\n\nvar Stop =\n/*#__PURE__*/\nfunction (_Element) {\n  _inherits(Stop, _Element);\n\n  function Stop(node) {\n    _classCallCheck(this, Stop);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Stop).call(this, nodeOrNew('stop', node), node));\n  } // add color stops\n\n\n  _createClass(Stop, [{\n    key: \"update\",\n    value: function update(o) {\n      if (typeof o === 'number' || o instanceof SVGNumber) {\n        o = {\n          offset: arguments[0],\n          color: arguments[1],\n          opacity: arguments[2]\n        };\n      } // set attributes\n\n\n      if (o.opacity != null) this.attr('stop-opacity', o.opacity);\n      if (o.color != null) this.attr('stop-color', o.color);\n      if (o.offset != null) this.attr('offset', new SVGNumber(o.offset));\n      return this;\n    }\n  }]);\n\n  return Stop;\n}(Element);\nregister(Stop, 'Stop');\n\nfunction from(x, y) {\n  return (this._element || this).type === 'radialGradient' ? this.attr({\n    fx: new SVGNumber(x),\n    fy: new SVGNumber(y)\n  }) : this.attr({\n    x1: new SVGNumber(x),\n    y1: new SVGNumber(y)\n  });\n}\nfunction to(x, y) {\n  return (this._element || this).type === 'radialGradient' ? this.attr({\n    cx: new SVGNumber(x),\n    cy: new SVGNumber(y)\n  }) : this.attr({\n    x2: new SVGNumber(x),\n    y2: new SVGNumber(y)\n  });\n}\n\nvar gradiented = ({\n\t__proto__: null,\n\tfrom: from,\n\tto: to\n});\n\nvar Gradient =\n/*#__PURE__*/\nfunction (_Container) {\n  _inherits(Gradient, _Container);\n\n  function Gradient(type, attrs) {\n    _classCallCheck(this, Gradient);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Gradient).call(this, nodeOrNew(type + 'Gradient', typeof type === 'string' ? null : type), attrs));\n  } // Add a color stop\n\n\n  _createClass(Gradient, [{\n    key: \"stop\",\n    value: function stop(offset, color, opacity) {\n      return this.put(new Stop()).update(offset, color, opacity);\n    } // Update gradient\n\n  }, {\n    key: \"update\",\n    value: function update(block) {\n      // remove all stops\n      this.clear(); // invoke passed block\n\n      if (typeof block === 'function') {\n        block.call(this, this);\n      }\n\n      return this;\n    } // Return the fill id\n\n  }, {\n    key: \"url\",\n    value: function url() {\n      return 'url(#' + this.id() + ')';\n    } // Alias string convertion to fill\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.url();\n    } // custom attr to handle transform\n\n  }, {\n    key: \"attr\",\n    value: function attr(a, b, c) {\n      if (a === 'transform') a = 'gradientTransform';\n      return _get(_getPrototypeOf(Gradient.prototype), \"attr\", this).call(this, a, b, c);\n    }\n  }, {\n    key: \"targets\",\n    value: function targets() {\n      return baseFind('svg [fill*=\"' + this.id() + '\"]');\n    }\n  }, {\n    key: \"bbox\",\n    value: function bbox() {\n      return new Box();\n    }\n  }]);\n\n  return Gradient;\n}(Container);\nextend(Gradient, gradiented);\nregisterMethods({\n  Container: {\n    // Create gradient element in defs\n    gradient: wrapWithAttrCheck(function (type, block) {\n      return this.defs().gradient(type, block);\n    })\n  },\n  // define gradient\n  Defs: {\n    gradient: wrapWithAttrCheck(function (type, block) {\n      return this.put(new Gradient(type)).update(block);\n    })\n  }\n});\nregister(Gradient, 'Gradient');\n\nvar Pattern =\n/*#__PURE__*/\nfunction (_Container) {\n  _inherits(Pattern, _Container);\n\n  // Initialize node\n  function Pattern(node) {\n    _classCallCheck(this, Pattern);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Pattern).call(this, nodeOrNew('pattern', node), node));\n  } // Return the fill id\n\n\n  _createClass(Pattern, [{\n    key: \"url\",\n    value: function url() {\n      return 'url(#' + this.id() + ')';\n    } // Update pattern by rebuilding\n\n  }, {\n    key: \"update\",\n    value: function update(block) {\n      // remove content\n      this.clear(); // invoke passed block\n\n      if (typeof block === 'function') {\n        block.call(this, this);\n      }\n\n      return this;\n    } // Alias string convertion to fill\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.url();\n    } // custom attr to handle transform\n\n  }, {\n    key: \"attr\",\n    value: function attr(a, b, c) {\n      if (a === 'transform') a = 'patternTransform';\n      return _get(_getPrototypeOf(Pattern.prototype), \"attr\", this).call(this, a, b, c);\n    }\n  }, {\n    key: \"targets\",\n    value: function targets() {\n      return baseFind('svg [fill*=\"' + this.id() + '\"]');\n    }\n  }, {\n    key: \"bbox\",\n    value: function bbox() {\n      return new Box();\n    }\n  }]);\n\n  return Pattern;\n}(Container);\nregisterMethods({\n  Container: {\n    // Create pattern element in defs\n    pattern: function pattern() {\n      var _this$defs;\n\n      return (_this$defs = this.defs()).pattern.apply(_this$defs, arguments);\n    }\n  },\n  Defs: {\n    pattern: wrapWithAttrCheck(function (width, height, block) {\n      return this.put(new Pattern()).update(block).attr({\n        x: 0,\n        y: 0,\n        width: width,\n        height: height,\n        patternUnits: 'userSpaceOnUse'\n      });\n    })\n  }\n});\nregister(Pattern, 'Pattern');\n\nvar Image =\n/*#__PURE__*/\nfunction (_Shape) {\n  _inherits(Image, _Shape);\n\n  function Image(node) {\n    _classCallCheck(this, Image);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Image).call(this, nodeOrNew('image', node), node));\n  } // (re)load image\n\n\n  _createClass(Image, [{\n    key: \"load\",\n    value: function load(url, callback) {\n      if (!url) return this;\n      var img = new globals.window.Image();\n      on(img, 'load', function (e) {\n        var p = this.parent(Pattern); // ensure image size\n\n        if (this.width() === 0 && this.height() === 0) {\n          this.size(img.width, img.height);\n        }\n\n        if (p instanceof Pattern) {\n          // ensure pattern size if not set\n          if (p.width() === 0 && p.height() === 0) {\n            p.size(this.width(), this.height());\n          }\n        }\n\n        if (typeof callback === 'function') {\n          callback.call(this, e);\n        }\n      }, this);\n      on(img, 'load error', function () {\n        // dont forget to unbind memory leaking events\n        off(img);\n      });\n      return this.attr('href', img.src = url, xlink);\n    }\n  }]);\n\n  return Image;\n}(Shape);\nregisterAttrHook(function (attr, val, _this) {\n  // convert image fill and stroke to patterns\n  if (attr === 'fill' || attr === 'stroke') {\n    if (isImage.test(val)) {\n      val = _this.root().defs().image(val);\n    }\n  }\n\n  if (val instanceof Image) {\n    val = _this.root().defs().pattern(0, 0, function (pattern) {\n      pattern.add(val);\n    });\n  }\n\n  return val;\n});\nregisterMethods({\n  Container: {\n    // create image element, load image and set its size\n    image: wrapWithAttrCheck(function (source, callback) {\n      return this.put(new Image()).size(0, 0).load(source, callback);\n    })\n  }\n});\nregister(Image, 'Image');\n\nvar PointArray = subClassArray('PointArray', SVGArray);\nextend(PointArray, {\n  // Convert array to string\n  toString: function toString() {\n    // convert to a poly point string\n    for (var i = 0, il = this.length, array = []; i < il; i++) {\n      array.push(this[i].join(','));\n    }\n\n    return array.join(' ');\n  },\n  // Convert array to line object\n  toLine: function toLine() {\n    return {\n      x1: this[0][0],\n      y1: this[0][1],\n      x2: this[1][0],\n      y2: this[1][1]\n    };\n  },\n  // Get morphed array at given position\n  at: function at(pos) {\n    // make sure a destination is defined\n    if (!this.destination) return this; // generate morphed point string\n\n    for (var i = 0, il = this.length, array = []; i < il; i++) {\n      array.push([this[i][0] + (this.destination[i][0] - this[i][0]) * pos, this[i][1] + (this.destination[i][1] - this[i][1]) * pos]);\n    }\n\n    return new PointArray(array);\n  },\n  // Parse point string and flat array\n  parse: function parse() {\n    var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [[0, 0]];\n    var points = []; // if it is an array\n\n    if (array instanceof Array) {\n      // and it is not flat, there is no need to parse it\n      if (array[0] instanceof Array) {\n        return array;\n      }\n    } else {\n      // Else, it is considered as a string\n      // parse points\n      array = array.trim().split(delimiter).map(parseFloat);\n    } // validate points - https://svgwg.org/svg2-draft/shapes.html#DataTypePoints\n    // Odd number of coordinates is an error. In such cases, drop the last odd coordinate.\n\n\n    if (array.length % 2 !== 0) array.pop(); // wrap points in two-tuples\n\n    for (var i = 0, len = array.length; i < len; i = i + 2) {\n      points.push([array[i], array[i + 1]]);\n    }\n\n    return points;\n  },\n  // transform points with matrix (similar to Point.transform)\n  transform: function transform(m) {\n    var points = [];\n\n    for (var i = 0; i < this.length; i++) {\n      var point = this[i]; // Perform the matrix multiplication\n\n      points.push([m.a * point[0] + m.c * point[1] + m.e, m.b * point[0] + m.d * point[1] + m.f]);\n    } // Return the required point\n\n\n    return new PointArray(points);\n  },\n  // Move point string\n  move: function move(x, y) {\n    var box = this.bbox(); // get relative offset\n\n    x -= box.x;\n    y -= box.y; // move every point\n\n    if (!isNaN(x) && !isNaN(y)) {\n      for (var i = this.length - 1; i >= 0; i--) {\n        this[i] = [this[i][0] + x, this[i][1] + y];\n      }\n    }\n\n    return this;\n  },\n  // Resize poly string\n  size: function size(width, height) {\n    var i;\n    var box = this.bbox(); // recalculate position of all points according to new size\n\n    for (i = this.length - 1; i >= 0; i--) {\n      if (box.width) this[i][0] = (this[i][0] - box.x) * width / box.width + box.x;\n      if (box.height) this[i][1] = (this[i][1] - box.y) * height / box.height + box.y;\n    }\n\n    return this;\n  },\n  // Get bounding box of points\n  bbox: function bbox() {\n    var maxX = -Infinity;\n    var maxY = -Infinity;\n    var minX = Infinity;\n    var minY = Infinity;\n    this.forEach(function (el) {\n      maxX = Math.max(el[0], maxX);\n      maxY = Math.max(el[1], maxY);\n      minX = Math.min(el[0], minX);\n      minY = Math.min(el[1], minY);\n    });\n    return {\n      x: minX,\n      y: minY,\n      width: maxX - minX,\n      height: maxY - minY\n    };\n  }\n});\n\nvar MorphArray = PointArray; // Move by left top corner over x-axis\n\nfunction x$1(x) {\n  return x == null ? this.bbox().x : this.move(x, this.bbox().y);\n} // Move by left top corner over y-axis\n\nfunction y$1(y) {\n  return y == null ? this.bbox().y : this.move(this.bbox().x, y);\n} // Set width of element\n\nfunction width$1(width) {\n  var b = this.bbox();\n  return width == null ? b.width : this.size(width, b.height);\n} // Set height of element\n\nfunction height$1(height) {\n  var b = this.bbox();\n  return height == null ? b.height : this.size(b.width, height);\n}\n\nvar pointed = ({\n\t__proto__: null,\n\tMorphArray: MorphArray,\n\tx: x$1,\n\ty: y$1,\n\twidth: width$1,\n\theight: height$1\n});\n\nvar Line =\n/*#__PURE__*/\nfunction (_Shape) {\n  _inherits(Line, _Shape);\n\n  // Initialize node\n  function Line(node) {\n    _classCallCheck(this, Line);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Line).call(this, nodeOrNew('line', node), node));\n  } // Get array\n\n\n  _createClass(Line, [{\n    key: \"array\",\n    value: function array() {\n      return new PointArray([[this.attr('x1'), this.attr('y1')], [this.attr('x2'), this.attr('y2')]]);\n    } // Overwrite native plot() method\n\n  }, {\n    key: \"plot\",\n    value: function plot(x1, y1, x2, y2) {\n      if (x1 == null) {\n        return this.array();\n      } else if (typeof y1 !== 'undefined') {\n        x1 = {\n          x1: x1,\n          y1: y1,\n          x2: x2,\n          y2: y2\n        };\n      } else {\n        x1 = new PointArray(x1).toLine();\n      }\n\n      return this.attr(x1);\n    } // Move by left top corner\n\n  }, {\n    key: \"move\",\n    value: function move(x, y) {\n      return this.attr(this.array().move(x, y).toLine());\n    } // Set element size to given width and height\n\n  }, {\n    key: \"size\",\n    value: function size(width, height) {\n      var p = proportionalSize(this, width, height);\n      return this.attr(this.array().size(p.width, p.height).toLine());\n    }\n  }]);\n\n  return Line;\n}(Shape);\nextend(Line, pointed);\nregisterMethods({\n  Container: {\n    // Create a line element\n    line: wrapWithAttrCheck(function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      // make sure plot is called as a setter\n      // x1 is not necessarily a number, it can also be an array, a string and a PointArray\n      return Line.prototype.plot.apply(this.put(new Line()), args[0] != null ? args : [0, 0, 0, 0]);\n    })\n  }\n});\nregister(Line, 'Line');\n\nvar Marker =\n/*#__PURE__*/\nfunction (_Container) {\n  _inherits(Marker, _Container);\n\n  // Initialize node\n  function Marker(node) {\n    _classCallCheck(this, Marker);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Marker).call(this, nodeOrNew('marker', node), node));\n  } // Set width of element\n\n\n  _createClass(Marker, [{\n    key: \"width\",\n    value: function width(_width) {\n      return this.attr('markerWidth', _width);\n    } // Set height of element\n\n  }, {\n    key: \"height\",\n    value: function height(_height) {\n      return this.attr('markerHeight', _height);\n    } // Set marker refX and refY\n\n  }, {\n    key: \"ref\",\n    value: function ref(x, y) {\n      return this.attr('refX', x).attr('refY', y);\n    } // Update marker\n\n  }, {\n    key: \"update\",\n    value: function update(block) {\n      // remove all content\n      this.clear(); // invoke passed block\n\n      if (typeof block === 'function') {\n        block.call(this, this);\n      }\n\n      return this;\n    } // Return the fill id\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return 'url(#' + this.id() + ')';\n    }\n  }]);\n\n  return Marker;\n}(Container);\nregisterMethods({\n  Container: {\n    marker: function marker() {\n      var _this$defs;\n\n      // Create marker element in defs\n      return (_this$defs = this.defs()).marker.apply(_this$defs, arguments);\n    }\n  },\n  Defs: {\n    // Create marker\n    marker: wrapWithAttrCheck(function (width, height, block) {\n      // Set default viewbox to match the width and height, set ref to cx and cy and set orient to auto\n      return this.put(new Marker()).size(width, height).ref(width / 2, height / 2).viewbox(0, 0, width, height).attr('orient', 'auto').update(block);\n    })\n  },\n  marker: {\n    // Create and attach markers\n    marker: function marker(_marker, width, height, block) {\n      var attr = ['marker']; // Build attribute name\n\n      if (_marker !== 'all') attr.push(_marker);\n      attr = attr.join('-'); // Set marker attribute\n\n      _marker = arguments[1] instanceof Marker ? arguments[1] : this.defs().marker(width, height, block);\n      return this.attr(attr, _marker);\n    }\n  }\n});\nregister(Marker, 'Marker');\n\nvar nativeSort = [].sort;\nvar test$2 = [1, 2, 3];\n\n// IE8-\nvar FAILS_ON_UNDEFINED = fails(function () {\n  test$2.sort(undefined);\n});\n// V8 bug\nvar FAILS_ON_NULL = fails(function () {\n  test$2.sort(null);\n});\n// Old WebKit\nvar SLOPPY_METHOD$2 = sloppyArrayMethod('sort');\n\nvar FORCED$4 = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || SLOPPY_METHOD$2;\n\n// `Array.prototype.sort` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.sort\n_export({ target: 'Array', proto: true, forced: FORCED$4 }, {\n  sort: function sort(comparefn) {\n    return comparefn === undefined\n      ? nativeSort.call(toObject(this))\n      : nativeSort.call(toObject(this), aFunction$1(comparefn));\n  }\n});\n\n/***\r\nBase Class\r\n==========\r\nThe base stepper class that will be\r\n***/\n\nfunction makeSetterGetter(k, f) {\n  return function (v) {\n    if (v == null) return this[v];\n    this[k] = v;\n    if (f) f.call(this);\n    return this;\n  };\n}\n\nvar easing = {\n  '-': function _(pos) {\n    return pos;\n  },\n  '<>': function _(pos) {\n    return -Math.cos(pos * Math.PI) / 2 + 0.5;\n  },\n  '>': function _(pos) {\n    return Math.sin(pos * Math.PI / 2);\n  },\n  '<': function _(pos) {\n    return -Math.cos(pos * Math.PI / 2) + 1;\n  },\n  bezier: function bezier(x1, y1, x2, y2) {\n    // see https://www.w3.org/TR/css-easing-1/#cubic-bezier-algo\n    return function (t) {\n      if (t < 0) {\n        if (x1 > 0) {\n          return y1 / x1 * t;\n        } else if (x2 > 0) {\n          return y2 / x2 * t;\n        } else {\n          return 0;\n        }\n      } else if (t > 1) {\n        if (x2 < 1) {\n          return (1 - y2) / (1 - x2) * t + (y2 - x2) / (1 - x2);\n        } else if (x1 < 1) {\n          return (1 - y1) / (1 - x1) * t + (y1 - x1) / (1 - x1);\n        } else {\n          return 1;\n        }\n      } else {\n        return 3 * t * Math.pow(1 - t, 2) * y1 + 3 * Math.pow(t, 2) * (1 - t) * y2 + Math.pow(t, 3);\n      }\n    };\n  },\n  // see https://www.w3.org/TR/css-easing-1/#step-timing-function-algo\n  steps: function steps(_steps) {\n    var stepPosition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'end';\n    // deal with \"jump-\" prefix\n    stepPosition = stepPosition.split('-').reverse()[0];\n    var jumps = _steps;\n\n    if (stepPosition === 'none') {\n      --jumps;\n    } else if (stepPosition === 'both') {\n      ++jumps;\n    } // The beforeFlag is essentially useless\n\n\n    return function (t) {\n      var beforeFlag = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      // Step is called currentStep in referenced url\n      var step = Math.floor(t * _steps);\n      var jumping = t * step % 1 === 0;\n\n      if (stepPosition === 'start' || stepPosition === 'both') {\n        ++step;\n      }\n\n      if (beforeFlag && jumping) {\n        --step;\n      }\n\n      if (t >= 0 && step < 0) {\n        step = 0;\n      }\n\n      if (t <= 1 && step > jumps) {\n        step = jumps;\n      }\n\n      return step / jumps;\n    };\n  }\n};\nvar Stepper =\n/*#__PURE__*/\nfunction () {\n  function Stepper() {\n    _classCallCheck(this, Stepper);\n  }\n\n  _createClass(Stepper, [{\n    key: \"done\",\n    value: function done() {\n      return false;\n    }\n  }]);\n\n  return Stepper;\n}();\n/***\r\nEasing Functions\r\n================\r\n***/\n\nvar Ease =\n/*#__PURE__*/\nfunction (_Stepper) {\n  _inherits(Ease, _Stepper);\n\n  function Ease(fn) {\n    var _this;\n\n    _classCallCheck(this, Ease);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Ease).call(this));\n    _this.ease = easing[fn || timeline.ease] || fn;\n    return _this;\n  }\n\n  _createClass(Ease, [{\n    key: \"step\",\n    value: function step(from, to, pos) {\n      if (typeof from !== 'number') {\n        return pos < 1 ? from : to;\n      }\n\n      return from + (to - from) * this.ease(pos);\n    }\n  }]);\n\n  return Ease;\n}(Stepper);\n/***\r\nController Types\r\n================\r\n***/\n\nvar Controller =\n/*#__PURE__*/\nfunction (_Stepper2) {\n  _inherits(Controller, _Stepper2);\n\n  function Controller(fn) {\n    var _this2;\n\n    _classCallCheck(this, Controller);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(Controller).call(this));\n    _this2.stepper = fn;\n    return _this2;\n  }\n\n  _createClass(Controller, [{\n    key: \"step\",\n    value: function step(current, target, dt, c) {\n      return this.stepper(current, target, dt, c);\n    }\n  }, {\n    key: \"done\",\n    value: function done(c) {\n      return c.done;\n    }\n  }]);\n\n  return Controller;\n}(Stepper);\n\nfunction recalculate() {\n  // Apply the default parameters\n  var duration = (this._duration || 500) / 1000;\n  var overshoot = this._overshoot || 0; // Calculate the PID natural response\n\n  var eps = 1e-10;\n  var pi = Math.PI;\n  var os = Math.log(overshoot / 100 + eps);\n  var zeta = -os / Math.sqrt(pi * pi + os * os);\n  var wn = 3.9 / (zeta * duration); // Calculate the Spring values\n\n  this.d = 2 * zeta * wn;\n  this.k = wn * wn;\n}\n\nvar Spring =\n/*#__PURE__*/\nfunction (_Controller) {\n  _inherits(Spring, _Controller);\n\n  function Spring(duration, overshoot) {\n    var _this3;\n\n    _classCallCheck(this, Spring);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(Spring).call(this));\n\n    _this3.duration(duration || 500).overshoot(overshoot || 0);\n\n    return _this3;\n  }\n\n  _createClass(Spring, [{\n    key: \"step\",\n    value: function step(current, target, dt, c) {\n      if (typeof current === 'string') return current;\n      c.done = dt === Infinity;\n      if (dt === Infinity) return target;\n      if (dt === 0) return current;\n      if (dt > 100) dt = 16;\n      dt /= 1000; // Get the previous velocity\n\n      var velocity = c.velocity || 0; // Apply the control to get the new position and store it\n\n      var acceleration = -this.d * velocity - this.k * (current - target);\n      var newPosition = current + velocity * dt + acceleration * dt * dt / 2; // Store the velocity\n\n      c.velocity = velocity + acceleration * dt; // Figure out if we have converged, and if so, pass the value\n\n      c.done = Math.abs(target - newPosition) + Math.abs(velocity) < 0.002;\n      return c.done ? target : newPosition;\n    }\n  }]);\n\n  return Spring;\n}(Controller);\nextend(Spring, {\n  duration: makeSetterGetter('_duration', recalculate),\n  overshoot: makeSetterGetter('_overshoot', recalculate)\n});\nvar PID =\n/*#__PURE__*/\nfunction (_Controller2) {\n  _inherits(PID, _Controller2);\n\n  function PID(p, i, d, windup) {\n    var _this4;\n\n    _classCallCheck(this, PID);\n\n    _this4 = _possibleConstructorReturn(this, _getPrototypeOf(PID).call(this));\n    p = p == null ? 0.1 : p;\n    i = i == null ? 0.01 : i;\n    d = d == null ? 0 : d;\n    windup = windup == null ? 1000 : windup;\n\n    _this4.p(p).i(i).d(d).windup(windup);\n\n    return _this4;\n  }\n\n  _createClass(PID, [{\n    key: \"step\",\n    value: function step(current, target, dt, c) {\n      if (typeof current === 'string') return current;\n      c.done = dt === Infinity;\n      if (dt === Infinity) return target;\n      if (dt === 0) return current;\n      var p = target - current;\n      var i = (c.integral || 0) + p * dt;\n      var d = (p - (c.error || 0)) / dt;\n      var windup = this.windup; // antiwindup\n\n      if (windup !== false) {\n        i = Math.max(-windup, Math.min(i, windup));\n      }\n\n      c.error = p;\n      c.integral = i;\n      c.done = Math.abs(p) < 0.001;\n      return c.done ? target : current + (this.P * p + this.I * i + this.D * d);\n    }\n  }]);\n\n  return PID;\n}(Controller);\nextend(PID, {\n  windup: makeSetterGetter('windup'),\n  p: makeSetterGetter('P'),\n  i: makeSetterGetter('I'),\n  d: makeSetterGetter('D')\n});\n\nvar PathArray = subClassArray('PathArray', SVGArray);\nfunction pathRegReplace(a, b, c, d) {\n  return c + d.replace(dots, ' .');\n}\n\nfunction arrayToString(a) {\n  for (var i = 0, il = a.length, s = ''; i < il; i++) {\n    s += a[i][0];\n\n    if (a[i][1] != null) {\n      s += a[i][1];\n\n      if (a[i][2] != null) {\n        s += ' ';\n        s += a[i][2];\n\n        if (a[i][3] != null) {\n          s += ' ';\n          s += a[i][3];\n          s += ' ';\n          s += a[i][4];\n\n          if (a[i][5] != null) {\n            s += ' ';\n            s += a[i][5];\n            s += ' ';\n            s += a[i][6];\n\n            if (a[i][7] != null) {\n              s += ' ';\n              s += a[i][7];\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return s + ' ';\n}\n\nvar pathHandlers = {\n  M: function M(c, p, p0) {\n    p.x = p0.x = c[0];\n    p.y = p0.y = c[1];\n    return ['M', p.x, p.y];\n  },\n  L: function L(c, p) {\n    p.x = c[0];\n    p.y = c[1];\n    return ['L', c[0], c[1]];\n  },\n  H: function H(c, p) {\n    p.x = c[0];\n    return ['H', c[0]];\n  },\n  V: function V(c, p) {\n    p.y = c[0];\n    return ['V', c[0]];\n  },\n  C: function C(c, p) {\n    p.x = c[4];\n    p.y = c[5];\n    return ['C', c[0], c[1], c[2], c[3], c[4], c[5]];\n  },\n  S: function S(c, p) {\n    p.x = c[2];\n    p.y = c[3];\n    return ['S', c[0], c[1], c[2], c[3]];\n  },\n  Q: function Q(c, p) {\n    p.x = c[2];\n    p.y = c[3];\n    return ['Q', c[0], c[1], c[2], c[3]];\n  },\n  T: function T(c, p) {\n    p.x = c[0];\n    p.y = c[1];\n    return ['T', c[0], c[1]];\n  },\n  Z: function Z(c, p, p0) {\n    p.x = p0.x;\n    p.y = p0.y;\n    return ['Z'];\n  },\n  A: function A(c, p) {\n    p.x = c[5];\n    p.y = c[6];\n    return ['A', c[0], c[1], c[2], c[3], c[4], c[5], c[6]];\n  }\n};\nvar mlhvqtcsaz = 'mlhvqtcsaz'.split('');\n\nfor (var i = 0, il = mlhvqtcsaz.length; i < il; ++i) {\n  pathHandlers[mlhvqtcsaz[i]] = function (i) {\n    return function (c, p, p0) {\n      if (i === 'H') c[0] = c[0] + p.x;else if (i === 'V') c[0] = c[0] + p.y;else if (i === 'A') {\n        c[5] = c[5] + p.x;\n        c[6] = c[6] + p.y;\n      } else {\n        for (var j = 0, jl = c.length; j < jl; ++j) {\n          c[j] = c[j] + (j % 2 ? p.y : p.x);\n        }\n      }\n      return pathHandlers[i](c, p, p0);\n    };\n  }(mlhvqtcsaz[i].toUpperCase());\n}\n\nextend(PathArray, {\n  // Convert array to string\n  toString: function toString() {\n    return arrayToString(this);\n  },\n  // Move path string\n  move: function move(x, y) {\n    // get bounding box of current situation\n    var box = this.bbox(); // get relative offset\n\n    x -= box.x;\n    y -= box.y;\n\n    if (!isNaN(x) && !isNaN(y)) {\n      // move every point\n      for (var l, i = this.length - 1; i >= 0; i--) {\n        l = this[i][0];\n\n        if (l === 'M' || l === 'L' || l === 'T') {\n          this[i][1] += x;\n          this[i][2] += y;\n        } else if (l === 'H') {\n          this[i][1] += x;\n        } else if (l === 'V') {\n          this[i][1] += y;\n        } else if (l === 'C' || l === 'S' || l === 'Q') {\n          this[i][1] += x;\n          this[i][2] += y;\n          this[i][3] += x;\n          this[i][4] += y;\n\n          if (l === 'C') {\n            this[i][5] += x;\n            this[i][6] += y;\n          }\n        } else if (l === 'A') {\n          this[i][6] += x;\n          this[i][7] += y;\n        }\n      }\n    }\n\n    return this;\n  },\n  // Resize path string\n  size: function size(width, height) {\n    // get bounding box of current situation\n    var box = this.bbox();\n    var i, l; // If the box width or height is 0 then we ignore\n    // transformations on the respective axis\n\n    box.width = box.width === 0 ? 1 : box.width;\n    box.height = box.height === 0 ? 1 : box.height; // recalculate position of all points according to new size\n\n    for (i = this.length - 1; i >= 0; i--) {\n      l = this[i][0];\n\n      if (l === 'M' || l === 'L' || l === 'T') {\n        this[i][1] = (this[i][1] - box.x) * width / box.width + box.x;\n        this[i][2] = (this[i][2] - box.y) * height / box.height + box.y;\n      } else if (l === 'H') {\n        this[i][1] = (this[i][1] - box.x) * width / box.width + box.x;\n      } else if (l === 'V') {\n        this[i][1] = (this[i][1] - box.y) * height / box.height + box.y;\n      } else if (l === 'C' || l === 'S' || l === 'Q') {\n        this[i][1] = (this[i][1] - box.x) * width / box.width + box.x;\n        this[i][2] = (this[i][2] - box.y) * height / box.height + box.y;\n        this[i][3] = (this[i][3] - box.x) * width / box.width + box.x;\n        this[i][4] = (this[i][4] - box.y) * height / box.height + box.y;\n\n        if (l === 'C') {\n          this[i][5] = (this[i][5] - box.x) * width / box.width + box.x;\n          this[i][6] = (this[i][6] - box.y) * height / box.height + box.y;\n        }\n      } else if (l === 'A') {\n        // resize radii\n        this[i][1] = this[i][1] * width / box.width;\n        this[i][2] = this[i][2] * height / box.height; // move position values\n\n        this[i][6] = (this[i][6] - box.x) * width / box.width + box.x;\n        this[i][7] = (this[i][7] - box.y) * height / box.height + box.y;\n      }\n    }\n\n    return this;\n  },\n  // Test if the passed path array use the same path data commands as this path array\n  equalCommands: function equalCommands(pathArray) {\n    var i, il, equalCommands;\n    pathArray = new PathArray(pathArray);\n    equalCommands = this.length === pathArray.length;\n\n    for (i = 0, il = this.length; equalCommands && i < il; i++) {\n      equalCommands = this[i][0] === pathArray[i][0];\n    }\n\n    return equalCommands;\n  },\n  // Make path array morphable\n  morph: function morph(pathArray) {\n    pathArray = new PathArray(pathArray);\n\n    if (this.equalCommands(pathArray)) {\n      this.destination = pathArray;\n    } else {\n      this.destination = null;\n    }\n\n    return this;\n  },\n  // Get morphed path array at given position\n  at: function at(pos) {\n    // make sure a destination is defined\n    if (!this.destination) return this;\n    var sourceArray = this;\n    var destinationArray = this.destination.value;\n    var array = [];\n    var pathArray = new PathArray();\n    var i, il, j, jl; // Animate has specified in the SVG spec\n    // See: https://www.w3.org/TR/SVG11/paths.html#PathElement\n\n    for (i = 0, il = sourceArray.length; i < il; i++) {\n      array[i] = [sourceArray[i][0]];\n\n      for (j = 1, jl = sourceArray[i].length; j < jl; j++) {\n        array[i][j] = sourceArray[i][j] + (destinationArray[i][j] - sourceArray[i][j]) * pos;\n      } // For the two flags of the elliptical arc command, the SVG spec say:\n      // Flags and booleans are interpolated as fractions between zero and one, with any non-zero value considered to be a value of one/true\n      // Elliptical arc command as an array followed by corresponding indexes:\n      // ['A', rx, ry, x-axis-rotation, large-arc-flag, sweep-flag, x, y]\n      //   0    1   2        3                 4             5      6  7\n\n\n      if (array[i][0] === 'A') {\n        array[i][4] = +(array[i][4] !== 0);\n        array[i][5] = +(array[i][5] !== 0);\n      }\n    } // Directly modify the value of a path array, this is done this way for performance\n\n\n    pathArray.value = array;\n    return pathArray;\n  },\n  // Absolutize and parse path to array\n  parse: function parse() {\n    var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [['M', 0, 0]];\n    // if it's already a patharray, no need to parse it\n    if (array instanceof PathArray) return array; // prepare for parsing\n\n    var s;\n    var paramCnt = {\n      M: 2,\n      L: 2,\n      H: 1,\n      V: 1,\n      C: 6,\n      S: 4,\n      Q: 4,\n      T: 2,\n      A: 7,\n      Z: 0\n    };\n\n    if (typeof array === 'string') {\n      array = array.replace(numbersWithDots, pathRegReplace) // convert 45.123.123 to 45.123 .123\n      .replace(pathLetters, ' $& ') // put some room between letters and numbers\n      .replace(hyphen, '$1 -') // add space before hyphen\n      .trim() // trim\n      .split(delimiter); // split into array\n    } else {\n      array = array.reduce(function (prev, curr) {\n        return [].concat.call(prev, curr);\n      }, []);\n    } // array now is an array containing all parts of a path e.g. ['M', '0', '0', 'L', '30', '30' ...]\n\n\n    var result = [];\n    var p = new Point();\n    var p0 = new Point();\n    var index = 0;\n    var len = array.length;\n\n    do {\n      // Test if we have a path letter\n      if (isPathLetter.test(array[index])) {\n        s = array[index];\n        ++index; // If last letter was a move command and we got no new, it defaults to [L]ine\n      } else if (s === 'M') {\n        s = 'L';\n      } else if (s === 'm') {\n        s = 'l';\n      }\n\n      result.push(pathHandlers[s].call(null, array.slice(index, index = index + paramCnt[s.toUpperCase()]).map(parseFloat), p, p0));\n    } while (len > index);\n\n    return result;\n  },\n  // Get bounding box of path\n  bbox: function bbox() {\n    parser().path.setAttribute('d', this.toString());\n    return parser.nodes.path.getBBox();\n  }\n});\n\nvar Morphable =\n/*#__PURE__*/\nfunction () {\n  function Morphable(stepper) {\n    _classCallCheck(this, Morphable);\n\n    this._stepper = stepper || new Ease('-');\n    this._from = null;\n    this._to = null;\n    this._type = null;\n    this._context = null;\n    this._morphObj = null;\n  }\n\n  _createClass(Morphable, [{\n    key: \"from\",\n    value: function from(val) {\n      if (val == null) {\n        return this._from;\n      }\n\n      this._from = this._set(val);\n      return this;\n    }\n  }, {\n    key: \"to\",\n    value: function to(val) {\n      if (val == null) {\n        return this._to;\n      }\n\n      this._to = this._set(val);\n      return this;\n    }\n  }, {\n    key: \"type\",\n    value: function type(_type) {\n      // getter\n      if (_type == null) {\n        return this._type;\n      } // setter\n\n\n      this._type = _type;\n      return this;\n    }\n  }, {\n    key: \"_set\",\n    value: function _set(value) {\n      if (!this._type) {\n        var type = _typeof(value);\n\n        if (type === 'number') {\n          this.type(SVGNumber);\n        } else if (type === 'string') {\n          if (Color.isColor(value)) {\n            this.type(Color);\n          } else if (delimiter.test(value)) {\n            this.type(pathLetters.test(value) ? PathArray : SVGArray);\n          } else if (numberAndUnit.test(value)) {\n            this.type(SVGNumber);\n          } else {\n            this.type(NonMorphable);\n          }\n        } else if (morphableTypes.indexOf(value.constructor) > -1) {\n          this.type(value.constructor);\n        } else if (Array.isArray(value)) {\n          this.type(SVGArray);\n        } else if (type === 'object') {\n          this.type(ObjectBag);\n        } else {\n          this.type(NonMorphable);\n        }\n      }\n\n      var result = new this._type(value);\n\n      if (this._type === Color) {\n        result = this._to ? result[this._to[4]]() : this._from ? result[this._from[4]]() : result;\n      }\n\n      result = result.toArray();\n      this._morphObj = this._morphObj || new this._type();\n      this._context = this._context || Array.apply(null, Array(result.length)).map(Object).map(function (o) {\n        o.done = true;\n        return o;\n      });\n      return result;\n    }\n  }, {\n    key: \"stepper\",\n    value: function stepper(_stepper) {\n      if (_stepper == null) return this._stepper;\n      this._stepper = _stepper;\n      return this;\n    }\n  }, {\n    key: \"done\",\n    value: function done() {\n      var complete = this._context.map(this._stepper.done).reduce(function (last, curr) {\n        return last && curr;\n      }, true);\n\n      return complete;\n    }\n  }, {\n    key: \"at\",\n    value: function at(pos) {\n      var _this = this;\n\n      return this._morphObj.fromArray(this._from.map(function (i, index) {\n        return _this._stepper.step(i, _this._to[index], pos, _this._context[index], _this._context);\n      }));\n    }\n  }]);\n\n  return Morphable;\n}();\nvar NonMorphable =\n/*#__PURE__*/\nfunction () {\n  function NonMorphable() {\n    _classCallCheck(this, NonMorphable);\n\n    this.init.apply(this, arguments);\n  }\n\n  _createClass(NonMorphable, [{\n    key: \"init\",\n    value: function init(val) {\n      val = Array.isArray(val) ? val[0] : val;\n      this.value = val;\n      return this;\n    }\n  }, {\n    key: \"valueOf\",\n    value: function valueOf() {\n      return this.value;\n    }\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      return [this.value];\n    }\n  }]);\n\n  return NonMorphable;\n}();\nvar TransformBag =\n/*#__PURE__*/\nfunction () {\n  function TransformBag() {\n    _classCallCheck(this, TransformBag);\n\n    this.init.apply(this, arguments);\n  }\n\n  _createClass(TransformBag, [{\n    key: \"init\",\n    value: function init(obj) {\n      if (Array.isArray(obj)) {\n        obj = {\n          scaleX: obj[0],\n          scaleY: obj[1],\n          shear: obj[2],\n          rotate: obj[3],\n          translateX: obj[4],\n          translateY: obj[5],\n          originX: obj[6],\n          originY: obj[7]\n        };\n      }\n\n      Object.assign(this, TransformBag.defaults, obj);\n      return this;\n    }\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      var v = this;\n      return [v.scaleX, v.scaleY, v.shear, v.rotate, v.translateX, v.translateY, v.originX, v.originY];\n    }\n  }]);\n\n  return TransformBag;\n}();\nTransformBag.defaults = {\n  scaleX: 1,\n  scaleY: 1,\n  shear: 0,\n  rotate: 0,\n  translateX: 0,\n  translateY: 0,\n  originX: 0,\n  originY: 0\n};\nvar ObjectBag =\n/*#__PURE__*/\nfunction () {\n  function ObjectBag() {\n    _classCallCheck(this, ObjectBag);\n\n    this.init.apply(this, arguments);\n  }\n\n  _createClass(ObjectBag, [{\n    key: \"init\",\n    value: function init(objOrArr) {\n      this.values = [];\n\n      if (Array.isArray(objOrArr)) {\n        this.values = objOrArr;\n        return;\n      }\n\n      objOrArr = objOrArr || {};\n      var entries = [];\n\n      for (var i in objOrArr) {\n        entries.push([i, objOrArr[i]]);\n      }\n\n      entries.sort(function (a, b) {\n        return a[0] - b[0];\n      });\n      this.values = entries.reduce(function (last, curr) {\n        return last.concat(curr);\n      }, []);\n      return this;\n    }\n  }, {\n    key: \"valueOf\",\n    value: function valueOf() {\n      var obj = {};\n      var arr = this.values;\n\n      for (var i = 0, len = arr.length; i < len; i += 2) {\n        obj[arr[i]] = arr[i + 1];\n      }\n\n      return obj;\n    }\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      return this.values;\n    }\n  }]);\n\n  return ObjectBag;\n}();\nvar morphableTypes = [NonMorphable, TransformBag, ObjectBag];\nfunction registerMorphableType() {\n  var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  morphableTypes.push.apply(morphableTypes, _toConsumableArray([].concat(type)));\n}\nfunction makeMorphable() {\n  extend(morphableTypes, {\n    to: function to(val) {\n      return new Morphable().type(this.constructor).from(this.valueOf()).to(val);\n    },\n    fromArray: function fromArray(arr) {\n      this.init(arr);\n      return this;\n    }\n  });\n}\n\nvar Path =\n/*#__PURE__*/\nfunction (_Shape) {\n  _inherits(Path, _Shape);\n\n  // Initialize node\n  function Path(node) {\n    _classCallCheck(this, Path);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Path).call(this, nodeOrNew('path', node), node));\n  } // Get array\n\n\n  _createClass(Path, [{\n    key: \"array\",\n    value: function array() {\n      return this._array || (this._array = new PathArray(this.attr('d')));\n    } // Plot new path\n\n  }, {\n    key: \"plot\",\n    value: function plot(d) {\n      return d == null ? this.array() : this.clear().attr('d', typeof d === 'string' ? d : this._array = new PathArray(d));\n    } // Clear array cache\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      delete this._array;\n      return this;\n    } // Move by left top corner\n\n  }, {\n    key: \"move\",\n    value: function move(x, y) {\n      return this.attr('d', this.array().move(x, y));\n    } // Move by left top corner over x-axis\n\n  }, {\n    key: \"x\",\n    value: function x(_x) {\n      return _x == null ? this.bbox().x : this.move(_x, this.bbox().y);\n    } // Move by left top corner over y-axis\n\n  }, {\n    key: \"y\",\n    value: function y(_y) {\n      return _y == null ? this.bbox().y : this.move(this.bbox().x, _y);\n    } // Set element size to given width and height\n\n  }, {\n    key: \"size\",\n    value: function size(width, height) {\n      var p = proportionalSize(this, width, height);\n      return this.attr('d', this.array().size(p.width, p.height));\n    } // Set width of element\n\n  }, {\n    key: \"width\",\n    value: function width(_width) {\n      return _width == null ? this.bbox().width : this.size(_width, this.bbox().height);\n    } // Set height of element\n\n  }, {\n    key: \"height\",\n    value: function height(_height) {\n      return _height == null ? this.bbox().height : this.size(this.bbox().width, _height);\n    }\n  }, {\n    key: \"targets\",\n    value: function targets() {\n      return baseFind('svg textpath [href*=\"' + this.id() + '\"]');\n    }\n  }]);\n\n  return Path;\n}(Shape); // Define morphable array\nPath.prototype.MorphArray = PathArray; // Add parent method\n\nregisterMethods({\n  Container: {\n    // Create a wrapped path element\n    path: wrapWithAttrCheck(function (d) {\n      // make sure plot is called as a setter\n      return this.put(new Path()).plot(d || new PathArray());\n    })\n  }\n});\nregister(Path, 'Path');\n\nfunction array() {\n  return this._array || (this._array = new PointArray(this.attr('points')));\n} // Plot new path\n\nfunction plot(p) {\n  return p == null ? this.array() : this.clear().attr('points', typeof p === 'string' ? p : this._array = new PointArray(p));\n} // Clear array cache\n\nfunction clear() {\n  delete this._array;\n  return this;\n} // Move by left top corner\n\nfunction move(x, y) {\n  return this.attr('points', this.array().move(x, y));\n} // Set element size to given width and height\n\nfunction size(width, height) {\n  var p = proportionalSize(this, width, height);\n  return this.attr('points', this.array().size(p.width, p.height));\n}\n\nvar poly = ({\n\t__proto__: null,\n\tarray: array,\n\tplot: plot,\n\tclear: clear,\n\tmove: move,\n\tsize: size\n});\n\nvar Polygon =\n/*#__PURE__*/\nfunction (_Shape) {\n  _inherits(Polygon, _Shape);\n\n  // Initialize node\n  function Polygon(node) {\n    _classCallCheck(this, Polygon);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Polygon).call(this, nodeOrNew('polygon', node), node));\n  }\n\n  return Polygon;\n}(Shape);\nregisterMethods({\n  Container: {\n    // Create a wrapped polygon element\n    polygon: wrapWithAttrCheck(function (p) {\n      // make sure plot is called as a setter\n      return this.put(new Polygon()).plot(p || new PointArray());\n    })\n  }\n});\nextend(Polygon, pointed);\nextend(Polygon, poly);\nregister(Polygon, 'Polygon');\n\nvar Polyline =\n/*#__PURE__*/\nfunction (_Shape) {\n  _inherits(Polyline, _Shape);\n\n  // Initialize node\n  function Polyline(node) {\n    _classCallCheck(this, Polyline);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Polyline).call(this, nodeOrNew('polyline', node), node));\n  }\n\n  return Polyline;\n}(Shape);\nregisterMethods({\n  Container: {\n    // Create a wrapped polygon element\n    polyline: wrapWithAttrCheck(function (p) {\n      // make sure plot is called as a setter\n      return this.put(new Polyline()).plot(p || new PointArray());\n    })\n  }\n});\nextend(Polyline, pointed);\nextend(Polyline, poly);\nregister(Polyline, 'Polyline');\n\nvar Rect =\n/*#__PURE__*/\nfunction (_Shape) {\n  _inherits(Rect, _Shape);\n\n  // Initialize node\n  function Rect(node) {\n    _classCallCheck(this, Rect);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Rect).call(this, nodeOrNew('rect', node), node));\n  }\n\n  return Rect;\n}(Shape);\nextend(Rect, {\n  rx: rx,\n  ry: ry\n});\nregisterMethods({\n  Container: {\n    // Create a rect element\n    rect: wrapWithAttrCheck(function (width, height) {\n      return this.put(new Rect()).size(width, height);\n    })\n  }\n});\nregister(Rect, 'Rect');\n\nvar max$3 = Math.max;\nvar min$4 = Math.min;\nvar MAX_SAFE_INTEGER$1 = 0x1FFFFFFFFFFFFF;\nvar MAXIMUM_ALLOWED_LENGTH_EXCEEDED = 'Maximum allowed length exceeded';\n\n// `Array.prototype.splice` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.splice\n// with adding support of @@species\n_export({ target: 'Array', proto: true, forced: !arrayMethodHasSpeciesSupport('splice') }, {\n  splice: function splice(start, deleteCount /* , ...items */) {\n    var O = toObject(this);\n    var len = toLength(O.length);\n    var actualStart = toAbsoluteIndex(start, len);\n    var argumentsLength = arguments.length;\n    var insertCount, actualDeleteCount, A, k, from, to;\n    if (argumentsLength === 0) {\n      insertCount = actualDeleteCount = 0;\n    } else if (argumentsLength === 1) {\n      insertCount = 0;\n      actualDeleteCount = len - actualStart;\n    } else {\n      insertCount = argumentsLength - 2;\n      actualDeleteCount = min$4(max$3(toInteger(deleteCount), 0), len - actualStart);\n    }\n    if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER$1) {\n      throw TypeError(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);\n    }\n    A = arraySpeciesCreate(O, actualDeleteCount);\n    for (k = 0; k < actualDeleteCount; k++) {\n      from = actualStart + k;\n      if (from in O) createProperty(A, k, O[from]);\n    }\n    A.length = actualDeleteCount;\n    if (insertCount < actualDeleteCount) {\n      for (k = actualStart; k < len - actualDeleteCount; k++) {\n        from = k + actualDeleteCount;\n        to = k + insertCount;\n        if (from in O) O[to] = O[from];\n        else delete O[to];\n      }\n      for (k = len; k > len - actualDeleteCount + insertCount; k--) delete O[k - 1];\n    } else if (insertCount > actualDeleteCount) {\n      for (k = len - actualDeleteCount; k > actualStart; k--) {\n        from = k + actualDeleteCount - 1;\n        to = k + insertCount - 1;\n        if (from in O) O[to] = O[from];\n        else delete O[to];\n      }\n    }\n    for (k = 0; k < insertCount; k++) {\n      O[k + actualStart] = arguments[k + 2];\n    }\n    O.length = len - actualDeleteCount + insertCount;\n    return A;\n  }\n});\n\nvar Queue =\n/*#__PURE__*/\nfunction () {\n  function Queue() {\n    _classCallCheck(this, Queue);\n\n    this._first = null;\n    this._last = null;\n  }\n\n  _createClass(Queue, [{\n    key: \"push\",\n    value: function push(value) {\n      // An item stores an id and the provided value\n      var item = value.next ? value : {\n        value: value,\n        next: null,\n        prev: null\n      }; // Deal with the queue being empty or populated\n\n      if (this._last) {\n        item.prev = this._last;\n        this._last.next = item;\n        this._last = item;\n      } else {\n        this._last = item;\n        this._first = item;\n      } // Return the current item\n\n\n      return item;\n    }\n  }, {\n    key: \"shift\",\n    value: function shift() {\n      // Check if we have a value\n      var remove = this._first;\n      if (!remove) return null; // If we do, remove it and relink things\n\n      this._first = remove.next;\n      if (this._first) this._first.prev = null;\n      this._last = this._first ? this._last : null;\n      return remove.value;\n    } // Shows us the first item in the list\n\n  }, {\n    key: \"first\",\n    value: function first() {\n      return this._first && this._first.value;\n    } // Shows us the last item in the list\n\n  }, {\n    key: \"last\",\n    value: function last() {\n      return this._last && this._last.value;\n    } // Removes the item that was returned from the push\n\n  }, {\n    key: \"remove\",\n    value: function remove(item) {\n      // Relink the previous item\n      if (item.prev) item.prev.next = item.next;\n      if (item.next) item.next.prev = item.prev;\n      if (item === this._last) this._last = item.prev;\n      if (item === this._first) this._first = item.next; // Invalidate item\n\n      item.prev = null;\n      item.next = null;\n    }\n  }]);\n\n  return Queue;\n}();\n\nvar Animator = {\n  nextDraw: null,\n  frames: new Queue(),\n  timeouts: new Queue(),\n  immediates: new Queue(),\n  timer: function timer() {\n    return globals.window.performance || globals.window.Date;\n  },\n  transforms: [],\n  frame: function frame(fn) {\n    // Store the node\n    var node = Animator.frames.push({\n      run: fn\n    }); // Request an animation frame if we don't have one\n\n    if (Animator.nextDraw === null) {\n      Animator.nextDraw = globals.window.requestAnimationFrame(Animator._draw);\n    } // Return the node so we can remove it easily\n\n\n    return node;\n  },\n  timeout: function timeout(fn, delay) {\n    delay = delay || 0; // Work out when the event should fire\n\n    var time = Animator.timer().now() + delay; // Add the timeout to the end of the queue\n\n    var node = Animator.timeouts.push({\n      run: fn,\n      time: time\n    }); // Request another animation frame if we need one\n\n    if (Animator.nextDraw === null) {\n      Animator.nextDraw = globals.window.requestAnimationFrame(Animator._draw);\n    }\n\n    return node;\n  },\n  immediate: function immediate(fn) {\n    // Add the immediate fn to the end of the queue\n    var node = Animator.immediates.push(fn); // Request another animation frame if we need one\n\n    if (Animator.nextDraw === null) {\n      Animator.nextDraw = globals.window.requestAnimationFrame(Animator._draw);\n    }\n\n    return node;\n  },\n  cancelFrame: function cancelFrame(node) {\n    node != null && Animator.frames.remove(node);\n  },\n  clearTimeout: function clearTimeout(node) {\n    node != null && Animator.timeouts.remove(node);\n  },\n  cancelImmediate: function cancelImmediate(node) {\n    node != null && Animator.immediates.remove(node);\n  },\n  _draw: function _draw(now) {\n    // Run all the timeouts we can run, if they are not ready yet, add them\n    // to the end of the queue immediately! (bad timeouts!!! [sarcasm])\n    var nextTimeout = null;\n    var lastTimeout = Animator.timeouts.last();\n\n    while (nextTimeout = Animator.timeouts.shift()) {\n      // Run the timeout if its time, or push it to the end\n      if (now >= nextTimeout.time) {\n        nextTimeout.run();\n      } else {\n        Animator.timeouts.push(nextTimeout);\n      } // If we hit the last item, we should stop shifting out more items\n\n\n      if (nextTimeout === lastTimeout) break;\n    } // Run all of the animation frames\n\n\n    var nextFrame = null;\n    var lastFrame = Animator.frames.last();\n\n    while (nextFrame !== lastFrame && (nextFrame = Animator.frames.shift())) {\n      nextFrame.run(now);\n    }\n\n    var nextImmediate = null;\n\n    while (nextImmediate = Animator.immediates.shift()) {\n      nextImmediate();\n    } // If we have remaining timeouts or frames, draw until we don't anymore\n\n\n    Animator.nextDraw = Animator.timeouts.first() || Animator.frames.first() ? globals.window.requestAnimationFrame(Animator._draw) : null;\n  }\n};\n\nvar makeSchedule = function makeSchedule(runnerInfo) {\n  var start = runnerInfo.start;\n  var duration = runnerInfo.runner.duration();\n  var end = start + duration;\n  return {\n    start: start,\n    duration: duration,\n    end: end,\n    runner: runnerInfo.runner\n  };\n};\n\nvar defaultSource = function defaultSource() {\n  var w = globals.window;\n  return (w.performance || w.Date).now();\n};\n\nvar Timeline =\n/*#__PURE__*/\nfunction (_EventTarget) {\n  _inherits(Timeline, _EventTarget);\n\n  // Construct a new timeline on the given element\n  function Timeline() {\n    var _this;\n\n    var timeSource = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultSource;\n\n    _classCallCheck(this, Timeline);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Timeline).call(this));\n    _this._timeSource = timeSource; // Store the timing variables\n\n    _this._startTime = 0;\n    _this._speed = 1.0; // Determines how long a runner is hold in memory. Can be a dt or true/false\n\n    _this._persist = 0; // Keep track of the running animations and their starting parameters\n\n    _this._nextFrame = null;\n    _this._paused = true;\n    _this._runners = [];\n    _this._runnerIds = [];\n    _this._lastRunnerId = -1;\n    _this._time = 0;\n    _this._lastSourceTime = 0;\n    _this._lastStepTime = 0; // Make sure that step is always called in class context\n\n    _this._step = _this._stepFn.bind(_assertThisInitialized(_this), false);\n    _this._stepImmediate = _this._stepFn.bind(_assertThisInitialized(_this), true);\n    return _this;\n  } // schedules a runner on the timeline\n\n\n  _createClass(Timeline, [{\n    key: \"schedule\",\n    value: function schedule(runner, delay, when) {\n      if (runner == null) {\n        return this._runners.map(makeSchedule);\n      } // The start time for the next animation can either be given explicitly,\n      // derived from the current timeline time or it can be relative to the\n      // last start time to chain animations direclty\n\n\n      var absoluteStartTime = 0;\n      var endTime = this.getEndTime();\n      delay = delay || 0; // Work out when to start the animation\n\n      if (when == null || when === 'last' || when === 'after') {\n        // Take the last time and increment\n        absoluteStartTime = endTime;\n      } else if (when === 'absolute' || when === 'start') {\n        absoluteStartTime = delay;\n        delay = 0;\n      } else if (when === 'now') {\n        absoluteStartTime = this._time;\n      } else if (when === 'relative') {\n        var _runnerInfo = this._runners[runner.id];\n\n        if (_runnerInfo) {\n          absoluteStartTime = _runnerInfo.start + delay;\n          delay = 0;\n        }\n      } else {\n        throw new Error('Invalid value for the \"when\" parameter');\n      } // Manage runner\n\n\n      runner.unschedule();\n      runner.timeline(this);\n      var persist = runner.persist();\n      var runnerInfo = {\n        persist: persist === null ? this._persist : persist,\n        start: absoluteStartTime + delay,\n        runner: runner\n      };\n      this._lastRunnerId = runner.id;\n\n      this._runners.push(runnerInfo);\n\n      this._runners.sort(function (a, b) {\n        return a.start - b.start;\n      });\n\n      this._runnerIds = this._runners.map(function (info) {\n        return info.runner.id;\n      });\n\n      this.updateTime()._continue();\n\n      return this;\n    } // Remove the runner from this timeline\n\n  }, {\n    key: \"unschedule\",\n    value: function unschedule(runner) {\n      var index = this._runnerIds.indexOf(runner.id);\n\n      if (index < 0) return this;\n\n      this._runners.splice(index, 1);\n\n      this._runnerIds.splice(index, 1);\n\n      runner.timeline(null);\n      return this;\n    } // Calculates the end of the timeline\n\n  }, {\n    key: \"getEndTime\",\n    value: function getEndTime() {\n      var lastRunnerInfo = this._runners[this._runnerIds.indexOf(this._lastRunnerId)];\n\n      var lastDuration = lastRunnerInfo ? lastRunnerInfo.runner.duration() : 0;\n      var lastStartTime = lastRunnerInfo ? lastRunnerInfo.start : 0;\n      return lastStartTime + lastDuration;\n    }\n  }, {\n    key: \"getEndTimeOfTimeline\",\n    value: function getEndTimeOfTimeline() {\n      var lastEndTime = 0;\n\n      for (var i = 0; i < this._runners.length; i++) {\n        var runnerInfo = this._runners[i];\n        var duration = runnerInfo ? runnerInfo.runner.duration() : 0;\n        var startTime = runnerInfo ? runnerInfo.start : 0;\n        var endTime = startTime + duration;\n\n        if (endTime > lastEndTime) {\n          lastEndTime = endTime;\n        }\n      }\n\n      return lastEndTime;\n    } // Makes sure, that after pausing the time doesn't jump\n\n  }, {\n    key: \"updateTime\",\n    value: function updateTime() {\n      if (!this.active()) {\n        this._lastSourceTime = this._timeSource();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"play\",\n    value: function play() {\n      // Now make sure we are not paused and continue the animation\n      this._paused = false;\n      return this.updateTime()._continue();\n    }\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      this._paused = true;\n      return this._continue();\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      // Go to start and pause\n      this.time(0);\n      return this.pause();\n    }\n  }, {\n    key: \"finish\",\n    value: function finish() {\n      // Go to end and pause\n      this.time(this.getEndTimeOfTimeline() + 1);\n      return this.pause();\n    }\n  }, {\n    key: \"speed\",\n    value: function speed(_speed) {\n      if (_speed == null) return this._speed;\n      this._speed = _speed;\n      return this;\n    }\n  }, {\n    key: \"reverse\",\n    value: function reverse(yes) {\n      var currentSpeed = this.speed();\n      if (yes == null) return this.speed(-currentSpeed);\n      var positive = Math.abs(currentSpeed);\n      return this.speed(yes ? positive : -positive);\n    }\n  }, {\n    key: \"seek\",\n    value: function seek(dt) {\n      return this.time(this._time + dt);\n    }\n  }, {\n    key: \"time\",\n    value: function time(_time) {\n      if (_time == null) return this._time;\n      this._time = _time;\n      return this._continue(true);\n    }\n  }, {\n    key: \"persist\",\n    value: function persist(dtOrForever) {\n      if (dtOrForever == null) return this._persist;\n      this._persist = dtOrForever;\n      return this;\n    }\n  }, {\n    key: \"source\",\n    value: function source(fn) {\n      if (fn == null) return this._timeSource;\n      this._timeSource = fn;\n      return this;\n    }\n  }, {\n    key: \"_stepFn\",\n    value: function _stepFn() {\n      var immediateStep = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      // Get the time delta from the last time and update the time\n      var time = this._timeSource();\n\n      var dtSource = time - this._lastSourceTime;\n      if (immediateStep) dtSource = 0;\n      var dtTime = this._speed * dtSource + (this._time - this._lastStepTime);\n      this._lastSourceTime = time; // Only update the time if we use the timeSource.\n      // Otherwise use the current time\n\n      if (!immediateStep) {\n        // Update the time\n        this._time += dtTime;\n        this._time = this._time < 0 ? 0 : this._time;\n      }\n\n      this._lastStepTime = this._time;\n      this.fire('time', this._time); // This is for the case that the timeline was seeked so that the time\n      // is now before the startTime of the runner. Thats why we need to set\n      // the runner to position 0\n      // FIXME:\n      // However, reseting in insertion order leads to bugs. Considering the case,\n      // where 2 runners change the same attriute but in different times,\n      // reseting both of them will lead to the case where the later defined\n      // runner always wins the reset even if the other runner started earlier\n      // and therefore should win the attribute battle\n      // this can be solved by reseting them backwards\n\n      for (var k = this._runners.length; k--;) {\n        // Get and run the current runner and ignore it if its inactive\n        var runnerInfo = this._runners[k];\n        var runner = runnerInfo.runner; // Make sure that we give the actual difference\n        // between runner start time and now\n\n        var dtToStart = this._time - runnerInfo.start; // Dont run runner if not started yet\n        // and try to reset it\n\n        if (dtToStart <= 0) {\n          runner.reset();\n        }\n      } // Run all of the runners directly\n\n\n      var runnersLeft = false;\n\n      for (var i = 0, len = this._runners.length; i < len; i++) {\n        // Get and run the current runner and ignore it if its inactive\n        var _runnerInfo2 = this._runners[i];\n        var _runner = _runnerInfo2.runner;\n        var dt = dtTime; // Make sure that we give the actual difference\n        // between runner start time and now\n\n        var _dtToStart = this._time - _runnerInfo2.start; // Dont run runner if not started yet\n\n\n        if (_dtToStart <= 0) {\n          runnersLeft = true;\n          continue;\n        } else if (_dtToStart < dt) {\n          // Adjust dt to make sure that animation is on point\n          dt = _dtToStart;\n        }\n\n        if (!_runner.active()) continue; // If this runner is still going, signal that we need another animation\n        // frame, otherwise, remove the completed runner\n\n        var finished = _runner.step(dt).done;\n\n        if (!finished) {\n          runnersLeft = true; // continue\n        } else if (_runnerInfo2.persist !== true) {\n          // runner is finished. And runner might get removed\n          var endTime = _runner.duration() - _runner.time() + this._time;\n\n          if (endTime + _runnerInfo2.persist < this._time) {\n            // Delete runner and correct index\n            _runner.unschedule();\n\n            --i;\n            --len;\n          }\n        }\n      } // Basically: we continue when there are runners right from us in time\n      // when --\x3e, and when runners are left from us when <--\n\n\n      if (runnersLeft && !(this._speed < 0 && this._time === 0) || this._runnerIds.length && this._speed < 0 && this._time > 0) {\n        this._continue();\n      } else {\n        this.pause();\n        this.fire('finished');\n      }\n\n      return this;\n    } // Checks if we are running and continues the animation\n\n  }, {\n    key: \"_continue\",\n    value: function _continue() {\n      var immediateStep = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      Animator.cancelFrame(this._nextFrame);\n      this._nextFrame = null;\n      if (immediateStep) return this._stepImmediate();\n      if (this._paused) return this;\n      this._nextFrame = Animator.frame(this._step);\n      return this;\n    }\n  }, {\n    key: \"active\",\n    value: function active() {\n      return !!this._nextFrame;\n    }\n  }]);\n\n  return Timeline;\n}(EventTarget);\nregisterMethods({\n  Element: {\n    timeline: function timeline(_timeline) {\n      if (_timeline == null) {\n        this._timeline = this._timeline || new Timeline();\n        return this._timeline;\n      } else {\n        this._timeline = _timeline;\n        return this;\n      }\n    }\n  }\n});\n\nfunction ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$2(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$2(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar Runner =\n/*#__PURE__*/\nfunction (_EventTarget) {\n  _inherits(Runner, _EventTarget);\n\n  function Runner(options) {\n    var _this;\n\n    _classCallCheck(this, Runner);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Runner).call(this)); // Store a unique id on the runner, so that we can identify it later\n\n    _this.id = Runner.id++; // Ensure a default value\n\n    options = options == null ? timeline.duration : options; // Ensure that we get a controller\n\n    options = typeof options === 'function' ? new Controller(options) : options; // Declare all of the variables\n\n    _this._element = null;\n    _this._timeline = null;\n    _this.done = false;\n    _this._queue = []; // Work out the stepper and the duration\n\n    _this._duration = typeof options === 'number' && options;\n    _this._isDeclarative = options instanceof Controller;\n    _this._stepper = _this._isDeclarative ? options : new Ease(); // We copy the current values from the timeline because they can change\n\n    _this._history = {}; // Store the state of the runner\n\n    _this.enabled = true;\n    _this._time = 0;\n    _this._lastTime = 0; // At creation, the runner is in reseted state\n\n    _this._reseted = true; // Save transforms applied to this runner\n\n    _this.transforms = new Matrix();\n    _this.transformId = 1; // Looping variables\n\n    _this._haveReversed = false;\n    _this._reverse = false;\n    _this._loopsDone = 0;\n    _this._swing = false;\n    _this._wait = 0;\n    _this._times = 1;\n    _this._frameId = null; // Stores how long a runner is stored after beeing done\n\n    _this._persist = _this._isDeclarative ? true : null;\n    return _this;\n  }\n  /*\r\n  Runner Definitions\r\n  ==================\r\n  These methods help us define the runtime behaviour of the Runner or they\r\n  help us make new runners from the current runner\r\n  */\n\n\n  _createClass(Runner, [{\n    key: \"element\",\n    value: function element(_element) {\n      if (_element == null) return this._element;\n      this._element = _element;\n\n      _element._prepareRunner();\n\n      return this;\n    }\n  }, {\n    key: \"timeline\",\n    value: function timeline(_timeline) {\n      // check explicitly for undefined so we can set the timeline to null\n      if (typeof _timeline === 'undefined') return this._timeline;\n      this._timeline = _timeline;\n      return this;\n    }\n  }, {\n    key: \"animate\",\n    value: function animate(duration, delay, when) {\n      var o = Runner.sanitise(duration, delay, when);\n      var runner = new Runner(o.duration);\n      if (this._timeline) runner.timeline(this._timeline);\n      if (this._element) runner.element(this._element);\n      return runner.loop(o).schedule(o.delay, o.when);\n    }\n  }, {\n    key: \"schedule\",\n    value: function schedule(timeline, delay, when) {\n      // The user doesn't need to pass a timeline if we already have one\n      if (!(timeline instanceof Timeline)) {\n        when = delay;\n        delay = timeline;\n        timeline = this.timeline();\n      } // If there is no timeline, yell at the user...\n\n\n      if (!timeline) {\n        throw Error('Runner cannot be scheduled without timeline');\n      } // Schedule the runner on the timeline provided\n\n\n      timeline.schedule(this, delay, when);\n      return this;\n    }\n  }, {\n    key: \"unschedule\",\n    value: function unschedule() {\n      var timeline = this.timeline();\n      timeline && timeline.unschedule(this);\n      return this;\n    }\n  }, {\n    key: \"loop\",\n    value: function loop(times, swing, wait) {\n      // Deal with the user passing in an object\n      if (_typeof(times) === 'object') {\n        swing = times.swing;\n        wait = times.wait;\n        times = times.times;\n      } // Sanitise the values and store them\n\n\n      this._times = times || Infinity;\n      this._swing = swing || false;\n      this._wait = wait || 0; // Allow true to be passed\n\n      if (this._times === true) {\n        this._times = Infinity;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"delay\",\n    value: function delay(_delay) {\n      return this.animate(0, _delay);\n    }\n    /*\r\n    Basic Functionality\r\n    ===================\r\n    These methods allow us to attach basic functions to the runner directly\r\n    */\n\n  }, {\n    key: \"queue\",\n    value: function queue(initFn, runFn, retargetFn, isTransform) {\n      this._queue.push({\n        initialiser: initFn || noop,\n        runner: runFn || noop,\n        retarget: retargetFn,\n        isTransform: isTransform,\n        initialised: false,\n        finished: false\n      });\n\n      var timeline = this.timeline();\n      timeline && this.timeline()._continue();\n      return this;\n    }\n  }, {\n    key: \"during\",\n    value: function during(fn) {\n      return this.queue(null, fn);\n    }\n  }, {\n    key: \"after\",\n    value: function after(fn) {\n      return this.on('finished', fn);\n    }\n    /*\r\n    Runner animation methods\r\n    ========================\r\n    Control how the animation plays\r\n    */\n\n  }, {\n    key: \"time\",\n    value: function time(_time) {\n      if (_time == null) {\n        return this._time;\n      }\n\n      var dt = _time - this._time;\n      this.step(dt);\n      return this;\n    }\n  }, {\n    key: \"duration\",\n    value: function duration() {\n      return this._times * (this._wait + this._duration) - this._wait;\n    }\n  }, {\n    key: \"loops\",\n    value: function loops(p) {\n      var loopDuration = this._duration + this._wait;\n\n      if (p == null) {\n        var loopsDone = Math.floor(this._time / loopDuration);\n        var relativeTime = this._time - loopsDone * loopDuration;\n        var position = relativeTime / this._duration;\n        return Math.min(loopsDone + position, this._times);\n      }\n\n      var whole = Math.floor(p);\n      var partial = p % 1;\n      var time = loopDuration * whole + this._duration * partial;\n      return this.time(time);\n    }\n  }, {\n    key: \"persist\",\n    value: function persist(dtOrForever) {\n      if (dtOrForever == null) return this._persist;\n      this._persist = dtOrForever;\n      return this;\n    }\n  }, {\n    key: \"position\",\n    value: function position(p) {\n      // Get all of the variables we need\n      var x = this._time;\n      var d = this._duration;\n      var w = this._wait;\n      var t = this._times;\n      var s = this._swing;\n      var r = this._reverse;\n      var position;\n\n      if (p == null) {\n        /*\r\n        This function converts a time to a position in the range [0, 1]\r\n        The full explanation can be found in this desmos demonstration\r\n          https://www.desmos.com/calculator/u4fbavgche\r\n        The logic is slightly simplified here because we can use booleans\r\n        */\n        // Figure out the value without thinking about the start or end time\n        var f = function f(x) {\n          var swinging = s * Math.floor(x % (2 * (w + d)) / (w + d));\n          var backwards = swinging && !r || !swinging && r;\n          var uncliped = Math.pow(-1, backwards) * (x % (w + d)) / d + backwards;\n          var clipped = Math.max(Math.min(uncliped, 1), 0);\n          return clipped;\n        }; // Figure out the value by incorporating the start time\n\n\n        var endTime = t * (w + d) - w;\n        position = x <= 0 ? Math.round(f(1e-5)) : x < endTime ? f(x) : Math.round(f(endTime - 1e-5));\n        return position;\n      } // Work out the loops done and add the position to the loops done\n\n\n      var loopsDone = Math.floor(this.loops());\n      var swingForward = s && loopsDone % 2 === 0;\n      var forwards = swingForward && !r || r && swingForward;\n      position = loopsDone + (forwards ? p : 1 - p);\n      return this.loops(position);\n    }\n  }, {\n    key: \"progress\",\n    value: function progress(p) {\n      if (p == null) {\n        return Math.min(1, this._time / this.duration());\n      }\n\n      return this.time(p * this.duration());\n    }\n  }, {\n    key: \"step\",\n    value: function step(dt) {\n      // If we are inactive, this stepper just gets skipped\n      if (!this.enabled) return this; // Update the time and get the new position\n\n      dt = dt == null ? 16 : dt;\n      this._time += dt;\n      var position = this.position(); // Figure out if we need to run the stepper in this frame\n\n      var running = this._lastPosition !== position && this._time >= 0;\n      this._lastPosition = position; // Figure out if we just started\n\n      var duration = this.duration();\n      var justStarted = this._lastTime <= 0 && this._time > 0;\n      var justFinished = this._lastTime < duration && this._time >= duration;\n      this._lastTime = this._time;\n\n      if (justStarted) {\n        this.fire('start', this);\n      } // Work out if the runner is finished set the done flag here so animations\n      // know, that they are running in the last step (this is good for\n      // transformations which can be merged)\n\n\n      var declarative = this._isDeclarative;\n      this.done = !declarative && !justFinished && this._time >= duration; // Runner is running. So its not in reseted state anymore\n\n      this._reseted = false; // Call initialise and the run function\n\n      if (running || declarative) {\n        this._initialise(running); // clear the transforms on this runner so they dont get added again and again\n\n\n        this.transforms = new Matrix();\n\n        var converged = this._run(declarative ? dt : position);\n\n        this.fire('step', this);\n      } // correct the done flag here\n      // declaritive animations itself know when they converged\n\n\n      this.done = this.done || converged && declarative;\n\n      if (justFinished) {\n        this.fire('finished', this);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      if (this._reseted) return this;\n      this.time(0);\n      this._reseted = true;\n      return this;\n    }\n  }, {\n    key: \"finish\",\n    value: function finish() {\n      return this.step(Infinity);\n    }\n  }, {\n    key: \"reverse\",\n    value: function reverse(_reverse) {\n      this._reverse = _reverse == null ? !this._reverse : _reverse;\n      return this;\n    }\n  }, {\n    key: \"ease\",\n    value: function ease(fn) {\n      this._stepper = new Ease(fn);\n      return this;\n    }\n  }, {\n    key: \"active\",\n    value: function active(enabled) {\n      if (enabled == null) return this.enabled;\n      this.enabled = enabled;\n      return this;\n    }\n    /*\r\n    Private Methods\r\n    ===============\r\n    Methods that shouldn't be used externally\r\n    */\n    // Save a morpher to the morpher list so that we can retarget it later\n\n  }, {\n    key: \"_rememberMorpher\",\n    value: function _rememberMorpher(method, morpher) {\n      this._history[method] = {\n        morpher: morpher,\n        caller: this._queue[this._queue.length - 1]\n      }; // We have to resume the timeline in case a controller\n      // is already done without beeing ever run\n      // This can happen when e.g. this is done:\n      //    anim = el.animate(new SVG.Spring)\n      // and later\n      //    anim.move(...)\n\n      if (this._isDeclarative) {\n        var timeline = this.timeline();\n        timeline && timeline.play();\n      }\n    } // Try to set the target for a morpher if the morpher exists, otherwise\n    // do nothing and return false\n\n  }, {\n    key: \"_tryRetarget\",\n    value: function _tryRetarget(method, target, extra) {\n      if (this._history[method]) {\n        // if the last method wasnt even initialised, throw it away\n        if (!this._history[method].caller.initialised) {\n          var index = this._queue.indexOf(this._history[method].caller);\n\n          this._queue.splice(index, 1);\n\n          return false;\n        } // for the case of transformations, we use the special retarget function\n        // which has access to the outer scope\n\n\n        if (this._history[method].caller.retarget) {\n          this._history[method].caller.retarget(target, extra); // for everything else a simple morpher change is sufficient\n\n        } else {\n          this._history[method].morpher.to(target);\n        }\n\n        this._history[method].caller.finished = false;\n        var timeline = this.timeline();\n        timeline && timeline.play();\n        return true;\n      }\n\n      return false;\n    } // Run each initialise function in the runner if required\n\n  }, {\n    key: \"_initialise\",\n    value: function _initialise(running) {\n      // If we aren't running, we shouldn't initialise when not declarative\n      if (!running && !this._isDeclarative) return; // Loop through all of the initialisers\n\n      for (var i = 0, len = this._queue.length; i < len; ++i) {\n        // Get the current initialiser\n        var current = this._queue[i]; // Determine whether we need to initialise\n\n        var needsIt = this._isDeclarative || !current.initialised && running;\n        running = !current.finished; // Call the initialiser if we need to\n\n        if (needsIt && running) {\n          current.initialiser.call(this);\n          current.initialised = true;\n        }\n      }\n    } // Run each run function for the position or dt given\n\n  }, {\n    key: \"_run\",\n    value: function _run(positionOrDt) {\n      // Run all of the _queue directly\n      var allfinished = true;\n\n      for (var i = 0, len = this._queue.length; i < len; ++i) {\n        // Get the current function to run\n        var current = this._queue[i]; // Run the function if its not finished, we keep track of the finished\n        // flag for the sake of declarative _queue\n\n        var converged = current.runner.call(this, positionOrDt);\n        current.finished = current.finished || converged === true;\n        allfinished = allfinished && current.finished;\n      } // We report when all of the constructors are finished\n\n\n      return allfinished;\n    }\n  }, {\n    key: \"addTransform\",\n    value: function addTransform(transform, index) {\n      this.transforms.lmultiplyO(transform);\n      return this;\n    }\n  }, {\n    key: \"clearTransform\",\n    value: function clearTransform() {\n      this.transforms = new Matrix();\n      return this;\n    } // TODO: Keep track of all transformations so that deletion is faster\n\n  }, {\n    key: \"clearTransformsFromQueue\",\n    value: function clearTransformsFromQueue() {\n      if (!this.done || !this._timeline || !this._timeline._runnerIds.includes(this.id)) {\n        this._queue = this._queue.filter(function (item) {\n          return !item.isTransform;\n        });\n      }\n    }\n  }], [{\n    key: \"sanitise\",\n    value: function sanitise(duration, delay, when) {\n      // Initialise the default parameters\n      var times = 1;\n      var swing = false;\n      var wait = 0;\n      duration = duration || timeline.duration;\n      delay = delay || timeline.delay;\n      when = when || 'last'; // If we have an object, unpack the values\n\n      if (_typeof(duration) === 'object' && !(duration instanceof Stepper)) {\n        delay = duration.delay || delay;\n        when = duration.when || when;\n        swing = duration.swing || swing;\n        times = duration.times || times;\n        wait = duration.wait || wait;\n        duration = duration.duration || timeline.duration;\n      }\n\n      return {\n        duration: duration,\n        delay: delay,\n        swing: swing,\n        times: times,\n        wait: wait,\n        when: when\n      };\n    }\n  }]);\n\n  return Runner;\n}(EventTarget);\nRunner.id = 0;\n\nvar FakeRunner =\n/*#__PURE__*/\nfunction () {\n  function FakeRunner() {\n    var transforms = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Matrix();\n    var id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n    var done = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n    _classCallCheck(this, FakeRunner);\n\n    this.transforms = transforms;\n    this.id = id;\n    this.done = done;\n  }\n\n  _createClass(FakeRunner, [{\n    key: \"clearTransformsFromQueue\",\n    value: function clearTransformsFromQueue() {}\n  }]);\n\n  return FakeRunner;\n}();\n\nextend([Runner, FakeRunner], {\n  mergeWith: function mergeWith(runner) {\n    return new FakeRunner(runner.transforms.lmultiply(this.transforms), runner.id);\n  }\n}); // FakeRunner.emptyRunner = new FakeRunner()\n\nvar lmultiply = function lmultiply(last, curr) {\n  return last.lmultiplyO(curr);\n};\n\nvar getRunnerTransform = function getRunnerTransform(runner) {\n  return runner.transforms;\n};\n\nfunction mergeTransforms() {\n  // Find the matrix to apply to the element and apply it\n  var runners = this._transformationRunners.runners;\n  var netTransform = runners.map(getRunnerTransform).reduce(lmultiply, new Matrix());\n  this.transform(netTransform);\n\n  this._transformationRunners.merge();\n\n  if (this._transformationRunners.length() === 1) {\n    this._frameId = null;\n  }\n}\n\nvar RunnerArray =\n/*#__PURE__*/\nfunction () {\n  function RunnerArray() {\n    _classCallCheck(this, RunnerArray);\n\n    this.runners = [];\n    this.ids = [];\n  }\n\n  _createClass(RunnerArray, [{\n    key: \"add\",\n    value: function add(runner) {\n      if (this.runners.includes(runner)) return;\n      var id = runner.id + 1;\n      this.runners.push(runner);\n      this.ids.push(id);\n      return this;\n    }\n  }, {\n    key: \"getByID\",\n    value: function getByID(id) {\n      return this.runners[this.ids.indexOf(id + 1)];\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(id) {\n      var index = this.ids.indexOf(id + 1);\n      this.ids.splice(index, 1);\n      this.runners.splice(index, 1);\n      return this;\n    }\n  }, {\n    key: \"merge\",\n    value: function merge() {\n      var _this2 = this;\n\n      var lastRunner = null;\n      this.runners.forEach(function (runner, i) {\n        var condition = lastRunner && runner.done && lastRunner.done // don't merge runner when persisted on timeline\n        && (!runner._timeline || !runner._timeline._runnerIds.includes(runner.id)) && (!lastRunner._timeline || !lastRunner._timeline._runnerIds.includes(lastRunner.id));\n\n        if (condition) {\n          // the +1 happens in the function\n          _this2.remove(runner.id);\n\n          _this2.edit(lastRunner.id, runner.mergeWith(lastRunner));\n        }\n\n        lastRunner = runner;\n      });\n      return this;\n    }\n  }, {\n    key: \"edit\",\n    value: function edit(id, newRunner) {\n      var index = this.ids.indexOf(id + 1);\n      this.ids.splice(index, 1, id + 1);\n      this.runners.splice(index, 1, newRunner);\n      return this;\n    }\n  }, {\n    key: \"length\",\n    value: function length() {\n      return this.ids.length;\n    }\n  }, {\n    key: \"clearBefore\",\n    value: function clearBefore(id) {\n      var deleteCnt = this.ids.indexOf(id + 1) || 1;\n      this.ids.splice(0, deleteCnt, 0);\n      this.runners.splice(0, deleteCnt, new FakeRunner()).forEach(function (r) {\n        return r.clearTransformsFromQueue();\n      });\n      return this;\n    }\n  }]);\n\n  return RunnerArray;\n}();\n\nregisterMethods({\n  Element: {\n    animate: function animate(duration, delay, when) {\n      var o = Runner.sanitise(duration, delay, when);\n      var timeline = this.timeline();\n      return new Runner(o.duration).loop(o).element(this).timeline(timeline.play()).schedule(o.delay, o.when);\n    },\n    delay: function delay(by, when) {\n      return this.animate(0, by, when);\n    },\n    // this function searches for all runners on the element and deletes the ones\n    // which run before the current one. This is because absolute transformations\n    // overwfrite anything anyway so there is no need to waste time computing\n    // other runners\n    _clearTransformRunnersBefore: function _clearTransformRunnersBefore(currentRunner) {\n      this._transformationRunners.clearBefore(currentRunner.id);\n    },\n    _currentTransform: function _currentTransform(current) {\n      return this._transformationRunners.runners // we need the equal sign here to make sure, that also transformations\n      // on the same runner which execute before the current transformation are\n      // taken into account\n      .filter(function (runner) {\n        return runner.id <= current.id;\n      }).map(getRunnerTransform).reduce(lmultiply, new Matrix());\n    },\n    _addRunner: function _addRunner(runner) {\n      this._transformationRunners.add(runner); // Make sure that the runner merge is executed at the very end of\n      // all Animator functions. Thats why we use immediate here to execute\n      // the merge right after all frames are run\n\n\n      Animator.cancelImmediate(this._frameId);\n      this._frameId = Animator.immediate(mergeTransforms.bind(this));\n    },\n    _prepareRunner: function _prepareRunner() {\n      if (this._frameId == null) {\n        this._transformationRunners = new RunnerArray().add(new FakeRunner(new Matrix(this)));\n      }\n    }\n  }\n});\nextend(Runner, {\n  attr: function attr(a, v) {\n    return this.styleAttr('attr', a, v);\n  },\n  // Add animatable styles\n  css: function css(s, v) {\n    return this.styleAttr('css', s, v);\n  },\n  styleAttr: function styleAttr(type, name, val) {\n    // apply attributes individually\n    if (_typeof(name) === 'object') {\n      for (var key in name) {\n        this.styleAttr(type, key, name[key]);\n      }\n\n      return this;\n    }\n\n    var morpher = new Morphable(this._stepper).to(val);\n    this.queue(function () {\n      morpher = morpher.from(this.element()[type](name));\n    }, function (pos) {\n      this.element()[type](name, morpher.at(pos));\n      return morpher.done();\n    });\n    return this;\n  },\n  zoom: function zoom(level, point) {\n    if (this._tryRetarget('zoom', to, point)) return this;\n    var morpher = new Morphable(this._stepper).to(new SVGNumber(level));\n    this.queue(function () {\n      morpher = morpher.from(this.element().zoom());\n    }, function (pos) {\n      this.element().zoom(morpher.at(pos), point);\n      return morpher.done();\n    }, function (newLevel, newPoint) {\n      point = newPoint;\n      morpher.to(newLevel);\n    });\n\n    this._rememberMorpher('zoom', morpher);\n\n    return this;\n  },\n\n  /**\r\n   ** absolute transformations\r\n   **/\n  //\n  // M v -----|-----(D M v = F v)------|-----\x3e  T v\n  //\n  // 1. define the final state (T) and decompose it (once)\n  //    t = [tx, ty, the, lam, sy, sx]\n  // 2. on every frame: pull the current state of all previous transforms\n  //    (M - m can change)\n  //   and then write this as m = [tx0, ty0, the0, lam0, sy0, sx0]\n  // 3. Find the interpolated matrix F(pos) = m + pos * (t - m)\n  //   - Note F(0) = M\n  //   - Note F(1) = T\n  // 4. Now you get the delta matrix as a result: D = F * inv(M)\n  transform: function transform(transforms, relative, affine) {\n    // If we have a declarative function, we should retarget it if possible\n    relative = transforms.relative || relative;\n\n    if (this._isDeclarative && !relative && this._tryRetarget('transform', transforms)) {\n      return this;\n    } // Parse the parameters\n\n\n    var isMatrix = Matrix.isMatrixLike(transforms);\n    affine = transforms.affine != null ? transforms.affine : affine != null ? affine : !isMatrix; // Create a morepher and set its type\n\n    var morpher = new Morphable(this._stepper).type(affine ? TransformBag : Matrix);\n    var origin;\n    var element;\n    var current;\n    var currentAngle;\n    var startTransform;\n\n    function setup() {\n      // make sure element and origin is defined\n      element = element || this.element();\n      origin = origin || getOrigin(transforms, element);\n      startTransform = new Matrix(relative ? undefined : element); // add the runner to the element so it can merge transformations\n\n      element._addRunner(this); // Deactivate all transforms that have run so far if we are absolute\n\n\n      if (!relative) {\n        element._clearTransformRunnersBefore(this);\n      }\n    }\n\n    function run(pos) {\n      // clear all other transforms before this in case something is saved\n      // on this runner. We are absolute. We dont need these!\n      if (!relative) this.clearTransform();\n\n      var _transform = new Point(origin).transform(element._currentTransform(this)),\n          x = _transform.x,\n          y = _transform.y;\n\n      var target = new Matrix(_objectSpread$1({}, transforms, {\n        origin: [x, y]\n      }));\n      var start = this._isDeclarative && current ? current : startTransform;\n\n      if (affine) {\n        target = target.decompose(x, y);\n        start = start.decompose(x, y); // Get the current and target angle as it was set\n\n        var rTarget = target.rotate;\n        var rCurrent = start.rotate; // Figure out the shortest path to rotate directly\n\n        var possibilities = [rTarget - 360, rTarget, rTarget + 360];\n        var distances = possibilities.map(function (a) {\n          return Math.abs(a - rCurrent);\n        });\n        var shortest = Math.min.apply(Math, _toConsumableArray(distances));\n        var index = distances.indexOf(shortest);\n        target.rotate = possibilities[index];\n      }\n\n      if (relative) {\n        // we have to be careful here not to overwrite the rotation\n        // with the rotate method of Matrix\n        if (!isMatrix) {\n          target.rotate = transforms.rotate || 0;\n        }\n\n        if (this._isDeclarative && currentAngle) {\n          start.rotate = currentAngle;\n        }\n      }\n\n      morpher.from(start);\n      morpher.to(target);\n      var affineParameters = morpher.at(pos);\n      currentAngle = affineParameters.rotate;\n      current = new Matrix(affineParameters);\n      this.addTransform(current);\n\n      element._addRunner(this);\n\n      return morpher.done();\n    }\n\n    function retarget(newTransforms) {\n      // only get a new origin if it changed since the last call\n      if ((newTransforms.origin || 'center').toString() !== (transforms.origin || 'center').toString()) {\n        origin = getOrigin(transforms, element);\n      } // overwrite the old transformations with the new ones\n\n\n      transforms = _objectSpread$1({}, newTransforms, {\n        origin: origin\n      });\n    }\n\n    this.queue(setup, run, retarget, true);\n    this._isDeclarative && this._rememberMorpher('transform', morpher);\n    return this;\n  },\n  // Animatable x-axis\n  x: function x(_x, relative) {\n    return this._queueNumber('x', _x);\n  },\n  // Animatable y-axis\n  y: function y(_y) {\n    return this._queueNumber('y', _y);\n  },\n  dx: function dx() {\n    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return this._queueNumberDelta('x', x);\n  },\n  dy: function dy() {\n    var y = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return this._queueNumberDelta('y', y);\n  },\n  dmove: function dmove(x, y) {\n    return this.dx(x).dy(y);\n  },\n  _queueNumberDelta: function _queueNumberDelta(method, to) {\n    to = new SVGNumber(to); // Try to change the target if we have this method already registerd\n\n    if (this._tryRetarget(method, to)) return this; // Make a morpher and queue the animation\n\n    var morpher = new Morphable(this._stepper).to(to);\n    var from = null;\n    this.queue(function () {\n      from = this.element()[method]();\n      morpher.from(from);\n      morpher.to(from + to);\n    }, function (pos) {\n      this.element()[method](morpher.at(pos));\n      return morpher.done();\n    }, function (newTo) {\n      morpher.to(from + new SVGNumber(newTo));\n    }); // Register the morpher so that if it is changed again, we can retarget it\n\n    this._rememberMorpher(method, morpher);\n\n    return this;\n  },\n  _queueObject: function _queueObject(method, to) {\n    // Try to change the target if we have this method already registerd\n    if (this._tryRetarget(method, to)) return this; // Make a morpher and queue the animation\n\n    var morpher = new Morphable(this._stepper).to(to);\n    this.queue(function () {\n      morpher.from(this.element()[method]());\n    }, function (pos) {\n      this.element()[method](morpher.at(pos));\n      return morpher.done();\n    }); // Register the morpher so that if it is changed again, we can retarget it\n\n    this._rememberMorpher(method, morpher);\n\n    return this;\n  },\n  _queueNumber: function _queueNumber(method, value) {\n    return this._queueObject(method, new SVGNumber(value));\n  },\n  // Animatable center x-axis\n  cx: function cx(x) {\n    return this._queueNumber('cx', x);\n  },\n  // Animatable center y-axis\n  cy: function cy(y) {\n    return this._queueNumber('cy', y);\n  },\n  // Add animatable move\n  move: function move(x, y) {\n    return this.x(x).y(y);\n  },\n  // Add animatable center\n  center: function center(x, y) {\n    return this.cx(x).cy(y);\n  },\n  // Add animatable size\n  size: function size(width, height) {\n    // animate bbox based size for all other elements\n    var box;\n\n    if (!width || !height) {\n      box = this._element.bbox();\n    }\n\n    if (!width) {\n      width = box.width / box.height * height;\n    }\n\n    if (!height) {\n      height = box.height / box.width * width;\n    }\n\n    return this.width(width).height(height);\n  },\n  // Add animatable width\n  width: function width(_width) {\n    return this._queueNumber('width', _width);\n  },\n  // Add animatable height\n  height: function height(_height) {\n    return this._queueNumber('height', _height);\n  },\n  // Add animatable plot\n  plot: function plot(a, b, c, d) {\n    // Lines can be plotted with 4 arguments\n    if (arguments.length === 4) {\n      return this.plot([a, b, c, d]);\n    }\n\n    if (this._tryRetarget('plot', a)) return this;\n    var morpher = new Morphable(this._stepper).type(this._element.MorphArray).to(a);\n    this.queue(function () {\n      morpher.from(this._element.array());\n    }, function (pos) {\n      this._element.plot(morpher.at(pos));\n\n      return morpher.done();\n    });\n\n    this._rememberMorpher('plot', morpher);\n\n    return this;\n  },\n  // Add leading method\n  leading: function leading(value) {\n    return this._queueNumber('leading', value);\n  },\n  // Add animatable viewbox\n  viewbox: function viewbox(x, y, width, height) {\n    return this._queueObject('viewbox', new Box(x, y, width, height));\n  },\n  update: function update(o) {\n    if (_typeof(o) !== 'object') {\n      return this.update({\n        offset: arguments[0],\n        color: arguments[1],\n        opacity: arguments[2]\n      });\n    }\n\n    if (o.opacity != null) this.attr('stop-opacity', o.opacity);\n    if (o.color != null) this.attr('stop-color', o.color);\n    if (o.offset != null) this.attr('offset', o.offset);\n    return this;\n  }\n});\nextend(Runner, {\n  rx: rx,\n  ry: ry,\n  from: from,\n  to: to\n});\nregister(Runner, 'Runner');\n\nvar Svg =\n/*#__PURE__*/\nfunction (_Container) {\n  _inherits(Svg, _Container);\n\n  function Svg(node) {\n    var _this;\n\n    _classCallCheck(this, Svg);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Svg).call(this, nodeOrNew('svg', node), node));\n\n    _this.namespace();\n\n    return _this;\n  }\n\n  _createClass(Svg, [{\n    key: \"isRoot\",\n    value: function isRoot() {\n      return !this.node.parentNode || !(this.node.parentNode instanceof globals.window.SVGElement) || this.node.parentNode.nodeName === '#document';\n    } // Check if this is a root svg\n    // If not, call docs from this element\n\n  }, {\n    key: \"root\",\n    value: function root() {\n      if (this.isRoot()) return this;\n      return _get(_getPrototypeOf(Svg.prototype), \"root\", this).call(this);\n    } // Add namespaces\n\n  }, {\n    key: \"namespace\",\n    value: function namespace() {\n      if (!this.isRoot()) return this.root().namespace();\n      return this.attr({\n        xmlns: ns,\n        version: '1.1'\n      }).attr('xmlns:xlink', xlink, xmlns).attr('xmlns:svgjs', svgjs, xmlns);\n    } // Creates and returns defs element\n\n  }, {\n    key: \"defs\",\n    value: function defs() {\n      if (!this.isRoot()) return this.root().defs();\n      return adopt(this.node.querySelector('defs')) || this.put(new Defs());\n    } // custom parent method\n\n  }, {\n    key: \"parent\",\n    value: function parent(type) {\n      if (this.isRoot()) {\n        return this.node.parentNode.nodeName === '#document' ? null : adopt(this.node.parentNode);\n      }\n\n      return _get(_getPrototypeOf(Svg.prototype), \"parent\", this).call(this, type);\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      // remove children\n      while (this.node.hasChildNodes()) {\n        this.node.removeChild(this.node.lastChild);\n      } // remove defs reference\n\n\n      delete this._defs;\n      return this;\n    }\n  }]);\n\n  return Svg;\n}(Container);\nregisterMethods({\n  Container: {\n    // Create nested svg document\n    nested: wrapWithAttrCheck(function () {\n      return this.put(new Svg());\n    })\n  }\n});\nregister(Svg, 'Svg', true);\n\nvar _Symbol =\n/*#__PURE__*/\nfunction (_Container) {\n  _inherits(_Symbol, _Container);\n\n  // Initialize node\n  function _Symbol(node) {\n    _classCallCheck(this, _Symbol);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(_Symbol).call(this, nodeOrNew('symbol', node), node));\n  }\n\n  return _Symbol;\n}(Container);\nregisterMethods({\n  Container: {\n    symbol: wrapWithAttrCheck(function () {\n      return this.put(new _Symbol());\n    })\n  }\n});\nregister(_Symbol, 'Symbol');\n\nfunction plain(text) {\n  // clear if build mode is disabled\n  if (this._build === false) {\n    this.clear();\n  } // create text node\n\n\n  this.node.appendChild(globals.document.createTextNode(text));\n  return this;\n} // Get length of text element\n\nfunction length() {\n  return this.node.getComputedTextLength();\n}\n\nvar textable = ({\n\t__proto__: null,\n\tplain: plain,\n\tlength: length\n});\n\nvar Text =\n/*#__PURE__*/\nfunction (_Shape) {\n  _inherits(Text, _Shape);\n\n  // Initialize node\n  function Text(node) {\n    var _this;\n\n    _classCallCheck(this, Text);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Text).call(this, nodeOrNew('text', node), node));\n    _this.dom.leading = new SVGNumber(1.3); // store leading value for rebuilding\n\n    _this._rebuild = true; // enable automatic updating of dy values\n\n    _this._build = false; // disable build mode for adding multiple lines\n\n    return _this;\n  } // Move over x-axis\n  // Text is moved its bounding box\n  // text-anchor does NOT matter\n\n\n  _createClass(Text, [{\n    key: \"x\",\n    value: function x(_x) {\n      var box = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.bbox();\n\n      if (_x == null) {\n        return box.x;\n      }\n\n      return this.attr('x', this.attr('x') + _x - box.x);\n    } // Move over y-axis\n\n  }, {\n    key: \"y\",\n    value: function y(_y) {\n      var box = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.bbox();\n\n      if (_y == null) {\n        return box.y;\n      }\n\n      return this.attr('y', this.attr('y') + _y - box.y);\n    }\n  }, {\n    key: \"move\",\n    value: function move(x, y) {\n      var box = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.bbox();\n      return this.x(x, box).y(y, box);\n    } // Move center over x-axis\n\n  }, {\n    key: \"cx\",\n    value: function cx(x) {\n      var box = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.bbox();\n\n      if (x == null) {\n        return box.cx;\n      }\n\n      return this.attr('x', this.attr('x') + x - box.cx);\n    } // Move center over y-axis\n\n  }, {\n    key: \"cy\",\n    value: function cy(y) {\n      var box = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.bbox();\n\n      if (y == null) {\n        return box.cy;\n      }\n\n      return this.attr('y', this.attr('y') + y - box.cy);\n    }\n  }, {\n    key: \"center\",\n    value: function center(x, y) {\n      var box = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.bbox();\n      return this.cx(x, box).cy(y, box);\n    } // Set the text content\n\n  }, {\n    key: \"text\",\n    value: function text(_text) {\n      // act as getter\n      if (_text === undefined) {\n        var children = this.node.childNodes;\n        var firstLine = 0;\n        _text = '';\n\n        for (var i = 0, len = children.length; i < len; ++i) {\n          // skip textPaths - they are no lines\n          if (children[i].nodeName === 'textPath') {\n            if (i === 0) firstLine = 1;\n            continue;\n          } // add newline if its not the first child and newLined is set to true\n\n\n          if (i !== firstLine && children[i].nodeType !== 3 && adopt(children[i]).dom.newLined === true) {\n            _text += '\\n';\n          } // add content of this node\n\n\n          _text += children[i].textContent;\n        }\n\n        return _text;\n      } // remove existing content\n\n\n      this.clear().build(true);\n\n      if (typeof _text === 'function') {\n        // call block\n        _text.call(this, this);\n      } else {\n        // store text and make sure text is not blank\n        _text = _text.split('\\n'); // build new lines\n\n        for (var j = 0, jl = _text.length; j < jl; j++) {\n          this.tspan(_text[j]).newLine();\n        }\n      } // disable build mode and rebuild lines\n\n\n      return this.build(false).rebuild();\n    } // Set / get leading\n\n  }, {\n    key: \"leading\",\n    value: function leading(value) {\n      // act as getter\n      if (value == null) {\n        return this.dom.leading;\n      } // act as setter\n\n\n      this.dom.leading = new SVGNumber(value);\n      return this.rebuild();\n    } // Rebuild appearance type\n\n  }, {\n    key: \"rebuild\",\n    value: function rebuild(_rebuild) {\n      // store new rebuild flag if given\n      if (typeof _rebuild === 'boolean') {\n        this._rebuild = _rebuild;\n      } // define position of all lines\n\n\n      if (this._rebuild) {\n        var self = this;\n        var blankLineOffset = 0;\n        var leading = this.dom.leading;\n        this.each(function () {\n          var fontSize = globals.window.getComputedStyle(this.node).getPropertyValue('font-size');\n          var dy = leading * new SVGNumber(fontSize);\n\n          if (this.dom.newLined) {\n            this.attr('x', self.attr('x'));\n\n            if (this.text() === '\\n') {\n              blankLineOffset += dy;\n            } else {\n              this.attr('dy', dy + blankLineOffset);\n              blankLineOffset = 0;\n            }\n          }\n        });\n        this.fire('rebuild');\n      }\n\n      return this;\n    } // Enable / disable build mode\n\n  }, {\n    key: \"build\",\n    value: function build(_build) {\n      this._build = !!_build;\n      return this;\n    } // overwrite method from parent to set data properly\n\n  }, {\n    key: \"setData\",\n    value: function setData(o) {\n      this.dom = o;\n      this.dom.leading = new SVGNumber(o.leading || 1.3);\n      return this;\n    }\n  }]);\n\n  return Text;\n}(Shape);\nextend(Text, textable);\nregisterMethods({\n  Container: {\n    // Create text element\n    text: wrapWithAttrCheck(function (text) {\n      return this.put(new Text()).text(text);\n    }),\n    // Create plain text element\n    plain: wrapWithAttrCheck(function (text) {\n      return this.put(new Text()).plain(text);\n    })\n  }\n});\nregister(Text, 'Text');\n\nvar Tspan =\n/*#__PURE__*/\nfunction (_Text) {\n  _inherits(Tspan, _Text);\n\n  // Initialize node\n  function Tspan(node) {\n    _classCallCheck(this, Tspan);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Tspan).call(this, nodeOrNew('tspan', node), node));\n  } // Set text content\n\n\n  _createClass(Tspan, [{\n    key: \"text\",\n    value: function text(_text) {\n      if (_text == null) return this.node.textContent + (this.dom.newLined ? '\\n' : '');\n      typeof _text === 'function' ? _text.call(this, this) : this.plain(_text);\n      return this;\n    } // Shortcut dx\n\n  }, {\n    key: \"dx\",\n    value: function dx(_dx) {\n      return this.attr('dx', _dx);\n    } // Shortcut dy\n\n  }, {\n    key: \"dy\",\n    value: function dy(_dy) {\n      return this.attr('dy', _dy);\n    }\n  }, {\n    key: \"x\",\n    value: function x(_x) {\n      return this.attr('x', _x);\n    }\n  }, {\n    key: \"y\",\n    value: function y(_y) {\n      return this.attr('x', _y);\n    }\n  }, {\n    key: \"move\",\n    value: function move(x, y) {\n      return this.x(x).y(y);\n    } // Create new line\n\n  }, {\n    key: \"newLine\",\n    value: function newLine() {\n      // fetch text parent\n      var t = this.parent(Text); // mark new line\n\n      this.dom.newLined = true;\n      var fontSize = globals.window.getComputedStyle(this.node).getPropertyValue('font-size');\n      var dy = t.dom.leading * new SVGNumber(fontSize); // apply new position\n\n      return this.dy(dy).attr('x', t.x());\n    }\n  }]);\n\n  return Tspan;\n}(Text);\nextend(Tspan, textable);\nregisterMethods({\n  Tspan: {\n    tspan: wrapWithAttrCheck(function (text) {\n      var tspan = new Tspan(); // clear if build mode is disabled\n\n      if (!this._build) {\n        this.clear();\n      } // add new tspan\n\n\n      this.node.appendChild(tspan.node);\n      return tspan.text(text);\n    })\n  }\n});\nregister(Tspan, 'Tspan');\n\nvar ClipPath =\n/*#__PURE__*/\nfunction (_Container) {\n  _inherits(ClipPath, _Container);\n\n  function ClipPath(node) {\n    _classCallCheck(this, ClipPath);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ClipPath).call(this, nodeOrNew('clipPath', node), node));\n  } // Unclip all clipped elements and remove itself\n\n\n  _createClass(ClipPath, [{\n    key: \"remove\",\n    value: function remove() {\n      // unclip all targets\n      this.targets().forEach(function (el) {\n        el.unclip();\n      }); // remove clipPath from parent\n\n      return _get(_getPrototypeOf(ClipPath.prototype), \"remove\", this).call(this);\n    }\n  }, {\n    key: \"targets\",\n    value: function targets() {\n      return baseFind('svg [clip-path*=\"' + this.id() + '\"]');\n    }\n  }]);\n\n  return ClipPath;\n}(Container);\nregisterMethods({\n  Container: {\n    // Create clipping element\n    clip: wrapWithAttrCheck(function () {\n      return this.defs().put(new ClipPath());\n    })\n  },\n  Element: {\n    // Distribute clipPath to svg element\n    clipWith: function clipWith(element) {\n      // use given clip or create a new one\n      var clipper = element instanceof ClipPath ? element : this.parent().clip().add(element); // apply mask\n\n      return this.attr('clip-path', 'url(\"#' + clipper.id() + '\")');\n    },\n    // Unclip element\n    unclip: function unclip() {\n      return this.attr('clip-path', null);\n    },\n    clipper: function clipper() {\n      return this.reference('clip-path');\n    }\n  }\n});\nregister(ClipPath, 'ClipPath');\n\nvar ForeignObject =\n/*#__PURE__*/\nfunction (_Element) {\n  _inherits(ForeignObject, _Element);\n\n  function ForeignObject(node) {\n    _classCallCheck(this, ForeignObject);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ForeignObject).call(this, nodeOrNew('foreignObject', node), node));\n  }\n\n  return ForeignObject;\n}(Element);\nregisterMethods({\n  Container: {\n    foreignObject: wrapWithAttrCheck(function (width, height) {\n      return this.put(new ForeignObject()).size(width, height);\n    })\n  }\n});\nregister(ForeignObject, 'ForeignObject');\n\nvar G =\n/*#__PURE__*/\nfunction (_Container) {\n  _inherits(G, _Container);\n\n  function G(node) {\n    _classCallCheck(this, G);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(G).call(this, nodeOrNew('g', node), node));\n  }\n\n  _createClass(G, [{\n    key: \"x\",\n    value: function x(_x) {\n      var box = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.bbox();\n      if (_x == null) return box.x;\n      return this.move(_x, box.y, box);\n    }\n  }, {\n    key: \"y\",\n    value: function y(_y) {\n      var box = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.bbox();\n      if (_y == null) return box.y;\n      return this.move(box.x, _y, box);\n    }\n  }, {\n    key: \"move\",\n    value: function move() {\n      var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var box = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.bbox();\n      var dx = x - box.x;\n      var dy = y - box.y;\n      return this.dmove(dx, dy);\n    }\n  }, {\n    key: \"dx\",\n    value: function dx(_dx) {\n      return this.dmove(_dx, 0);\n    }\n  }, {\n    key: \"dy\",\n    value: function dy(_dy) {\n      return this.dmove(0, _dy);\n    }\n  }, {\n    key: \"dmove\",\n    value: function dmove(dx, dy) {\n      this.children().forEach(function (child, i) {\n        // Get the childs bbox\n        var bbox = child.bbox(); // Get childs matrix\n\n        var m = new Matrix(child); // Translate childs matrix by amount and\n        // transform it back into parents space\n\n        var matrix = m.translate(dx, dy).transform(m.inverse()); // Calculate new x and y from old box\n\n        var p = new Point(bbox.x, bbox.y).transform(matrix); // Move element\n\n        child.move(p.x, p.y);\n      });\n      return this;\n    }\n  }, {\n    key: \"width\",\n    value: function width(_width) {\n      var box = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.bbox();\n      if (_width == null) return box.width;\n      return this.size(_width, box.height, box);\n    }\n  }, {\n    key: \"height\",\n    value: function height(_height) {\n      var box = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.bbox();\n      if (_height == null) return box.height;\n      return this.size(box.width, _height, box);\n    }\n  }, {\n    key: \"size\",\n    value: function size(width, height) {\n      var box = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.bbox();\n      var p = proportionalSize(this, width, height, box);\n      var scaleX = p.width / box.width;\n      var scaleY = p.height / box.height;\n      this.children().forEach(function (child, i) {\n        var o = new Point(box).transform(new Matrix(child).inverse());\n        child.scale(scaleX, scaleY, o.x, o.y);\n      });\n      return this;\n    }\n  }]);\n\n  return G;\n}(Container);\nregisterMethods({\n  Container: {\n    // Create a group element\n    group: wrapWithAttrCheck(function () {\n      return this.put(new G());\n    })\n  }\n});\nregister(G, 'G');\n\nvar A =\n/*#__PURE__*/\nfunction (_Container) {\n  _inherits(A, _Container);\n\n  function A(node) {\n    _classCallCheck(this, A);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(A).call(this, nodeOrNew('a', node), node));\n  } // Link url\n\n\n  _createClass(A, [{\n    key: \"to\",\n    value: function to(url) {\n      return this.attr('href', url, xlink);\n    } // Link target attribute\n\n  }, {\n    key: \"target\",\n    value: function target(_target) {\n      return this.attr('target', _target);\n    }\n  }]);\n\n  return A;\n}(Container);\nregisterMethods({\n  Container: {\n    // Create a hyperlink element\n    link: wrapWithAttrCheck(function (url) {\n      return this.put(new A()).to(url);\n    })\n  },\n  Element: {\n    // Create a hyperlink element\n    linkTo: function linkTo(url) {\n      var link = new A();\n\n      if (typeof url === 'function') {\n        url.call(link, link);\n      } else {\n        link.to(url);\n      }\n\n      return this.parent().put(link).put(this);\n    }\n  }\n});\nregister(A, 'A');\n\nvar Mask =\n/*#__PURE__*/\nfunction (_Container) {\n  _inherits(Mask, _Container);\n\n  // Initialize node\n  function Mask(node) {\n    _classCallCheck(this, Mask);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Mask).call(this, nodeOrNew('mask', node), node));\n  } // Unmask all masked elements and remove itself\n\n\n  _createClass(Mask, [{\n    key: \"remove\",\n    value: function remove() {\n      // unmask all targets\n      this.targets().forEach(function (el) {\n        el.unmask();\n      }); // remove mask from parent\n\n      return _get(_getPrototypeOf(Mask.prototype), \"remove\", this).call(this);\n    }\n  }, {\n    key: \"targets\",\n    value: function targets() {\n      return baseFind('svg [mask*=\"' + this.id() + '\"]');\n    }\n  }]);\n\n  return Mask;\n}(Container);\nregisterMethods({\n  Container: {\n    mask: wrapWithAttrCheck(function () {\n      return this.defs().put(new Mask());\n    })\n  },\n  Element: {\n    // Distribute mask to svg element\n    maskWith: function maskWith(element) {\n      // use given mask or create a new one\n      var masker = element instanceof Mask ? element : this.parent().mask().add(element); // apply mask\n\n      return this.attr('mask', 'url(\"#' + masker.id() + '\")');\n    },\n    // Unmask element\n    unmask: function unmask() {\n      return this.attr('mask', null);\n    },\n    masker: function masker() {\n      return this.reference('mask');\n    }\n  }\n});\nregister(Mask, 'Mask');\n\nfunction ownKeys$3(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$3(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$3(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction cssRule(selector, rule) {\n  if (!selector) return '';\n  if (!rule) return selector;\n  var ret = selector + '{';\n\n  for (var i in rule) {\n    ret += unCamelCase(i) + ':' + rule[i] + ';';\n  }\n\n  ret += '}';\n  return ret;\n}\n\nvar Style =\n/*#__PURE__*/\nfunction (_Element) {\n  _inherits(Style, _Element);\n\n  function Style(node) {\n    _classCallCheck(this, Style);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Style).call(this, nodeOrNew('style', node), node));\n  }\n\n  _createClass(Style, [{\n    key: \"addText\",\n    value: function addText() {\n      var w = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      this.node.textContent += w;\n      return this;\n    }\n  }, {\n    key: \"font\",\n    value: function font(name, src) {\n      var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.rule('@font-face', _objectSpread$2({\n        fontFamily: name,\n        src: src\n      }, params));\n    }\n  }, {\n    key: \"rule\",\n    value: function rule(selector, obj) {\n      return this.addText(cssRule(selector, obj));\n    }\n  }]);\n\n  return Style;\n}(Element);\nregisterMethods('Dom', {\n  style: wrapWithAttrCheck(function (selector, obj) {\n    return this.put(new Style()).rule(selector, obj);\n  }),\n  fontface: wrapWithAttrCheck(function (name, src, params) {\n    return this.put(new Style()).font(name, src, params);\n  })\n});\nregister(Style, 'Style');\n\nvar TextPath =\n/*#__PURE__*/\nfunction (_Text) {\n  _inherits(TextPath, _Text);\n\n  // Initialize node\n  function TextPath(node) {\n    _classCallCheck(this, TextPath);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TextPath).call(this, nodeOrNew('textPath', node), node));\n  } // return the array of the path track element\n\n\n  _createClass(TextPath, [{\n    key: \"array\",\n    value: function array() {\n      var track = this.track();\n      return track ? track.array() : null;\n    } // Plot path if any\n\n  }, {\n    key: \"plot\",\n    value: function plot(d) {\n      var track = this.track();\n      var pathArray = null;\n\n      if (track) {\n        pathArray = track.plot(d);\n      }\n\n      return d == null ? pathArray : this;\n    } // Get the path element\n\n  }, {\n    key: \"track\",\n    value: function track() {\n      return this.reference('href');\n    }\n  }]);\n\n  return TextPath;\n}(Text);\nregisterMethods({\n  Container: {\n    textPath: wrapWithAttrCheck(function (text, path) {\n      // Convert text to instance if needed\n      if (!(text instanceof Text)) {\n        text = this.text(text);\n      }\n\n      return text.path(path);\n    })\n  },\n  Text: {\n    // Create path for text to run on\n    path: wrapWithAttrCheck(function (track) {\n      var importNodes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var textPath = new TextPath(); // if track is a path, reuse it\n\n      if (!(track instanceof Path)) {\n        // create path element\n        track = this.defs().path(track);\n      } // link textPath to path and add content\n\n\n      textPath.attr('href', '#' + track, xlink); // Transplant all nodes from text to textPath\n\n      var node;\n\n      if (importNodes) {\n        while (node = this.node.firstChild) {\n          textPath.node.appendChild(node);\n        }\n      } // add textPath element as child node and return textPath\n\n\n      return this.put(textPath);\n    }),\n    // Get the textPath children\n    textPath: function textPath() {\n      return this.findOne('textPath');\n    }\n  },\n  Path: {\n    // creates a textPath from this path\n    text: wrapWithAttrCheck(function (text) {\n      // Convert text to instance if needed\n      if (!(text instanceof Text)) {\n        text = new Text().addTo(this.parent()).text(text);\n      } // Create textPath from text and path and return\n\n\n      return text.path(this);\n    }),\n    targets: function targets() {\n      return baseFind('svg [href*=\"' + this.id() + '\"]');\n    }\n  }\n});\nTextPath.prototype.MorphArray = PathArray;\nregister(TextPath, 'TextPath');\n\nvar Use =\n/*#__PURE__*/\nfunction (_Shape) {\n  _inherits(Use, _Shape);\n\n  function Use(node) {\n    _classCallCheck(this, Use);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Use).call(this, nodeOrNew('use', node), node));\n  } // Use element as a reference\n\n\n  _createClass(Use, [{\n    key: \"element\",\n    value: function element(_element, file) {\n      // Set lined element\n      return this.attr('href', (file || '') + '#' + _element, xlink);\n    }\n  }]);\n\n  return Use;\n}(Shape);\nregisterMethods({\n  Container: {\n    // Create a use element\n    use: wrapWithAttrCheck(function (element, file) {\n      return this.put(new Use()).element(element, file);\n    })\n  }\n});\nregister(Use, 'Use');\n\n/* Optional Modules */\nvar SVG = makeInstance;\nextend([Svg, _Symbol, Image, Pattern, Marker], getMethodsFor('viewbox'));\nextend([Line, Polyline, Polygon, Path], getMethodsFor('marker'));\nextend(Text, getMethodsFor('Text'));\nextend(Path, getMethodsFor('Path'));\nextend(Defs, getMethodsFor('Defs'));\nextend([Text, Tspan], getMethodsFor('Tspan'));\nextend([Rect, Ellipse, Circle, Gradient], getMethodsFor('radius'));\nextend(EventTarget, getMethodsFor('EventTarget'));\nextend(Dom, getMethodsFor('Dom'));\nextend(Element, getMethodsFor('Element'));\nextend(Shape, getMethodsFor('Shape')); // extend(Element, getConstructor('Memory'))\n\nextend(Container, getMethodsFor('Container'));\nextend(Runner, getMethodsFor('Runner'));\nList.extend(getMethodNames());\nregisterMorphableType([SVGNumber, Color, Box, Matrix, SVGArray, PointArray, PathArray]);\nmakeMorphable();\n\n\n//# sourceMappingURL=svg.esm.js.map\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ \"../node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack:///../node_modules/@svgdotjs/svg.js/dist/svg.esm.js?")},"../node_modules/webpack/buildin/global.js":function(module,exports){eval('var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function("return this")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === "object") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it\'s\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n\n//# sourceURL=webpack:///../node_modules/webpack/buildin/global.js?')},"./js/main.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _utils_ie_fix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/ie-fix */ "./js/utils/ie-fix.js");\n/* harmony import */ var _modules_views_app__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modules/views/app */ "./js/modules/views/app.js");\n // Utils\n// ---------------------------------\n\nObject(_utils_ie_fix__WEBPACK_IMPORTED_MODULE_0__["ieFix"])(); // Modules\n// ---------------------------------\n\n\nnew _modules_views_app__WEBPACK_IMPORTED_MODULE_1__["appView"](document.body).init(); // import appView from \'./views/app\';\n\n//# sourceURL=webpack:///./js/main.js?')},"./js/modules/controllers/Controller.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Controller\", function() { return Controller; });\n/* harmony import */ var _models_SVGCanvas__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/SVGCanvas */ \"./js/modules/models/SVGCanvas.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\nvar Controller = /*#__PURE__*/function () {\n  function Controller(appView, placeForSVGCanvas) {\n    _classCallCheck(this, Controller);\n\n    this.fill = 'none';\n    this.stroke = 'black';\n    this.activToolsLeftBtn = 'select';\n    this.select = null;\n    this.mouse = null;\n    this.placeForSVGCanvas = placeForSVGCanvas;\n    this.appView = appView;\n    this.canvas = new _models_SVGCanvas__WEBPACK_IMPORTED_MODULE_0__[\"SVGCanvas\"](this.appView, this.placeForSVGCanvas);\n    this.onMenuButtonsClick = this.onMenuButtonsClick.bind(this);\n    this.onSaveModalClick = this.onSaveModalClick.bind(this);\n    this.onSettingsModalClick = this.onSettingsModalClick.bind(this);\n  }\n\n  _createClass(Controller, [{\n    key: \"init\",\n    value: function init() {\n      this.getActivToolsLeftBtn();\n      this.getFill();\n      this.appView.menuContainer.addEventListener('click', this.onMenuButtonsClick);\n      this.appView.saveModalWindow.addEventListener('click', this.onSaveModalClick);\n      this.appView.settingsModalWindow.addEventListener('click', this.onSettingsModalClick);\n      this.canvas.init();\n    }\n  }, {\n    key: \"getActivToolsLeftBtn\",\n    value: function getActivToolsLeftBtn() {\n      var _this = this;\n\n      var toolsLeft = document.querySelector('.tools-left');\n      toolsLeft.addEventListener('click', function (event) {\n        var target = event.target;\n\n        while (target !== toolsLeft) {\n          if (target.nodeName === 'BUTTON') {\n            _this.activToolsLeftBtn = target.id; // console.log(this.activToolsLeftBtn);\n\n            _this.canvas.removeLastEvent();\n\n            _this.canvas.drawElem(target.id);\n\n            return;\n          }\n\n          target = target.parentNode;\n        }\n      });\n    }\n  }, {\n    key: \"getFill\",\n    value: function getFill() {\n      var _this2 = this;\n\n      var toolsBottom = document.querySelector('.tools-bottom');\n      toolsBottom.addEventListener('click', function (event) {\n        var target = event.target;\n\n        while (target !== toolsBottom) {\n          if (target.nodeName === 'BUTTON') {\n            _this2.fill = target.id;\n            console.log(_this2.fill);\n\n            _this2.canvas.removeLastEvent();\n\n            _this2.canvas.fillElem(target.id);\n\n            return;\n          }\n\n          target = target.parentNode;\n        }\n      });\n    }\n  }, {\n    key: \"onMenuButtonsClick\",\n    value: function onMenuButtonsClick(_ref) {\n      var target = _ref.target;\n\n      if (target.dataset['menu'] === 'New Image') {\n        this.createNewImage();\n      }\n\n      if (target.dataset['menu'] === 'Save SVG') {\n        this.openModalSave();\n      }\n\n      if (target.dataset['menu'] === 'Document Properties') {\n        this.openModalSettings();\n      }\n\n      if (target.dataset['menu'] === 'Get SVG-code') {\n        this.openModalSvgCode();\n      }\n    }\n  }, {\n    key: \"openModalSvgCode\",\n    value: function openModalSvgCode() {\n      this.appView.svgCodeModalWindow.innerHTML = '';\n      this.appView.svgCodeModalWindow.classList.toggle('modal-svg-code--show');\n      this.appView.svgCodeModalWindow.textContent = this.appView.sheet.innerHTML;\n    }\n  }, {\n    key: \"openModalSettings\",\n    value: function openModalSettings() {\n      this.appView.settingsModalWindow.classList.add('modal-settings--show');\n    }\n  }, {\n    key: \"closeModalSettings\",\n    value: function closeModalSettings() {\n      this.appView.settingsModalWindow.classList.remove('modal-settings--show');\n    }\n  }, {\n    key: \"onSettingsModalClick\",\n    value: function onSettingsModalClick(_ref2) {\n      var target = _ref2.target;\n\n      if (target.dataset['modalSettings'] === 'save') {\n        this.changeProperties();\n        this.closeModalSettings();\n      }\n\n      if (target.dataset['modalSettings'] === 'close') {\n        this.closeModalSettings();\n      }\n    }\n  }, {\n    key: \"changeProperties\",\n    value: function changeProperties() {\n      var svgWidth = this.appView.settingsModalWindow.querySelector('[data-modal-settings=\"width\"]').value;\n      var svgHeight = this.appView.settingsModalWindow.querySelector('[data-modal-settings=\"height\"]').value;\n      this.placeForSVGCanvas.innerHTML = '';\n      this.canvas.createSvgWorkArea(svgWidth, svgHeight);\n    }\n  }, {\n    key: \"onSaveModalClick\",\n    value: function onSaveModalClick(_ref3) {\n      var target = _ref3.target;\n\n      if (target.dataset['modalSave'] === 'save') {\n        this.saveFile(this.appView.inputFileName.value);\n      }\n\n      if (target.dataset['modalSave'] === 'close') {\n        this.closeModalSave();\n      }\n    }\n  }, {\n    key: \"openModalSave\",\n    value: function openModalSave() {\n      this.appView.saveModalWindow.classList.add('modal-save--show');\n    }\n  }, {\n    key: \"closeModalSave\",\n    value: function closeModalSave() {\n      this.appView.inputFileName.value = '';\n      this.appView.errorMessage.style.visibility = 'hidden';\n      this.appView.saveModalWindow.classList.remove('modal-save--show');\n    }\n  }, {\n    key: \"createNewImage\",\n    value: function createNewImage() {\n      this.placeForSVGCanvas.innerHTML = '';\n      this.canvas.createSvgWorkArea('600', '400');\n    }\n  }, {\n    key: \"saveFile\",\n    value: function saveFile(fileName) {\n      if (fileName === '') {\n        this.appView.errorMessage.style.visibility = 'visible';\n        return;\n      }\n\n      this.closeModalSave();\n      this.download(this.canvas.canvas.svg(), fileName, 'image/svg+xml');\n    }\n  }, {\n    key: \"download\",\n    value: function download(data, filename, type) {\n      var file = new Blob([data], {\n        type: type\n      });\n\n      if (window.navigator.msSaveOrOpenBlob) {\n        // IE10+\n        window.navigator.msSaveOrOpenBlob(file, filename);\n      } else {\n        // Others\n        var a = document.createElement('a');\n        var url = URL.createObjectURL(file);\n        a.href = url;\n        a.download = filename;\n        document.body.appendChild(a);\n        a.click();\n        setTimeout(function () {\n          document.body.removeChild(a);\n          window.URL.revokeObjectURL(url);\n        }, 0);\n      }\n    }\n  }, {\n    key: \"onKeyDownProperties\",\n    value: function onKeyDownProperties() {\n      console.log(this.appView);\n    }\n  }]);\n\n  return Controller;\n}();\n\n//# sourceURL=webpack:///./js/modules/controllers/Controller.js?")},"./js/modules/models/SVGCanvas.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SVGCanvas\", function() { return SVGCanvas; });\n/* harmony import */ var _vendor_svg_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../vendor/svg.js */ \"./js/vendor/svg.js\");\n/* harmony import */ var _vendor_svg_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_vendor_svg_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _vendor_svg_select_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../vendor/svg.select.js */ \"./js/vendor/svg.select.js\");\n/* harmony import */ var _vendor_svg_select_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_vendor_svg_select_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _vendor_svg_resize_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../vendor/svg.resize.js */ \"./js/vendor/svg.resize.js\");\n/* harmony import */ var _vendor_svg_resize_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_vendor_svg_resize_js__WEBPACK_IMPORTED_MODULE_2__);\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\n\nvar SVGCanvas = /*#__PURE__*/function () {\n  function SVGCanvas(app, rootElement) {\n    _classCallCheck(this, SVGCanvas);\n\n    this.rootElement = rootElement;\n    this.canvas = null;\n    this.app = app;\n  }\n\n  _createClass(SVGCanvas, [{\n    key: \"init\",\n    value: function init() {\n      this.createSvgWorkArea('600', '400');\n    }\n  }, {\n    key: \"createSvgWorkArea\",\n    value: function createSvgWorkArea(svgWidth, svgHeight) {\n      this.canvas = SVG(this.rootElement).size(svgWidth, svgHeight);\n      this.canvas.node.classList.add('svg-work-area');\n    }\n  }, {\n    key: \"drawElem\",\n    value: function drawElem(type) {\n      var canvas = this.canvas;\n      var mouse = {\n        getX: function getX(e) {\n          return e.offsetX;\n        },\n        getY: function getY(e) {\n          return e.offsetY;\n        }\n      };\n      var selectElements = [];\n      var isDraw = false;\n      var pressKey = '';\n      var x, y, cxLast, cyLast, line, circle, rect, ellipse, text;\n      document.addEventListener('keydown', function (event) {\n        pressKey = event.key; //console.log(pressKey);\n      });\n      document.addEventListener('keyup', function (event) {\n        pressKey = 'null'; //console.log(pressKey);\n      });\n      var viewApp = this.app;\n      this.canvas.mousedown(function (e) {\n        if (pressKey !== 'Control') {\n          canvas.each(function (i, children) {\n            if (this.hasClass('selectedElem') && !this.inside(e.offsetX, e.offsetY)) {\n              this.removeClass('selectedElem');\n              this.resize('stop').selectize(false);\n              selectElements = [];\n              console.log(this.node.tagName);\n            }\n\n            if (this.hasClass('inputText') && !this.inside(e.offsetX, e.offsetY)) {\n              this.removeClass('inputText');\n            }\n          });\n        }\n\n        isDraw = true;\n        x = mouse.getX(e);\n        y = mouse.getY(e);\n\n        switch (type) {\n          case 'line':\n            line = canvas.line(x, y, x, y).stroke('black');\n            break;\n\n          case 'circle':\n            circle = canvas.circle(0).move(x, y).stroke('black').fill('transparent');\n            break;\n\n          case 'ellipse':\n            ellipse = canvas.ellipse(0, 0).move(x, y).stroke('black').fill('transparent');\n            break;\n\n          case 'rect':\n            rect = canvas.rect(0, 0).move(x, y).stroke('black').fill('transparent');\n            break;\n\n          case 'text':\n            text = canvas.text('input text').move(x, y).stroke('none').fill('black');\n            text.addClass('inputText');\n            text.font({\n              family: 'Helvetica',\n              size: 16,\n              anchor: 'left',\n              leading: '0em'\n            });\n            var textInput = '';\n            document.addEventListener('keydown', function (event) {\n              if (text.hasClass('inputText') && event.key.length < 2) {\n                textInput += event.key;\n                text.plain(\"\".concat(textInput));\n              }\n            });\n            break;\n\n          case 'select':\n            canvas.each(function (i, children) {\n              if (this.inside(e.offsetX, e.offsetY) && this.node.tagName !== 'g') {\n                if (!this.hasClass('selectedElem')) {\n                  selectElements.push(this);\n                }\n\n                this.addClass('selectedElem');\n                this.selectize().resize();\n\n                var arrayG = _toConsumableArray(document.querySelector('#SvgjsSvg1001').childNodes).filter(function (value) {\n                  return value.tagName === 'g';\n                });\n\n                var arrayElementG = _toConsumableArray(arrayG[0].childNodes);\n\n                arrayElementG.shift();\n\n                for (var _i = 0; _i < arrayElementG.length; _i += 1) {\n                  arrayElementG[_i].addEventListener('mousemove', function () {\n                    viewApp.updateFunctionalArea(selectElements[0], true, false);\n                  });\n                }\n\n                cxLast = this.cx();\n                cyLast = this.cy();\n              }\n            });\n            viewApp.functionalAreaContainer.classList.remove('visibility');\n\n            if (selectElements.length === 1) {\n              (function () {\n                viewApp.updateFunctionalArea(selectElements[0], true, true);\n\n                var arraySelect = _toConsumableArray(viewApp.functionalAreaContainer.childNodes).filter(function (value) {\n                  return value.tagName === 'SELECT';\n                });\n\n                if (arraySelect.length !== 0) {\n                  viewApp.createEventForSelect(arraySelect[0], selectElements[0], 'family');\n                } // Delete SVG Element\n\n\n                var deleteBtn = _toConsumableArray(viewApp.functionalAreaContainer.childNodes).filter(function (value) {\n                  return value.tagName === 'BUTTON';\n                })[0];\n\n                deleteBtn.addEventListener('click', function () {\n                  for (var i = 0; i < selectElements.length; i += 1) {\n                    selectElements[i].resize('stop').selectize(false);\n                    selectElements[i].remove();\n                    selectElements = [];\n                  }\n\n                  viewApp.removeFunctionalAreaDataElements();\n                });\n\n                var arrayProperties = _toConsumableArray(viewApp.functionalAreaContainer.childNodes).filter(function (value) {\n                  return value.tagName === 'LABEL';\n                });\n\n                var _loop = function _loop(i) {\n                  arrayProperties[i].childNodes[1].addEventListener('keyup', function () {\n                    var objSVG = selectElements[0];\n\n                    if (arrayProperties[i].childNodes[1].value.length === 0) {\n                      switch (arrayProperties[i].textContent) {\n                        case 'angle':\n                          objSVG.rotate(\"\".concat(arrayProperties[i].childNodes[1].value));\n                          break;\n\n                        case 'blur':\n                          break;\n\n                        case 'size':\n                          objSVG.attr('font-size', arrayProperties[i].childNodes[1].getAttribute('placeholder'));\n                          break;\n\n                        default:\n                          objSVG.attr(\"\".concat(arrayProperties[i].textContent), arrayProperties[i].childNodes[1].getAttribute('placeholder'));\n                          break;\n                      }\n                    } else {\n                      console.log(arrayProperties[i].childNodes[1].value);\n\n                      switch (arrayProperties[i].textContent) {\n                        case 'angle':\n                          objSVG.rotate(\"\".concat(arrayProperties[i].childNodes[1].value));\n                          break;\n\n                        case 'blur':\n                          break;\n\n                        case 'size':\n                          objSVG.attr('font-size', arrayProperties[i].childNodes[1].value);\n                          break;\n\n                        default:\n                          objSVG.attr(\"\".concat(arrayProperties[i].textContent), arrayProperties[i].childNodes[1].value);\n                          break;\n                      }\n                    }\n                  });\n                };\n\n                for (var i = 0; i < arrayProperties.length; i += 1) {\n                  _loop(i);\n                }\n              })();\n            } else if (selectElements.length > 1) {\n              viewApp.updateFunctionalArea(selectElements, false, true);\n              var arrayAlignment = viewApp.functionalAreaContainer.childNodes;\n\n              var _loop2 = function _loop2(i) {\n                arrayAlignment[i].addEventListener('click', function () {\n                  console.log(i);\n\n                  switch (i) {\n                    case 0:\n                      selectElements.forEach(function (item) {\n                        return item.resize('stop').selectize(false).remove();\n                      });\n                      break;\n\n                    case 2:\n                      selectElements.forEach(function (item) {\n                        return item.x(0);\n                      });\n                      break;\n\n                    case 3:\n                      selectElements.forEach(function (item) {\n                        if (item.node.tagName === 'text') {\n                          item.x(canvas.width() - item.length());\n                        } else item.x(canvas.width() - item.width());\n                      });\n                      break;\n\n                    case 4:\n                      selectElements.forEach(function (item) {\n                        return item.y(0);\n                      });\n                      break;\n\n                    case 5:\n                      selectElements.forEach(function (item) {\n                        if (item.node.tagName === 'text') {\n                          item.y(canvas.height() - 1.11 * item.attr('size'));\n                        } else item.y(canvas.height() - item.height());\n                      });\n                      break;\n\n                    case 6:\n                      selectElements.forEach(function (item) {\n                        return item.cx(canvas.width() / 2);\n                      });\n                      break;\n\n                    case 7:\n                      selectElements.forEach(function (item) {\n                        return item.cy(canvas.height() / 2);\n                      });\n                      break;\n                  }\n                  /*\n                  for (let j = 0; j < selectElements.length; j += 1) {\n                    const x = selectElements[j].attr().x;\n                    const y = selectElements[j].attr().y;\n                    switch (i) {\n                      case 2:\n                        selectElements[j].attr('x', 0);\n                        break;\n                      case 3:\n                        selectElements[j].attr('x', canvas.attr().width - selectElements[j].attr().width);\n                        break;\n                      case 4:\n                        selectElements[j].attr('y', 0);\n                        break;\n                      case 5:\n                        selectElements[j].attr('y', canvas.attr().height - selectElements[j].attr().height);\n                        break;\n                      case 6:\n                        selectElements[j].attr('x', (canvas.attr().width - selectElements[j].attr().width) / 2);\n                        break;\n                      case 7:\n                        selectElements[j].attr('y', (canvas.attr().height - selectElements[j].attr().height) / 2);\n                        break;\n                    }\n                  }*/\n\n                });\n              };\n\n              for (var i = 0; i < arrayAlignment.length; i += 1) {\n                _loop2(i);\n              }\n            } else {\n              viewApp.removeFunctionalAreaDataElements();\n            }\n\n            break;\n        }\n      });\n      this.canvas.mousemove(function (e) {\n        if (isDraw) {\n          switch (type) {\n            case 'line':\n              line.attr({\n                x2: mouse.getX(e),\n                y2: mouse.getY(e)\n              });\n              break;\n\n            case 'circle':\n              circle.attr({\n                r: Math.sqrt(Math.pow(mouse.getX(e) - x, 2) + Math.pow(mouse.getY(e) - y, 2))\n              });\n              break;\n\n            case 'ellipse':\n              ellipse.attr({\n                rx: Math.abs(mouse.getX(e) - x),\n                ry: Math.abs(mouse.getY(e) - y)\n              });\n              break;\n\n            case 'rect':\n              var xNew, yNew;\n\n              if (mouse.getX(e) < x) {\n                xNew = mouse.getX(e);\n              } else if (mouse.getX(e) >= x) {\n                xNew = x;\n              }\n\n              if (mouse.getY(e) < y) {\n                yNew = mouse.getY(e);\n              } else if (mouse.getY(e) >= y) {\n                yNew = y;\n              }\n\n              rect.attr({\n                width: Math.abs(mouse.getX(e) - x),\n                height: Math.abs(mouse.getY(e) - y),\n                x: xNew,\n                y: yNew\n              });\n              break;\n\n            case 'text':\n              text.font({\n                family: 'Helvetica',\n                size: Math.abs(mouse.getY(e) - y) //anchor:   'middle',\n                //leading:  '1.5em'\n\n              });\n              break;\n\n            case 'select':\n              if (pressKey !== 'Control' && selectElements.length === 1) {\n                canvas.each(function (i, children) {\n                  if (this.hasClass('selectedElem')) {\n                    this.cx(mouse.getX(e) - x + cxLast);\n                    this.cy(mouse.getY(e) - y + cyLast);\n                    viewApp.updateFunctionalArea(this, true, false);\n                  }\n                });\n              }\n\n              break;\n          }\n        }\n      });\n      this.canvas.mouseup(function (e) {\n        isDraw = false; //console.log('reload block')\n      });\n    }\n  }, {\n    key: \"removeLastEvent\",\n    value: function removeLastEvent() {\n      this.canvas.mousedown(null);\n      this.canvas.mousemove(null);\n    }\n  }, {\n    key: \"fillElem\",\n    value: function fillElem(color) {\n      var canvas = this.canvas;\n      this.canvas.mousedown(function (e) {\n        canvas.each(function (i, children) {\n          if (this.inside(e.offsetX, e.offsetY)) this.fill(color);\n        }); //canvas.children().filter((item) => item.inside(e.offsetX, e.offsetY)).fill(color);\n      });\n    }\n  }]);\n\n  return SVGCanvas;\n}();\n\n//# sourceURL=webpack:///./js/modules/models/SVGCanvas.js?")},"./js/modules/views/app.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"appView\", function() { return appView; });\n/* harmony import */ var _svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @svgdotjs/svg.js */ \"../node_modules/@svgdotjs/svg.js/dist/svg.esm.js\");\n/* harmony import */ var _controllers_Controller__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../controllers/Controller */ \"./js/modules/controllers/Controller.js\");\n/* harmony import */ var _colorPicker__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./colorPicker */ \"./js/modules/views/colorPicker.js\");\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\n\nvar toolsBottomBtnName = ['red', 'green', 'blue'];\nvar toolsLeftBtnName = ['select', 'rect', 'circle', 'line', 'polyline', 'text', 'path', 'ellipse'];\nvar MENU_BUTTONS_NAMES = ['New Image', 'Save SVG', 'Import SVG', 'Document Properties', 'Get SVG-code', 'Undo', 'Redo'];\nvar appView = /*#__PURE__*/function () {\n  function appView(rootElement) {\n    _classCallCheck(this, appView);\n\n    this.rootElement = rootElement;\n    this.headerElement = null;\n    this.headerContainer = null;\n    this.footerElement = null;\n    this.footerContainer = null;\n    this.contentElement = null;\n    this.contentContainer = null;\n    this.toolsTopContainer = null;\n    this.toolsBottomContainer = null;\n    this.toolsLeftContainer = null;\n    this.workAreaContainer = null;\n    this.menuContainer = null;\n    this.functionalAreaContainer = null;\n    this.saveModalWindow = null;\n    this.inputFileName = null;\n    this.sheet = null;\n    this.settingsModalWindow = null;\n    this.svgCodeModalWindow = null;\n    this.menuButtonsDataAttribute = 'menu';\n    this.saveElementsDataAttribute = 'modalSave';\n    this.settingsElementsDataAttribute = 'modalSettings';\n    this.countFamily = 5; // this.countAnchor = 3;\n\n    this.palleteCanvas = null;\n  }\n\n  _createClass(appView, [{\n    key: \"init\",\n    value: function init() {\n      var wrapper = this.createWrapper();\n      this.renderHeader();\n      this.renderContent();\n      this.renderFooter();\n      this.rootElement.appendChild(wrapper);\n      wrapper.append(this.headerElement, this.contentElement, this.footerElement);\n      var controller = new _controllers_Controller__WEBPACK_IMPORTED_MODULE_1__[\"Controller\"](this, this.sheet);\n      controller.init();\n      this.palleteCanvas = new _colorPicker__WEBPACK_IMPORTED_MODULE_2__[\"ColorPicker\"](this.workAreaContainer);\n      this.palleteCanvas.init();\n    }\n  }, {\n    key: \"getCurrentRotation\",\n    value: function getCurrentRotation(item) {\n      var transform = item.attr().transform;\n\n      if (typeof transform !== 'undefined') {\n        var values = transform.split('(')[1].split(')')[0].split(',');\n        var angle = Math.round(Math.atan2(values[1], values[0]) * (180 / Math.PI));\n        return angle < 0 ? angle + 360 : angle;\n      }\n\n      return 0;\n    }\n  }, {\n    key: \"createSelectElement\",\n    value: function createSelectElement(typeElement) {\n      var select = document.createElement('select');\n      select.classList.add(\"tools-top__functional-area__select-\".concat(typeElement));\n\n      if (typeElement === 'family') {\n        var familyClasses = ['serif', 'sans-serif', 'cursive', 'fantasy', 'monospace'];\n\n        for (var i = 0; i < this.countFamily; i += 1) {\n          var option = document.createElement('option');\n          option.textContent = familyClasses[i];\n          select.append(option);\n        }\n      }\n\n      return select;\n    }\n  }, {\n    key: \"createEventForSelect\",\n    value: function createEventForSelect(elementEvent, item, typeElement) {\n      elementEvent.addEventListener('change', function () {\n        if (typeElement === 'family') {\n          item.attr('font-family', elementEvent.value);\n        } else if (typeElement === 'anchor') {\n          item.attr('text-anchor', elementEvent.value);\n        }\n      });\n    }\n  }, {\n    key: \"createFunctionalAreaDataElements\",\n    value: function createFunctionalAreaDataElements(type) {\n      var arrayNameBtn;\n\n      switch (type) {\n        case 'rect':\n          arrayNameBtn = ['delete', 'convert', 'id', 'class', 'angle', 'blur', 'x', 'y', 'width', 'height'];\n          break;\n\n        case 'circle':\n          arrayNameBtn = ['delete', 'convert', 'id', 'class', 'angle', 'blur', 'cx', 'cy', 'r'];\n          break;\n\n        case 'line':\n          arrayNameBtn = ['delete', 'convert', 'id', 'class', 'angle', 'blur', 'x1', 'y1', 'x2', 'y2'];\n          break;\n\n        case 'text':\n          arrayNameBtn = ['delete', 'convert', 'id', 'class', 'angle', 'blur', 'x', 'y', 'size', 'family', 'mark'];\n          break;\n\n        case 'ellipse':\n          arrayNameBtn = ['delete', 'convert', 'id', 'class', 'angle', 'blur', 'cx', 'cy', 'rx', 'ry'];\n          break;\n      }\n\n      for (var i = 0; i < arrayNameBtn.length; i += 1) {\n        if (arrayNameBtn[i] === 'delete' || arrayNameBtn[i] === 'convert') {\n          var btn = document.createElement('button');\n          btn.setAttribute('type', 'button');\n          btn.classList.add(\"tools-top__functional-area__btn-\".concat(arrayNameBtn[i]));\n          this.functionalAreaContainer.append(btn);\n\n          if (arrayNameBtn[i] === 'delete') {\n            btn.innerHTML = '<i class=\"material-icons\">disabled_by_default</i>';\n          } else {\n            btn.innerHTML = '<i class=\"material-icons\">timeline</i>';\n          }\n        } else if (arrayNameBtn[i] === 'family') {\n          this.functionalAreaContainer.append(this.createSelectElement(arrayNameBtn[i]));\n        } else {\n          var _btn = document.createElement('input');\n\n          var label = document.createElement('label');\n          var span = document.createElement('span');\n          span.textContent = arrayNameBtn[i];\n\n          _btn.setAttribute('type', 'text');\n\n          _btn.setAttribute('placeholder', \"\".concat(arrayNameBtn[i]));\n\n          _btn.classList.add(\"tools-top__functional-area__btn-\".concat(arrayNameBtn[i]));\n\n          label.append(span, _btn);\n          this.functionalAreaContainer.append(label);\n        }\n      }\n    }\n  }, {\n    key: \"createFunctionalAreaAlignmentElements\",\n    value: function createFunctionalAreaAlignmentElements() {\n      var alignment = ['delete', 'convert', 'left', 'right', 'top', 'bottom', 'center', 'middle'];\n      var alignmentIcons = ['disabled_by_default', 'timeline', 'align_horizontal_left', 'align_horizontal_right', 'align_vertical_top', 'align_vertical_bottom', 'align_horizontal_center', 'align_vertical_center'];\n\n      for (var i = 0; i < alignment.length; i += 1) {\n        var btn = document.createElement('button');\n        btn.setAttribute('type', 'button');\n        btn.classList.add(\"tools-top__functional-area__btn-\".concat(alignment[i]));\n        btn.innerHTML = \"<i class=\\\"material-icons\\\">\".concat(alignmentIcons[i], \"</i>\");\n        this.functionalAreaContainer.append(btn);\n      }\n    }\n  }, {\n    key: \"removeFunctionalAreaDataElements\",\n    value: function removeFunctionalAreaDataElements() {\n      for (var i = 0; i < this.functionalAreaContainer.childNodes.length; i += 1) {\n        this.functionalAreaContainer.childNodes[i].remove();\n        i -= 1;\n      }\n    }\n  }, {\n    key: \"updateFunctionalArea\",\n    value: function updateFunctionalArea(item, flag, flagCreate) {\n      if (flagCreate) {\n        this.removeFunctionalAreaDataElements();\n      }\n\n      if (flag) {\n        var attribute = item.attr();\n\n        if (flagCreate) {\n          this.createFunctionalAreaDataElements(item.type, item);\n        }\n\n        var arrayChildFunctionalArea = _toConsumableArray(this.functionalAreaContainer.childNodes).filter(function (value) {\n          return value.tagName === 'LABEL';\n        });\n\n        switch (item.type) {\n          case 'rect':\n            arrayChildFunctionalArea[0].childNodes[1].setAttribute('placeholder', attribute.id); // id\n\n            arrayChildFunctionalArea[2].childNodes[1].setAttribute('placeholder', this.getCurrentRotation(item)); // angle\n\n            arrayChildFunctionalArea[3].childNodes[1].setAttribute('placeholder', 0); // blur\n\n            arrayChildFunctionalArea[4].childNodes[1].setAttribute('placeholder', attribute.x); // x\n\n            arrayChildFunctionalArea[5].childNodes[1].setAttribute('placeholder', attribute.y); // y\n\n            arrayChildFunctionalArea[6].childNodes[1].setAttribute('placeholder', attribute.width); // width\n\n            arrayChildFunctionalArea[7].childNodes[1].setAttribute('placeholder', attribute.height); // height\n\n            break;\n\n          case 'circle':\n            arrayChildFunctionalArea[0].childNodes[1].setAttribute('placeholder', attribute.id); // id\n\n            arrayChildFunctionalArea[2].childNodes[1].setAttribute('placeholder', this.getCurrentRotation(item)); // angle\n\n            arrayChildFunctionalArea[3].childNodes[1].setAttribute('placeholder', 0); // blur\n\n            arrayChildFunctionalArea[4].childNodes[1].setAttribute('placeholder', attribute.cx); // cx\n\n            arrayChildFunctionalArea[5].childNodes[1].setAttribute('placeholder', attribute.cy); // cy\n\n            arrayChildFunctionalArea[6].childNodes[1].setAttribute('placeholder', attribute.r); // r\n\n            break;\n\n          case 'line':\n            arrayChildFunctionalArea[0].childNodes[1].setAttribute('placeholder', attribute.id); // id\n\n            arrayChildFunctionalArea[2].childNodes[1].setAttribute('placeholder', this.getCurrentRotation(item)); // angle\n\n            arrayChildFunctionalArea[3].childNodes[1].setAttribute('placeholder', 0); // blur\n\n            arrayChildFunctionalArea[4].childNodes[1].setAttribute('placeholder', attribute.x1);\n            arrayChildFunctionalArea[5].childNodes[1].setAttribute('placeholder', attribute.y1);\n            arrayChildFunctionalArea[6].childNodes[1].setAttribute('placeholder', attribute.x2);\n            arrayChildFunctionalArea[7].childNodes[1].setAttribute('placeholder', attribute.y1);\n            break;\n\n          case 'text':\n            console.log(item.attr());\n            arrayChildFunctionalArea[0].childNodes[1].setAttribute('placeholder', attribute.id); // id\n\n            arrayChildFunctionalArea[2].childNodes[1].setAttribute('placeholder', this.getCurrentRotation(item)); // angle\n\n            arrayChildFunctionalArea[3].childNodes[1].setAttribute('placeholder', 0); // blur\n\n            arrayChildFunctionalArea[4].childNodes[1].setAttribute('placeholder', attribute.x);\n            arrayChildFunctionalArea[5].childNodes[1].setAttribute('placeholder', attribute.y);\n            arrayChildFunctionalArea[6].childNodes[1].setAttribute('placeholder', attribute.size); // здесь долджно быть начертание\n\n            break;\n\n          case 'ellipse':\n            arrayChildFunctionalArea[0].childNodes[1].setAttribute('placeholder', attribute.id); // id\n\n            arrayChildFunctionalArea[2].childNodes[1].setAttribute('placeholder', this.getCurrentRotation(item)); // angle\n\n            arrayChildFunctionalArea[3].childNodes[1].setAttribute('placeholder', 0); // blur\n\n            arrayChildFunctionalArea[4].childNodes[1].setAttribute('placeholder', attribute.cx);\n            arrayChildFunctionalArea[5].childNodes[1].setAttribute('placeholder', attribute.cy);\n            arrayChildFunctionalArea[6].childNodes[1].setAttribute('placeholder', attribute.rx);\n            arrayChildFunctionalArea[7].childNodes[1].setAttribute('placeholder', attribute.ry);\n        }\n      } else {\n        this.createFunctionalAreaAlignmentElements();\n      }\n    }\n  }, {\n    key: \"createSvgCodeModal\",\n    value: function createSvgCodeModal() {\n      var svgCodeModal = document.createElement('div');\n      svgCodeModal.classList.add('modal-svg-code'); // const preElement = document.createElement('pre');\n      // const codeElement = document.createElement('code');\n      // preElement.appendChild(codeElement);\n      // svgCodeModal.appendChild(preElement);\n      // console.log(svgCodeModal)\n\n      return svgCodeModal;\n    }\n  }, {\n    key: \"createSettingsModal\",\n    value: function createSettingsModal() {\n      var settingsModal = document.createElement('div');\n      settingsModal.classList.add('modal-settings');\n      var modalTitle = document.createElement('div');\n      modalTitle.textContent = 'SVG-Document Settings';\n      modalTitle.classList.add('modal-settings__title');\n      var widthSvg = document.createElement('div');\n      widthSvg.classList.add('modal-settings__svg-width');\n      var widthSvgInput = document.createElement('input');\n      widthSvgInput.setAttribute('type', 'text');\n      widthSvgInput.setAttribute('id', 'svg-width-input');\n      widthSvgInput.dataset[\"\".concat(this.settingsElementsDataAttribute)] = 'width';\n      var widthSvgLabel = document.createElement('label');\n      widthSvgLabel.setAttribute('for', 'svg-width-input');\n      widthSvgLabel.textContent = 'SVG-area Width';\n      widthSvg.append(widthSvgLabel, widthSvgInput);\n      var heightSvg = document.createElement('div');\n      heightSvg.classList.add('modal-settings__svg-height');\n      var heightSvgInput = document.createElement('input');\n      heightSvgInput.setAttribute('type', 'text');\n      heightSvgInput.setAttribute('id', 'svg-height-input');\n      heightSvgInput.dataset[\"\".concat(this.settingsElementsDataAttribute)] = 'height';\n      var heightSvgLabel = document.createElement('label');\n      heightSvgLabel.setAttribute('for', 'svg-height-input');\n      heightSvgLabel.textContent = 'SVG-area Height';\n      heightSvg.append(heightSvgLabel, heightSvgInput);\n      var saveButton = document.createElement('button');\n      saveButton.setAttribute('type', 'button');\n      saveButton.textContent = 'Save';\n      saveButton.classList.add('modal-settings__save-btn');\n      saveButton.dataset[\"\".concat(this.settingsElementsDataAttribute)] = 'save';\n      var closeButton = document.createElement('button');\n      closeButton.setAttribute('type', 'button');\n      closeButton.textContent = 'Close';\n      closeButton.classList.add('modal-settings__close-btn');\n      closeButton.dataset[\"\".concat(this.settingsElementsDataAttribute)] = 'close';\n      settingsModal.append(modalTitle, widthSvg, heightSvg, saveButton, closeButton);\n      return settingsModal;\n    }\n  }, {\n    key: \"createSaveModal\",\n    value: function createSaveModal() {\n      var saveModal = document.createElement('div');\n      saveModal.classList.add('modal-save');\n      this.inputFileName = document.createElement('input');\n      this.inputFileName.setAttribute('type', 'text');\n      this.inputFileName.classList.add('modal-save__file-name');\n      this.inputFileName.dataset[\"\".concat(this.saveElementsDataAttribute)] = 'name';\n      var saveButton = document.createElement('button');\n      saveButton.setAttribute('type', 'button');\n      saveButton.textContent = 'Save';\n      saveButton.classList.add('modal-save__save-btn');\n      saveButton.dataset[\"\".concat(this.saveElementsDataAttribute)] = 'save';\n      var closeButton = document.createElement('button');\n      closeButton.setAttribute('type', 'button');\n      closeButton.textContent = 'Close';\n      closeButton.classList.add('modal-save__close-btn');\n      closeButton.dataset[\"\".concat(this.saveElementsDataAttribute)] = 'close';\n      this.errorMessage = document.createElement('div');\n      this.errorMessage.textContent = 'Please enter the file name';\n      this.errorMessage.style.visibility = 'hidden';\n      saveModal.append(this.errorMessage, this.inputFileName, saveButton, closeButton);\n      return saveModal;\n    }\n  }, {\n    key: \"createMenuContainer\",\n    value: function createMenuContainer() {\n      var _this = this;\n\n      var menuContainer = document.createElement('div');\n      menuContainer.classList.add('tools-top__menu-area');\n      MENU_BUTTONS_NAMES.forEach(function (item) {\n        var button = document.createElement('button');\n        button.setAttribute('type', 'button');\n        button.dataset[\"\".concat(_this.menuButtonsDataAttribute)] = \"\".concat(item);\n        button.textContent = item;\n        menuContainer.appendChild(button);\n      });\n      return menuContainer;\n    }\n  }, {\n    key: \"createFunctionalArea\",\n    value: function createFunctionalArea() {\n      var functionalArea = document.createElement('div');\n      functionalArea.classList.add('tools-top__functional-area');\n      return functionalArea;\n    }\n  }, {\n    key: \"createToolsTop\",\n    value: function createToolsTop() {\n      var toolsTop = document.createElement('div');\n      toolsTop.classList.add('tools-top');\n      this.menuContainer = this.createMenuContainer();\n      this.functionalAreaContainer = this.createFunctionalArea();\n      toolsTop.append(this.menuContainer, this.functionalAreaContainer);\n      return toolsTop;\n    }\n  }, {\n    key: \"createWorkArea\",\n    value: function createWorkArea() {\n      var workAreaContainer = document.createElement('div');\n      workAreaContainer.className = 'work-area';\n      var field = document.createElement('div');\n      field.id = 'field';\n      workAreaContainer.append(field);\n      this.sheet = document.createElement('div');\n      this.sheet.className = 'sheet';\n      this.sheet.id = 'sheet';\n      field.append(this.sheet);\n      return workAreaContainer;\n    }\n  }, {\n    key: \"createToolsBottom\",\n    value: function createToolsBottom() {\n      var toolsBottomContainer = document.createElement('div');\n      toolsBottomContainer.className = 'tools-bottom';\n      toolsBottomBtnName.forEach(function (item) {\n        var btn = document.createElement('button');\n        btn.id = \"\".concat(item);\n        btn.style.background = item;\n        toolsBottomContainer.append(btn);\n      });\n      return toolsBottomContainer;\n    }\n  }, {\n    key: \"createToolsLeft\",\n    value: function createToolsLeft() {\n      var toolsLeftContainer = document.createElement('div');\n      toolsLeftContainer.className = 'tools-left';\n      toolsLeftBtnName.forEach(function (item) {\n        var btn = document.createElement('button');\n        btn.id = \"\".concat(item);\n        btn.innerHTML = item;\n        toolsLeftContainer.append(btn);\n      });\n      return toolsLeftContainer;\n    }\n  }, {\n    key: \"createWrapper\",\n    value: function createWrapper() {\n      var wrapper = document.createElement('div');\n      wrapper.classList.add('wrapper');\n      return wrapper;\n    }\n  }, {\n    key: \"renderHeader\",\n    value: function renderHeader() {\n      this.headerElement = document.createElement('header');\n      this.headerElement.classList.add('header');\n      this.headerContainer = document.createElement('div');\n      this.headerContainer.classList.add('container');\n      this.headerContainer.textContent = 'SVG EDITOR';\n      this.headerElement.appendChild(this.headerContainer);\n    }\n  }, {\n    key: \"renderContent\",\n    value: function renderContent() {\n      this.svgCodeModalWindow = this.createSvgCodeModal();\n      this.settingsModalWindow = this.createSettingsModal();\n      this.saveModalWindow = this.createSaveModal();\n      this.toolsTopContainer = this.createToolsTop();\n      this.toolsBottomContainer = this.createToolsBottom();\n      this.toolsLeftContainer = this.createToolsLeft();\n      this.workAreaContainer = this.createWorkArea();\n      this.contentElement = document.createElement('main');\n      this.contentElement.classList.add('main');\n      this.contentContainer = document.createElement('div');\n      this.contentContainer.classList.add('container');\n      this.contentElement.appendChild(this.contentContainer);\n      this.toolsRightContainer = document.createElement('div');\n      this.toolsRightContainer.className = 'tools-right';\n      this.contentContainer.append(this.toolsTopContainer, this.toolsLeftContainer, this.toolsRightContainer, this.toolsBottomContainer, this.workAreaContainer, this.saveModalWindow, this.settingsModalWindow, this.svgCodeModalWindow);\n    }\n  }, {\n    key: \"renderFooter\",\n    value: function renderFooter() {\n      var yearSpan = document.createElement('span');\n      yearSpan.classList.add('copyright__year');\n      yearSpan.textContent = '2020 ©';\n      var by = document.createElement('span');\n      by.textContent = 'by';\n      var student1Link = document.createElement('a');\n      student1Link.classList.add('copyright__student-link');\n      student1Link.setAttribute('href', 'https://github.com/alexk08');\n      student1Link.setAttribute('target', '__blank');\n      student1Link.textContent = 'Aleksandr Krasinikov';\n      var student2Link = document.createElement('a');\n      student2Link.classList.add('copyright__student-link');\n      student2Link.setAttribute('href', 'https://github.com/11alexey11');\n      student2Link.setAttribute('target', '__blank');\n      student2Link.textContent = 'Alexey Yanvarev';\n      var student3Link = document.createElement('a');\n      student3Link.classList.add('copyright__student-link');\n      student3Link.setAttribute('href', 'https://github.com/gtm003');\n      student3Link.setAttribute('target', '__blank');\n      student3Link.textContent = 'Tatyana Grigorovich';\n      var logo = document.createElement('img');\n      logo.classList.add('copyright__logo-rs');\n      logo.setAttribute('src', 'img/svg/rs_school_js.svg');\n      logo.setAttribute('alt', 'Logo RS School');\n      logo.setAttribute('width', '100px');\n      var courseLink = document.createElement('a');\n      courseLink.classList.add('copyright__course-link');\n      courseLink.setAttribute('href', 'https://rs.school/js/');\n      courseLink.setAttribute('target', '__blank');\n      courseLink.appendChild(logo);\n      var copyrightElement = document.createElement('div');\n      copyrightElement.classList.add('copyright');\n      copyrightElement.append(yearSpan, by, student1Link, student2Link, student3Link, courseLink);\n      this.footerElement = document.createElement('footer');\n      this.footerElement.classList.add('footer');\n      this.footerContainer = document.createElement('div');\n      this.footerContainer.classList.add('container');\n      this.footerContainer.append(copyrightElement);\n      this.footerElement.appendChild(this.footerContainer);\n    }\n  }]);\n\n  return appView;\n}();\n\n//# sourceURL=webpack:///./js/modules/views/app.js?")},"./js/modules/views/colorPicker.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ColorPicker\", function() { return ColorPicker; });\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar ColorPicker = /*#__PURE__*/function () {\n  function ColorPicker(rootElement) {\n    _classCallCheck(this, ColorPicker);\n\n    this.rootElement = rootElement;\n    this.pallete = null;\n    this.color = null;\n  }\n\n  _createClass(ColorPicker, [{\n    key: \"init\",\n    value: function init() {\n      var selectColorContainer = document.createElement('div');\n      selectColorContainer.classList.add('pallete_canvas');\n      this.rootElement.append(selectColorContainer);\n      var palleteCanvas = document.createElement('canvas');\n      palleteCanvas.classList.add('pallete_canvas');\n      selectColorContainer.append(palleteCanvas);\n      var ctx = palleteCanvas.getContext('2d'); //ctx.fillStyle = 'rgb(200, 0, 0)';\n      //ctx.fillRect(10, 10, 50, 50);\n\n      var gradient = palleteCanvas.getContext('2d').createLinearGradient(0, 0, palleteCanvas.width, 0);\n      gradient.addColorStop(0, '#ff0000');\n      gradient.addColorStop(1 / 6, '#ffff00');\n      gradient.addColorStop(1 / 6 * 2, '#00ff00');\n      gradient.addColorStop(1 / 6 * 3, '#00ffff');\n      gradient.addColorStop(1 / 6 * 4, '#0000ff');\n      gradient.addColorStop(1 / 6 * 5, '#ff00ff');\n      gradient.addColorStop(1, '#ff0000');\n      palleteCanvas.getContext('2d').fillStyle = gradient;\n      palleteCanvas.getContext('2d').fillRect(0, 0, palleteCanvas.width, palleteCanvas.height);\n      gradient = palleteCanvas.getContext('2d').createLinearGradient(0, 0, 0, palleteCanvas.height);\n      gradient.addColorStop(0, 'rgba(255, 255, 255, 1)');\n      gradient.addColorStop(0.5, 'rgba(255, 255, 255, 0)');\n      gradient.addColorStop(1, 'rgba(255, 255, 255, 0)');\n      palleteCanvas.getContext('2d').fillStyle = gradient;\n      palleteCanvas.getContext('2d').fillRect(0, 0, palleteCanvas.width, palleteCanvas.height);\n      gradient = palleteCanvas.getContext('2d').createLinearGradient(0, 0, 0, palleteCanvas.height);\n      gradient.addColorStop(0, 'rgba(0, 0, 0, 0)');\n      gradient.addColorStop(0.5, 'rgba(0, 0, 0, 0)');\n      gradient.addColorStop(1, 'rgba(0, 0, 0, 1)');\n      palleteCanvas.getContext('2d').fillStyle = gradient;\n      palleteCanvas.getContext('2d').fillRect(0, 0, palleteCanvas.width, palleteCanvas.height);\n\n      function pick(e) {\n        var x = e.layerX;\n        var y = e.layerY;\n        var pixel = ctx.getImageData(x, y, 1, 1);\n        var data = pixel.data;\n        var rgba = 'rgba(' + data[0] + ', ' + data[1] + ', ' + data[2] + ', ' + data[3] / 255 + ')';\n        console.log(rgba);\n      }\n\n      palleteCanvas.addEventListener('click', pick);\n    }\n  }]);\n\n  return ColorPicker;\n}();\n\n//# sourceURL=webpack:///./js/modules/views/colorPicker.js?")},"./js/utils/ie-fix.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ieFix", function() { return ieFix; });\n/* eslint-disable */\nvar ieFix = function ieFix() {\n  // Polyfills\n  //---------------------------------\n  // forEach\n  if (window.NodeList && !NodeList.prototype.forEach) {\n    NodeList.prototype.forEach = function (callback, thisArg) {\n      thisArg = thisArg || window;\n\n      for (var i = 0; i < this.length; i++) {\n        callback.call(thisArg, this[i], i, this);\n      }\n    };\n  } // includes\n\n\n  if (!Array.prototype.includes) {\n    Object.defineProperty(Array.prototype, \'includes\', {\n      value: function value(searchElement, fromIndex) {\n        if (this == null) {\n          throw new TypeError(\'"this" is null or not defined\');\n        }\n\n        var o = Object(this);\n        var len = o.length >>> 0;\n\n        if (len === 0) {\n          return false;\n        }\n\n        var n = fromIndex | 0;\n        var k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);\n\n        function sameValueZero(x, y) {\n          return x === y || typeof x === \'number\' && typeof y === \'number\' && isNaN(x) && isNaN(y);\n        }\n\n        while (k < len) {\n          if (sameValueZero(o[k], searchElement)) {\n            return true;\n          }\n\n          k++;\n        }\n\n        return false;\n      }\n    });\n  } // matches\n\n\n  if (!Element.prototype.matches) {\n    Element.prototype.matches = Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector || function (s) {\n      var matches = (this.document || this.ownerDocument).querySelectorAll(s);\n      var i = matches.length; // eslint-disable-next-line no-empty\n\n      while (--i >= 0 && matches.item(i) !== this) {}\n\n      return i > -1;\n    };\n  } // closest\n\n\n  if (!Element.prototype.matches) {\n    Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\n  }\n\n  if (!Element.prototype.closest) {\n    Element.prototype.closest = function (s) {\n      var el = this;\n\n      do {\n        if (el.matches(s)) {\n          return el;\n        }\n\n        el = el.parentElement || el.parentNode;\n      } while (el !== null && el.nodeType === 1);\n\n      return null;\n    };\n  } // prepend\n\n\n  (function (arr) {\n    arr.forEach(function (item) {\n      if (item.hasOwnProperty("prepend")) {\n        return;\n      }\n\n      Object.defineProperty(item, "prepend", {\n        configurable: true,\n        enumerable: true,\n        writable: true,\n        value: function prepend() {\n          // eslint-disable-next-line prefer-rest-params\n          var argArr = Array.prototype.slice.call(arguments);\n          var docFrag = document.createDocumentFragment();\n          argArr.forEach(function (argItem) {\n            var isNode = argItem instanceof Node;\n            docFrag.appendChild(isNode ? argItem : document.createTextNode(String(argItem)));\n          });\n          this.insertBefore(docFrag, this.firstChild);\n        }\n      });\n    });\n  })([Element.prototype, Document.prototype, DocumentFragment.prototype]); // append\n\n\n  (function (arr) {\n    arr.forEach(function (item) {\n      if (item.hasOwnProperty("append")) {\n        return;\n      }\n\n      Object.defineProperty(item, "append", {\n        configurable: true,\n        enumerable: true,\n        writable: true,\n        value: function append() {\n          // eslint-disable-next-line prefer-rest-params\n          var argArr = Array.prototype.slice.call(arguments);\n          var docFrag = document.createDocumentFragment();\n          argArr.forEach(function (argItem) {\n            var isNode = argItem instanceof Node;\n            docFrag.appendChild(isNode ? argItem : document.createTextNode(String(argItem)));\n          });\n          this.appendChild(docFrag);\n        }\n      });\n    });\n  })([Element.prototype, Document.prototype, DocumentFragment.prototype]); // before\n\n\n  (function (arr) {\n    arr.forEach(function (item) {\n      if (item.hasOwnProperty("before")) {\n        return;\n      }\n\n      Object.defineProperty(item, "before", {\n        configurable: true,\n        enumerable: true,\n        writable: true,\n        value: function before() {\n          // eslint-disable-next-line prefer-rest-params\n          var argArr = Array.prototype.slice.call(arguments);\n          var docFrag = document.createDocumentFragment();\n          argArr.forEach(function (argItem) {\n            var isNode = argItem instanceof Node;\n            docFrag.appendChild(isNode ? argItem : document.createTextNode(String(argItem)));\n          });\n          this.parentNode.insertBefore(docFrag, this);\n        }\n      });\n    });\n  })([Element.prototype, CharacterData.prototype, DocumentType.prototype]); // remove\n\n\n  (function (arr) {\n    arr.forEach(function (item) {\n      if (item.hasOwnProperty("remove")) {\n        return;\n      }\n\n      Object.defineProperty(item, "remove", {\n        configurable: true,\n        enumerable: true,\n        writable: true,\n        value: function remove() {\n          if (this.parentNode !== null) {\n            this.parentNode.removeChild(this);\n          }\n        }\n      });\n    });\n  })([Element.prototype, CharacterData.prototype, DocumentType.prototype]); // startsWith\n\n\n  if (!String.prototype.startsWith) {\n    // eslint-disable-next-line no-extend-native\n    Object.defineProperty(String.prototype, "startsWith", {\n      value: function value(search, rawPos) {\n        var pos = rawPos > 0 ? rawPos | 0 : 0;\n        return this.substring(pos, pos + search.length) === search;\n      }\n    });\n  } // Fixes\n  //---------------------------------\n  // ie download\n\n\n  var ie11Download = function ie11Download(el) {\n    if (el.href === "") {\n      throw Error("The element has no href value.");\n    }\n\n    var filename = el.getAttribute("download");\n\n    if (filename === null || filename === "") {\n      var tmp = el.href.split("/");\n      filename = tmp[tmp.length - 1];\n    }\n\n    el.addEventListener("click", function (evt) {\n      evt.preventDefault();\n      var xhr = new XMLHttpRequest();\n\n      xhr.onloadstart = function () {\n        xhr.responseType = "blob";\n      };\n\n      xhr.onload = function () {\n        navigator.msSaveOrOpenBlob(xhr.response, filename);\n      };\n\n      xhr.open("GET", el.href, true);\n      xhr.send();\n    });\n  };\n\n  if (window.navigator.msSaveBlob) {\n    var downloadLinks = document.querySelectorAll("a[download]");\n\n    if (downloadLinks.length) {\n      downloadLinks.forEach(function (el) {\n        ie11Download(el);\n      });\n    }\n  } // ie svg focus fix\n\n\n  var unfocusableSvg = function unfocusableSvg() {\n    if (!(!!window.MSInputMethodContext && !!document.documentMode)) {\n      return;\n    }\n\n    var svg = document.querySelectorAll(\'svg\');\n    svg.forEach(function (el) {\n      el.setAttribute(\'focusable\', \'false\');\n    });\n  };\n\n  unfocusableSvg(); //ie footer nailing\n\n  var ieFooterNailing = function ieFooterNailing() {\n    var main = document.querySelector(\'main\');\n    var header = document.querySelector(\'.header\');\n    var footer = document.querySelector(\'.footer\');\n    var headerH;\n    var footerH;\n    var mainHMin;\n\n    if (!main || !(!!window.MSInputMethodContext && !!document.documentMode)) {\n      return;\n    }\n\n    var mainHeight = function mainHeight() {\n      // eslint-disable-next-line no-unused-expressions\n      header ? headerH = header.getBoundingClientRect().height : headerH = 0; // eslint-disable-next-line no-unused-expressions\n\n      footer ? footerH = footer.getBoundingClientRect().height : footerH = 0;\n      mainHMin = window.innerHeight;\n      main.style.minHeight = mainHMin - (headerH + footerH) + \'px\';\n    };\n\n    document.addEventListener(\'loadDOMContentLoaded\', mainHeight());\n    window.addEventListener(\'resize\', mainHeight);\n  };\n\n  ieFooterNailing();\n};\n\n\n\n//# sourceURL=webpack:///./js/utils/ie-fix.js?')},"./js/vendor/svg.js":function(module,exports,__webpack_require__){eval("var __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*!\n* svg.js - A lightweight library for manipulating and animating SVG.\n* @version 2.7.1\n* https://svgdotjs.github.io/\n*\n* @copyright Wout Fierens <wout@mick-wout.com>\n* @license MIT\n*\n* BUILT: Fri Nov 30 2018 10:01:55 GMT+0100 (GMT+01:00)\n*/\n;\n\n(function (root, factory) {\n  /* istanbul ignore next */\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n      return factory(root, root.document);\n    }).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(typeof window !== \"undefined\" ? window : this, function (window, document) {\n  // Find global reference - uses 'this' by default when available,\n  // falls back to 'window' otherwise (for bundlers like Webpack)\n  var globalRef = typeof this !== \"undefined\" ? this : window; // The main wrapping element\n\n  var SVG = globalRef.SVG = function (element) {\n    if (SVG.supported) {\n      element = new SVG.Doc(element);\n      if (!SVG.parser.draw) SVG.prepare();\n      return element;\n    }\n  }; // Default namespaces\n\n\n  SVG.ns = 'http://www.w3.org/2000/svg';\n  SVG.xmlns = 'http://www.w3.org/2000/xmlns/';\n  SVG.xlink = 'http://www.w3.org/1999/xlink';\n  SVG.svgjs = 'http://svgjs.com/svgjs'; // Svg support test\n\n  SVG.supported = function () {\n    return !!document.createElementNS && !!document.createElementNS(SVG.ns, 'svg').createSVGRect;\n  }(); // Don't bother to continue if SVG is not supported\n\n\n  if (!SVG.supported) return false; // Element id sequence\n\n  SVG.did = 1000; // Get next named element id\n\n  SVG.eid = function (name) {\n    return 'Svgjs' + capitalize(name) + SVG.did++;\n  }; // Method for element creation\n\n\n  SVG.create = function (name) {\n    // create element\n    var element = document.createElementNS(this.ns, name); // apply unique id\n\n    element.setAttribute('id', this.eid(name));\n    return element;\n  }; // Method for extending objects\n\n\n  SVG.extend = function () {\n    var modules, methods, key, i; // Get list of modules\n\n    modules = [].slice.call(arguments); // Get object with extensions\n\n    methods = modules.pop();\n\n    for (i = modules.length - 1; i >= 0; i--) {\n      if (modules[i]) for (key in methods) {\n        modules[i].prototype[key] = methods[key];\n      }\n    } // Make sure SVG.Set inherits any newly added methods\n\n\n    if (SVG.Set && SVG.Set.inherit) SVG.Set.inherit();\n  }; // Invent new element\n\n\n  SVG.invent = function (config) {\n    // Create element initializer\n    var initializer = typeof config.create == 'function' ? config.create : function () {\n      this.constructor.call(this, SVG.create(config.create));\n    }; // Inherit prototype\n\n    if (config.inherit) initializer.prototype = new config.inherit(); // Extend with methods\n\n    if (config.extend) SVG.extend(initializer, config.extend); // Attach construct method to parent\n\n    if (config.construct) SVG.extend(config.parent || SVG.Container, config.construct);\n    return initializer;\n  }; // Adopt existing svg elements\n\n\n  SVG.adopt = function (node) {\n    // check for presence of node\n    if (!node) return null; // make sure a node isn't already adopted\n\n    if (node.instance) return node.instance; // initialize variables\n\n    var element; // adopt with element-specific settings\n\n    if (node.nodeName == 'svg') element = node.parentNode instanceof window.SVGElement ? new SVG.Nested() : new SVG.Doc();else if (node.nodeName == 'linearGradient') element = new SVG.Gradient('linear');else if (node.nodeName == 'radialGradient') element = new SVG.Gradient('radial');else if (SVG[capitalize(node.nodeName)]) element = new SVG[capitalize(node.nodeName)]();else element = new SVG.Element(node); // ensure references\n\n    element.type = node.nodeName;\n    element.node = node;\n    node.instance = element; // SVG.Class specific preparations\n\n    if (element instanceof SVG.Doc) element.namespace().defs(); // pull svgjs data from the dom (getAttributeNS doesn't work in html5)\n\n    element.setData(JSON.parse(node.getAttribute('svgjs:data')) || {});\n    return element;\n  }; // Initialize parsing element\n\n\n  SVG.prepare = function () {\n    // Select document body and create invisible svg element\n    var body = document.getElementsByTagName('body')[0],\n        draw = (body ? new SVG.Doc(body) : SVG.adopt(document.documentElement).nested()).size(2, 0); // Create parser object\n\n    SVG.parser = {\n      body: body || document.documentElement,\n      draw: draw.style('opacity:0;position:absolute;left:-100%;top:-100%;overflow:hidden').attr('focusable', 'false').node,\n      poly: draw.polyline().node,\n      path: draw.path().node,\n      native: SVG.create('svg')\n    };\n  };\n\n  SVG.parser = {\n    native: SVG.create('svg')\n  };\n  document.addEventListener('DOMContentLoaded', function () {\n    if (!SVG.parser.draw) SVG.prepare();\n  }, false); // Storage for regular expressions\n\n  SVG.regex = {\n    // Parse unit value\n    numberAndUnit: /^([+-]?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?)([a-z%]*)$/i // Parse hex value\n    ,\n    hex: /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i // Parse rgb value\n    ,\n    rgb: /rgb\\((\\d+),(\\d+),(\\d+)\\)/ // Parse reference id\n    ,\n    reference: /#([a-z0-9\\-_]+)/i // splits a transformation chain\n    ,\n    transforms: /\\)\\s*,?\\s*/ // Whitespace\n    ,\n    whitespace: /\\s/g // Test hex value\n    ,\n    isHex: /^#[a-f0-9]{3,6}$/i // Test rgb value\n    ,\n    isRgb: /^rgb\\(/ // Test css declaration\n    ,\n    isCss: /[^:]+:[^;]+;?/ // Test for blank string\n    ,\n    isBlank: /^(\\s+)?$/ // Test for numeric string\n    ,\n    isNumber: /^[+-]?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i // Test for percent value\n    ,\n    isPercent: /^-?[\\d\\.]+%$/ // Test for image url\n    ,\n    isImage: /\\.(jpg|jpeg|png|gif|svg)(\\?[^=]+.*)?/i // split at whitespace and comma\n    ,\n    delimiter: /[\\s,]+/ // The following regex are used to parse the d attribute of a path\n    // Matches all hyphens which are not after an exponent\n    ,\n    hyphen: /([^e])\\-/gi // Replaces and tests for all path letters\n    ,\n    pathLetters: /[MLHVCSQTAZ]/gi // yes we need this one, too\n    ,\n    isPathLetter: /[MLHVCSQTAZ]/i // matches 0.154.23.45\n    ,\n    numbersWithDots: /((\\d?\\.\\d+(?:e[+-]?\\d+)?)((?:\\.\\d+(?:e[+-]?\\d+)?)+))+/gi // matches .\n    ,\n    dots: /\\./g\n  };\n  SVG.utils = {\n    // Map function\n    map: function map(array, block) {\n      var i,\n          il = array.length,\n          result = [];\n\n      for (i = 0; i < il; i++) {\n        result.push(block(array[i]));\n      }\n\n      return result;\n    } // Filter function\n    ,\n    filter: function filter(array, block) {\n      var i,\n          il = array.length,\n          result = [];\n\n      for (i = 0; i < il; i++) {\n        if (block(array[i])) result.push(array[i]);\n      }\n\n      return result;\n    } // Degrees to radians\n    ,\n    radians: function radians(d) {\n      return d % 360 * Math.PI / 180;\n    } // Radians to degrees\n    ,\n    degrees: function degrees(r) {\n      return r * 180 / Math.PI % 360;\n    },\n    filterSVGElements: function filterSVGElements(nodes) {\n      return this.filter(nodes, function (el) {\n        return el instanceof window.SVGElement;\n      });\n    }\n  };\n  SVG.defaults = {\n    // Default attribute values\n    attrs: {\n      // fill and stroke\n      'fill-opacity': 1,\n      'stroke-opacity': 1,\n      'stroke-width': 0,\n      'stroke-linejoin': 'miter',\n      'stroke-linecap': 'butt',\n      fill: '#000000',\n      stroke: '#000000',\n      opacity: 1 // position\n      ,\n      x: 0,\n      y: 0,\n      cx: 0,\n      cy: 0 // size\n      ,\n      width: 0,\n      height: 0 // radius\n      ,\n      r: 0,\n      rx: 0,\n      ry: 0 // gradient\n      ,\n      offset: 0,\n      'stop-opacity': 1,\n      'stop-color': '#000000' // text\n      ,\n      'font-size': 16,\n      'font-family': 'Helvetica, Arial, sans-serif',\n      'text-anchor': 'start'\n    }\n  }; // Module for color convertions\n\n  SVG.Color = function (color) {\n    var match; // initialize defaults\n\n    this.r = 0;\n    this.g = 0;\n    this.b = 0;\n    if (!color) return; // parse color\n\n    if (typeof color === 'string') {\n      if (SVG.regex.isRgb.test(color)) {\n        // get rgb values\n        match = SVG.regex.rgb.exec(color.replace(SVG.regex.whitespace, '')); // parse numeric values\n\n        this.r = parseInt(match[1]);\n        this.g = parseInt(match[2]);\n        this.b = parseInt(match[3]);\n      } else if (SVG.regex.isHex.test(color)) {\n        // get hex values\n        match = SVG.regex.hex.exec(fullHex(color)); // parse numeric values\n\n        this.r = parseInt(match[1], 16);\n        this.g = parseInt(match[2], 16);\n        this.b = parseInt(match[3], 16);\n      }\n    } else if (_typeof(color) === 'object') {\n      this.r = color.r;\n      this.g = color.g;\n      this.b = color.b;\n    }\n  };\n\n  SVG.extend(SVG.Color, {\n    // Default to hex conversion\n    toString: function toString() {\n      return this.toHex();\n    } // Build hex value\n    ,\n    toHex: function toHex() {\n      return '#' + compToHex(this.r) + compToHex(this.g) + compToHex(this.b);\n    } // Build rgb value\n    ,\n    toRgb: function toRgb() {\n      return 'rgb(' + [this.r, this.g, this.b].join() + ')';\n    } // Calculate true brightness\n    ,\n    brightness: function brightness() {\n      return this.r / 255 * 0.30 + this.g / 255 * 0.59 + this.b / 255 * 0.11;\n    } // Make color morphable\n    ,\n    morph: function morph(color) {\n      this.destination = new SVG.Color(color);\n      return this;\n    } // Get morphed color at given position\n    ,\n    at: function at(pos) {\n      // make sure a destination is defined\n      if (!this.destination) return this; // normalise pos\n\n      pos = pos < 0 ? 0 : pos > 1 ? 1 : pos; // generate morphed color\n\n      return new SVG.Color({\n        r: ~~(this.r + (this.destination.r - this.r) * pos),\n        g: ~~(this.g + (this.destination.g - this.g) * pos),\n        b: ~~(this.b + (this.destination.b - this.b) * pos)\n      });\n    }\n  }); // Testers\n  // Test if given value is a color string\n\n  SVG.Color.test = function (color) {\n    color += '';\n    return SVG.regex.isHex.test(color) || SVG.regex.isRgb.test(color);\n  }; // Test if given value is a rgb object\n\n\n  SVG.Color.isRgb = function (color) {\n    return color && typeof color.r == 'number' && typeof color.g == 'number' && typeof color.b == 'number';\n  }; // Test if given value is a color\n\n\n  SVG.Color.isColor = function (color) {\n    return SVG.Color.isRgb(color) || SVG.Color.test(color);\n  }; // Module for array conversion\n\n\n  SVG.Array = function (array, fallback) {\n    array = (array || []).valueOf(); // if array is empty and fallback is provided, use fallback\n\n    if (array.length == 0 && fallback) array = fallback.valueOf(); // parse array\n\n    this.value = this.parse(array);\n  };\n\n  SVG.extend(SVG.Array, {\n    // Make array morphable\n    morph: function morph(array) {\n      this.destination = this.parse(array); // normalize length of arrays\n\n      if (this.value.length != this.destination.length) {\n        var lastValue = this.value[this.value.length - 1],\n            lastDestination = this.destination[this.destination.length - 1];\n\n        while (this.value.length > this.destination.length) {\n          this.destination.push(lastDestination);\n        }\n\n        while (this.value.length < this.destination.length) {\n          this.value.push(lastValue);\n        }\n      }\n\n      return this;\n    } // Clean up any duplicate points\n    ,\n    settle: function settle() {\n      // find all unique values\n      for (var i = 0, il = this.value.length, seen = []; i < il; i++) {\n        if (seen.indexOf(this.value[i]) == -1) seen.push(this.value[i]);\n      } // set new value\n\n\n      return this.value = seen;\n    } // Get morphed array at given position\n    ,\n    at: function at(pos) {\n      // make sure a destination is defined\n      if (!this.destination) return this; // generate morphed array\n\n      for (var i = 0, il = this.value.length, array = []; i < il; i++) {\n        array.push(this.value[i] + (this.destination[i] - this.value[i]) * pos);\n      }\n\n      return new SVG.Array(array);\n    } // Convert array to string\n    ,\n    toString: function toString() {\n      return this.value.join(' ');\n    } // Real value\n    ,\n    valueOf: function valueOf() {\n      return this.value;\n    } // Parse whitespace separated string\n    ,\n    parse: function parse(array) {\n      array = array.valueOf(); // if already is an array, no need to parse it\n\n      if (Array.isArray(array)) return array;\n      return this.split(array);\n    } // Strip unnecessary whitespace\n    ,\n    split: function split(string) {\n      return string.trim().split(SVG.regex.delimiter).map(parseFloat);\n    } // Reverse array\n    ,\n    reverse: function reverse() {\n      this.value.reverse();\n      return this;\n    },\n    clone: function clone() {\n      var clone = new this.constructor();\n      clone.value = array_clone(this.value);\n      return clone;\n    }\n  }); // Poly points array\n\n  SVG.PointArray = function (array, fallback) {\n    SVG.Array.call(this, array, fallback || [[0, 0]]);\n  }; // Inherit from SVG.Array\n\n\n  SVG.PointArray.prototype = new SVG.Array();\n  SVG.PointArray.prototype.constructor = SVG.PointArray;\n  SVG.extend(SVG.PointArray, {\n    // Convert array to string\n    toString: function toString() {\n      // convert to a poly point string\n      for (var i = 0, il = this.value.length, array = []; i < il; i++) {\n        array.push(this.value[i].join(','));\n      }\n\n      return array.join(' ');\n    } // Convert array to line object\n    ,\n    toLine: function toLine() {\n      return {\n        x1: this.value[0][0],\n        y1: this.value[0][1],\n        x2: this.value[1][0],\n        y2: this.value[1][1]\n      };\n    } // Get morphed array at given position\n    ,\n    at: function at(pos) {\n      // make sure a destination is defined\n      if (!this.destination) return this; // generate morphed point string\n\n      for (var i = 0, il = this.value.length, array = []; i < il; i++) {\n        array.push([this.value[i][0] + (this.destination[i][0] - this.value[i][0]) * pos, this.value[i][1] + (this.destination[i][1] - this.value[i][1]) * pos]);\n      }\n\n      return new SVG.PointArray(array);\n    } // Parse point string and flat array\n    ,\n    parse: function parse(array) {\n      var points = [];\n      array = array.valueOf(); // if it is an array\n\n      if (Array.isArray(array)) {\n        // and it is not flat, there is no need to parse it\n        if (Array.isArray(array[0])) {\n          // make sure to use a clone\n          return array.map(function (el) {\n            return el.slice();\n          });\n        } else if (array[0].x != null) {\n          // allow point objects to be passed\n          return array.map(function (el) {\n            return [el.x, el.y];\n          });\n        }\n      } else {\n        // Else, it is considered as a string\n        // parse points\n        array = array.trim().split(SVG.regex.delimiter).map(parseFloat);\n      } // validate points - https://svgwg.org/svg2-draft/shapes.html#DataTypePoints\n      // Odd number of coordinates is an error. In such cases, drop the last odd coordinate.\n\n\n      if (array.length % 2 !== 0) array.pop(); // wrap points in two-tuples and parse points as floats\n\n      for (var i = 0, len = array.length; i < len; i = i + 2) {\n        points.push([array[i], array[i + 1]]);\n      }\n\n      return points;\n    } // Move point string\n    ,\n    move: function move(x, y) {\n      var box = this.bbox(); // get relative offset\n\n      x -= box.x;\n      y -= box.y; // move every point\n\n      if (!isNaN(x) && !isNaN(y)) for (var i = this.value.length - 1; i >= 0; i--) {\n        this.value[i] = [this.value[i][0] + x, this.value[i][1] + y];\n      }\n      return this;\n    } // Resize poly string\n    ,\n    size: function size(width, height) {\n      var i,\n          box = this.bbox(); // recalculate position of all points according to new size\n\n      for (i = this.value.length - 1; i >= 0; i--) {\n        if (box.width) this.value[i][0] = (this.value[i][0] - box.x) * width / box.width + box.x;\n        if (box.height) this.value[i][1] = (this.value[i][1] - box.y) * height / box.height + box.y;\n      }\n\n      return this;\n    } // Get bounding box of points\n    ,\n    bbox: function bbox() {\n      SVG.parser.poly.setAttribute('points', this.toString());\n      return SVG.parser.poly.getBBox();\n    }\n  });\n  var pathHandlers = {\n    M: function M(c, p, p0) {\n      p.x = p0.x = c[0];\n      p.y = p0.y = c[1];\n      return ['M', p.x, p.y];\n    },\n    L: function L(c, p) {\n      p.x = c[0];\n      p.y = c[1];\n      return ['L', c[0], c[1]];\n    },\n    H: function H(c, p) {\n      p.x = c[0];\n      return ['H', c[0]];\n    },\n    V: function V(c, p) {\n      p.y = c[0];\n      return ['V', c[0]];\n    },\n    C: function C(c, p) {\n      p.x = c[4];\n      p.y = c[5];\n      return ['C', c[0], c[1], c[2], c[3], c[4], c[5]];\n    },\n    S: function S(c, p) {\n      p.x = c[2];\n      p.y = c[3];\n      return ['S', c[0], c[1], c[2], c[3]];\n    },\n    Q: function Q(c, p) {\n      p.x = c[2];\n      p.y = c[3];\n      return ['Q', c[0], c[1], c[2], c[3]];\n    },\n    T: function T(c, p) {\n      p.x = c[0];\n      p.y = c[1];\n      return ['T', c[0], c[1]];\n    },\n    Z: function Z(c, p, p0) {\n      p.x = p0.x;\n      p.y = p0.y;\n      return ['Z'];\n    },\n    A: function A(c, p) {\n      p.x = c[5];\n      p.y = c[6];\n      return ['A', c[0], c[1], c[2], c[3], c[4], c[5], c[6]];\n    }\n  };\n  var mlhvqtcsa = 'mlhvqtcsaz'.split('');\n\n  for (var i = 0, il = mlhvqtcsa.length; i < il; ++i) {\n    pathHandlers[mlhvqtcsa[i]] = function (i) {\n      return function (c, p, p0) {\n        if (i == 'H') c[0] = c[0] + p.x;else if (i == 'V') c[0] = c[0] + p.y;else if (i == 'A') {\n          c[5] = c[5] + p.x, c[6] = c[6] + p.y;\n        } else for (var j = 0, jl = c.length; j < jl; ++j) {\n          c[j] = c[j] + (j % 2 ? p.y : p.x);\n        }\n        return pathHandlers[i](c, p, p0);\n      };\n    }(mlhvqtcsa[i].toUpperCase());\n  } // Path points array\n\n\n  SVG.PathArray = function (array, fallback) {\n    SVG.Array.call(this, array, fallback || [['M', 0, 0]]);\n  }; // Inherit from SVG.Array\n\n\n  SVG.PathArray.prototype = new SVG.Array();\n  SVG.PathArray.prototype.constructor = SVG.PathArray;\n  SVG.extend(SVG.PathArray, {\n    // Convert array to string\n    toString: function toString() {\n      return arrayToString(this.value);\n    } // Move path string\n    ,\n    move: function move(x, y) {\n      // get bounding box of current situation\n      var box = this.bbox(); // get relative offset\n\n      x -= box.x;\n      y -= box.y;\n\n      if (!isNaN(x) && !isNaN(y)) {\n        // move every point\n        for (var l, i = this.value.length - 1; i >= 0; i--) {\n          l = this.value[i][0];\n\n          if (l == 'M' || l == 'L' || l == 'T') {\n            this.value[i][1] += x;\n            this.value[i][2] += y;\n          } else if (l == 'H') {\n            this.value[i][1] += x;\n          } else if (l == 'V') {\n            this.value[i][1] += y;\n          } else if (l == 'C' || l == 'S' || l == 'Q') {\n            this.value[i][1] += x;\n            this.value[i][2] += y;\n            this.value[i][3] += x;\n            this.value[i][4] += y;\n\n            if (l == 'C') {\n              this.value[i][5] += x;\n              this.value[i][6] += y;\n            }\n          } else if (l == 'A') {\n            this.value[i][6] += x;\n            this.value[i][7] += y;\n          }\n        }\n      }\n\n      return this;\n    } // Resize path string\n    ,\n    size: function size(width, height) {\n      // get bounding box of current situation\n      var i,\n          l,\n          box = this.bbox(); // recalculate position of all points according to new size\n\n      for (i = this.value.length - 1; i >= 0; i--) {\n        l = this.value[i][0];\n\n        if (l == 'M' || l == 'L' || l == 'T') {\n          this.value[i][1] = (this.value[i][1] - box.x) * width / box.width + box.x;\n          this.value[i][2] = (this.value[i][2] - box.y) * height / box.height + box.y;\n        } else if (l == 'H') {\n          this.value[i][1] = (this.value[i][1] - box.x) * width / box.width + box.x;\n        } else if (l == 'V') {\n          this.value[i][1] = (this.value[i][1] - box.y) * height / box.height + box.y;\n        } else if (l == 'C' || l == 'S' || l == 'Q') {\n          this.value[i][1] = (this.value[i][1] - box.x) * width / box.width + box.x;\n          this.value[i][2] = (this.value[i][2] - box.y) * height / box.height + box.y;\n          this.value[i][3] = (this.value[i][3] - box.x) * width / box.width + box.x;\n          this.value[i][4] = (this.value[i][4] - box.y) * height / box.height + box.y;\n\n          if (l == 'C') {\n            this.value[i][5] = (this.value[i][5] - box.x) * width / box.width + box.x;\n            this.value[i][6] = (this.value[i][6] - box.y) * height / box.height + box.y;\n          }\n        } else if (l == 'A') {\n          // resize radii\n          this.value[i][1] = this.value[i][1] * width / box.width;\n          this.value[i][2] = this.value[i][2] * height / box.height; // move position values\n\n          this.value[i][6] = (this.value[i][6] - box.x) * width / box.width + box.x;\n          this.value[i][7] = (this.value[i][7] - box.y) * height / box.height + box.y;\n        }\n      }\n\n      return this;\n    } // Test if the passed path array use the same path data commands as this path array\n    ,\n    equalCommands: function equalCommands(pathArray) {\n      var i, il, equalCommands;\n      pathArray = new SVG.PathArray(pathArray);\n      equalCommands = this.value.length === pathArray.value.length;\n\n      for (i = 0, il = this.value.length; equalCommands && i < il; i++) {\n        equalCommands = this.value[i][0] === pathArray.value[i][0];\n      }\n\n      return equalCommands;\n    } // Make path array morphable\n    ,\n    morph: function morph(pathArray) {\n      pathArray = new SVG.PathArray(pathArray);\n\n      if (this.equalCommands(pathArray)) {\n        this.destination = pathArray;\n      } else {\n        this.destination = null;\n      }\n\n      return this;\n    } // Get morphed path array at given position\n    ,\n    at: function at(pos) {\n      // make sure a destination is defined\n      if (!this.destination) return this;\n      var sourceArray = this.value,\n          destinationArray = this.destination.value,\n          array = [],\n          pathArray = new SVG.PathArray(),\n          i,\n          il,\n          j,\n          jl; // Animate has specified in the SVG spec\n      // See: https://www.w3.org/TR/SVG11/paths.html#PathElement\n\n      for (i = 0, il = sourceArray.length; i < il; i++) {\n        array[i] = [sourceArray[i][0]];\n\n        for (j = 1, jl = sourceArray[i].length; j < jl; j++) {\n          array[i][j] = sourceArray[i][j] + (destinationArray[i][j] - sourceArray[i][j]) * pos;\n        } // For the two flags of the elliptical arc command, the SVG spec say:\n        // Flags and booleans are interpolated as fractions between zero and one, with any non-zero value considered to be a value of one/true\n        // Elliptical arc command as an array followed by corresponding indexes:\n        // ['A', rx, ry, x-axis-rotation, large-arc-flag, sweep-flag, x, y]\n        //   0    1   2        3                 4             5      6  7\n\n\n        if (array[i][0] === 'A') {\n          array[i][4] = +(array[i][4] != 0);\n          array[i][5] = +(array[i][5] != 0);\n        }\n      } // Directly modify the value of a path array, this is done this way for performance\n\n\n      pathArray.value = array;\n      return pathArray;\n    } // Absolutize and parse path to array\n    ,\n    parse: function parse(array) {\n      // if it's already a patharray, no need to parse it\n      if (array instanceof SVG.PathArray) return array.valueOf(); // prepare for parsing\n\n      var i,\n          x0,\n          y0,\n          s,\n          seg,\n          arr,\n          x = 0,\n          y = 0,\n          paramCnt = {\n        'M': 2,\n        'L': 2,\n        'H': 1,\n        'V': 1,\n        'C': 6,\n        'S': 4,\n        'Q': 4,\n        'T': 2,\n        'A': 7,\n        'Z': 0\n      };\n\n      if (typeof array == 'string') {\n        array = array.replace(SVG.regex.numbersWithDots, pathRegReplace) // convert 45.123.123 to 45.123 .123\n        .replace(SVG.regex.pathLetters, ' $& ') // put some room between letters and numbers\n        .replace(SVG.regex.hyphen, '$1 -') // add space before hyphen\n        .trim() // trim\n        .split(SVG.regex.delimiter); // split into array\n      } else {\n        array = array.reduce(function (prev, curr) {\n          return [].concat.call(prev, curr);\n        }, []);\n      } // array now is an array containing all parts of a path e.g. ['M', '0', '0', 'L', '30', '30' ...]\n\n\n      var arr = [],\n          p = new SVG.Point(),\n          p0 = new SVG.Point(),\n          index = 0,\n          len = array.length;\n\n      do {\n        // Test if we have a path letter\n        if (SVG.regex.isPathLetter.test(array[index])) {\n          s = array[index];\n          ++index; // If last letter was a move command and we got no new, it defaults to [L]ine\n        } else if (s == 'M') {\n          s = 'L';\n        } else if (s == 'm') {\n          s = 'l';\n        }\n\n        arr.push(pathHandlers[s].call(null, array.slice(index, index = index + paramCnt[s.toUpperCase()]).map(parseFloat), p, p0));\n      } while (len > index);\n\n      return arr;\n    } // Get bounding box of path\n    ,\n    bbox: function bbox() {\n      SVG.parser.path.setAttribute('d', this.toString());\n      return SVG.parser.path.getBBox();\n    }\n  }); // Module for unit convertions\n\n  SVG.Number = SVG.invent({\n    // Initialize\n    create: function create(value, unit) {\n      // initialize defaults\n      this.value = 0;\n      this.unit = unit || ''; // parse value\n\n      if (typeof value === 'number') {\n        // ensure a valid numeric value\n        this.value = isNaN(value) ? 0 : !isFinite(value) ? value < 0 ? -3.4e+38 : +3.4e+38 : value;\n      } else if (typeof value === 'string') {\n        unit = value.match(SVG.regex.numberAndUnit);\n\n        if (unit) {\n          // make value numeric\n          this.value = parseFloat(unit[1]); // normalize\n\n          if (unit[5] == '%') this.value /= 100;else if (unit[5] == 's') this.value *= 1000; // store unit\n\n          this.unit = unit[5];\n        }\n      } else {\n        if (value instanceof SVG.Number) {\n          this.value = value.valueOf();\n          this.unit = value.unit;\n        }\n      }\n    } // Add methods\n    ,\n    extend: {\n      // Stringalize\n      toString: function toString() {\n        return (this.unit == '%' ? ~~(this.value * 1e8) / 1e6 : this.unit == 's' ? this.value / 1e3 : this.value) + this.unit;\n      },\n      toJSON: function toJSON() {\n        return this.toString();\n      },\n      // Convert to primitive\n      valueOf: function valueOf() {\n        return this.value;\n      } // Add number\n      ,\n      plus: function plus(number) {\n        number = new SVG.Number(number);\n        return new SVG.Number(this + number, this.unit || number.unit);\n      } // Subtract number\n      ,\n      minus: function minus(number) {\n        number = new SVG.Number(number);\n        return new SVG.Number(this - number, this.unit || number.unit);\n      } // Multiply number\n      ,\n      times: function times(number) {\n        number = new SVG.Number(number);\n        return new SVG.Number(this * number, this.unit || number.unit);\n      } // Divide number\n      ,\n      divide: function divide(number) {\n        number = new SVG.Number(number);\n        return new SVG.Number(this / number, this.unit || number.unit);\n      } // Convert to different unit\n      ,\n      to: function to(unit) {\n        var number = new SVG.Number(this);\n        if (typeof unit === 'string') number.unit = unit;\n        return number;\n      } // Make number morphable\n      ,\n      morph: function morph(number) {\n        this.destination = new SVG.Number(number);\n\n        if (number.relative) {\n          this.destination.value += this.value;\n        }\n\n        return this;\n      } // Get morphed number at given position\n      ,\n      at: function at(pos) {\n        // Make sure a destination is defined\n        if (!this.destination) return this; // Generate new morphed number\n\n        return new SVG.Number(this.destination).minus(this).times(pos).plus(this);\n      }\n    }\n  });\n  SVG.Element = SVG.invent({\n    // Initialize node\n    create: function create(node) {\n      // make stroke value accessible dynamically\n      this._stroke = SVG.defaults.attrs.stroke;\n      this._event = null;\n      this._events = {}; // initialize data object\n\n      this.dom = {}; // create circular reference\n\n      if (this.node = node) {\n        this.type = node.nodeName;\n        this.node.instance = this;\n        this._events = node._events || {}; // store current attribute value\n\n        this._stroke = node.getAttribute('stroke') || this._stroke;\n      }\n    } // Add class methods\n    ,\n    extend: {\n      // Move over x-axis\n      x: function x(_x) {\n        return this.attr('x', _x);\n      } // Move over y-axis\n      ,\n      y: function y(_y) {\n        return this.attr('y', _y);\n      } // Move by center over x-axis\n      ,\n      cx: function cx(x) {\n        return x == null ? this.x() + this.width() / 2 : this.x(x - this.width() / 2);\n      } // Move by center over y-axis\n      ,\n      cy: function cy(y) {\n        return y == null ? this.y() + this.height() / 2 : this.y(y - this.height() / 2);\n      } // Move element to given x and y values\n      ,\n      move: function move(x, y) {\n        return this.x(x).y(y);\n      } // Move element by its center\n      ,\n      center: function center(x, y) {\n        return this.cx(x).cy(y);\n      } // Set width of element\n      ,\n      width: function width(_width) {\n        return this.attr('width', _width);\n      } // Set height of element\n      ,\n      height: function height(_height) {\n        return this.attr('height', _height);\n      } // Set element size to given width and height\n      ,\n      size: function size(width, height) {\n        var p = proportionalSize(this, width, height);\n        return this.width(new SVG.Number(p.width)).height(new SVG.Number(p.height));\n      } // Clone element\n      ,\n      clone: function clone(parent) {\n        // write dom data to the dom so the clone can pickup the data\n        this.writeDataToDom(); // clone element and assign new id\n\n        var clone = assignNewId(this.node.cloneNode(true)); // insert the clone in the given parent or after myself\n\n        if (parent) parent.add(clone);else this.after(clone);\n        return clone;\n      } // Remove element\n      ,\n      remove: function remove() {\n        if (this.parent()) this.parent().removeElement(this);\n        return this;\n      } // Replace element\n      ,\n      replace: function replace(element) {\n        this.after(element).remove();\n        return element;\n      } // Add element to given container and return self\n      ,\n      addTo: function addTo(parent) {\n        return parent.put(this);\n      } // Add element to given container and return container\n      ,\n      putIn: function putIn(parent) {\n        return parent.add(this);\n      } // Get / set id\n      ,\n      id: function id(_id) {\n        return this.attr('id', _id);\n      } // Checks whether the given point inside the bounding box of the element\n      ,\n      inside: function inside(x, y) {\n        var box = this.bbox();\n        return x > box.x && y > box.y && x < box.x + box.width && y < box.y + box.height;\n      } // Show element\n      ,\n      show: function show() {\n        return this.style('display', '');\n      } // Hide element\n      ,\n      hide: function hide() {\n        return this.style('display', 'none');\n      } // Is element visible?\n      ,\n      visible: function visible() {\n        return this.style('display') != 'none';\n      } // Return id on string conversion\n      ,\n      toString: function toString() {\n        return this.attr('id');\n      } // Return array of classes on the node\n      ,\n      classes: function classes() {\n        var attr = this.attr('class');\n        return attr == null ? [] : attr.trim().split(SVG.regex.delimiter);\n      } // Return true if class exists on the node, false otherwise\n      ,\n      hasClass: function hasClass(name) {\n        return this.classes().indexOf(name) != -1;\n      } // Add class to the node\n      ,\n      addClass: function addClass(name) {\n        if (!this.hasClass(name)) {\n          var array = this.classes();\n          array.push(name);\n          this.attr('class', array.join(' '));\n        }\n\n        return this;\n      } // Remove class from the node\n      ,\n      removeClass: function removeClass(name) {\n        if (this.hasClass(name)) {\n          this.attr('class', this.classes().filter(function (c) {\n            return c != name;\n          }).join(' '));\n        }\n\n        return this;\n      } // Toggle the presence of a class on the node\n      ,\n      toggleClass: function toggleClass(name) {\n        return this.hasClass(name) ? this.removeClass(name) : this.addClass(name);\n      } // Get referenced element form attribute value\n      ,\n      reference: function reference(attr) {\n        return SVG.get(this.attr(attr));\n      } // Returns the parent element instance\n      ,\n      parent: function parent(type) {\n        var parent = this; // check for parent\n\n        if (!parent.node.parentNode) return null; // get parent element\n\n        parent = SVG.adopt(parent.node.parentNode);\n        if (!type) return parent; // loop trough ancestors if type is given\n\n        while (parent && parent.node instanceof window.SVGElement) {\n          if (typeof type === 'string' ? parent.matches(type) : parent instanceof type) return parent;\n          if (!parent.node.parentNode || parent.node.parentNode.nodeName == '#document' || parent.node.parentNode.nodeName == '#document-fragment') return null; // #759, #720\n\n          parent = SVG.adopt(parent.node.parentNode);\n        }\n      } // Get parent document\n      ,\n      doc: function doc() {\n        return this instanceof SVG.Doc ? this : this.parent(SVG.Doc);\n      } // return array of all ancestors of given type up to the root svg\n      ,\n      parents: function parents(type) {\n        var parents = [],\n            parent = this;\n\n        do {\n          parent = parent.parent(type);\n          if (!parent || !parent.node) break;\n          parents.push(parent);\n        } while (parent.parent);\n\n        return parents;\n      } // matches the element vs a css selector\n      ,\n      matches: function matches(selector) {\n        return _matches(this.node, selector);\n      } // Returns the svg node to call native svg methods on it\n      ,\n      native: function native() {\n        return this.node;\n      } // Import raw svg\n      ,\n      svg: function svg(_svg) {\n        // create temporary holder\n        var well = document.createElement('svg'); // act as a setter if svg is given\n\n        if (_svg && this instanceof SVG.Parent) {\n          // dump raw svg\n          well.innerHTML = '<svg>' + _svg.replace(/\\n/, '').replace(/<([\\w:-]+)([^<]+?)\\/>/g, '<$1$2></$1>') + '</svg>'; // transplant nodes\n\n          for (var i = 0, il = well.firstChild.childNodes.length; i < il; i++) {\n            this.node.appendChild(well.firstChild.firstChild);\n          } // otherwise act as a getter\n\n        } else {\n          // create a wrapping svg element in case of partial content\n          well.appendChild(_svg = document.createElement('svg')); // write svgjs data to the dom\n\n          this.writeDataToDom(); // insert a copy of this node\n\n          _svg.appendChild(this.node.cloneNode(true)); // return target element\n\n\n          return well.innerHTML.replace(/^<svg>/, '').replace(/<\\/svg>$/, '');\n        }\n\n        return this;\n      } // write svgjs data to the dom\n      ,\n      writeDataToDom: function writeDataToDom() {\n        // dump variables recursively\n        if (this.each || this.lines) {\n          var fn = this.each ? this : this.lines();\n          fn.each(function () {\n            this.writeDataToDom();\n          });\n        } // remove previously set data\n\n\n        this.node.removeAttribute('svgjs:data');\n        if (Object.keys(this.dom).length) this.node.setAttribute('svgjs:data', JSON.stringify(this.dom)); // see #428\n\n        return this;\n      } // set given data to the elements data property\n      ,\n      setData: function setData(o) {\n        this.dom = o;\n        return this;\n      },\n      is: function is(obj) {\n        return _is(this, obj);\n      }\n    }\n  });\n  SVG.easing = {\n    '-': function _(pos) {\n      return pos;\n    },\n    '<>': function _(pos) {\n      return -Math.cos(pos * Math.PI) / 2 + 0.5;\n    },\n    '>': function _(pos) {\n      return Math.sin(pos * Math.PI / 2);\n    },\n    '<': function _(pos) {\n      return -Math.cos(pos * Math.PI / 2) + 1;\n    }\n  };\n\n  SVG.morph = function (pos) {\n    return function (from, to) {\n      return new SVG.MorphObj(from, to).at(pos);\n    };\n  };\n\n  SVG.Situation = SVG.invent({\n    create: function create(o) {\n      this.init = false;\n      this.reversed = false;\n      this.reversing = false;\n      this.duration = new SVG.Number(o.duration).valueOf();\n      this.delay = new SVG.Number(o.delay).valueOf();\n      this.start = +new Date() + this.delay;\n      this.finish = this.start + this.duration;\n      this.ease = o.ease; // this.loop is incremented from 0 to this.loops\n      // it is also incremented when in an infinite loop (when this.loops is true)\n\n      this.loop = 0;\n      this.loops = false;\n      this.animations = {// functionToCall: [list of morphable objects]\n        // e.g. move: [SVG.Number, SVG.Number]\n      };\n      this.attrs = {// holds all attributes which are not represented from a function svg.js provides\n        // e.g. someAttr: SVG.Number\n      };\n      this.styles = {// holds all styles which should be animated\n        // e.g. fill-color: SVG.Color\n      };\n      this.transforms = [// holds all transformations as transformation objects\n        // e.g. [SVG.Rotate, SVG.Translate, SVG.Matrix]\n      ];\n      this.once = {// functions to fire at a specific position\n        // e.g. \"0.5\": function foo(){}\n      };\n    }\n  });\n  SVG.FX = SVG.invent({\n    create: function create(element) {\n      this._target = element;\n      this.situations = [];\n      this.active = false;\n      this.situation = null;\n      this.paused = false;\n      this.lastPos = 0;\n      this.pos = 0; // The absolute position of an animation is its position in the context of its complete duration (including delay and loops)\n      // When performing a delay, absPos is below 0 and when performing a loop, its value is above 1\n\n      this.absPos = 0;\n      this._speed = 1;\n    },\n    extend: {\n      /**\n       * sets or returns the target of this animation\n       * @param o object || number In case of Object it holds all parameters. In case of number its the duration of the animation\n       * @param ease function || string Function which should be used for easing or easing keyword\n       * @param delay Number indicating the delay before the animation starts\n       * @return target || this\n       */\n      animate: function animate(o, ease, delay) {\n        if (_typeof(o) == 'object') {\n          ease = o.ease;\n          delay = o.delay;\n          o = o.duration;\n        }\n\n        var situation = new SVG.Situation({\n          duration: o || 1000,\n          delay: delay || 0,\n          ease: SVG.easing[ease || '-'] || ease\n        });\n        this.queue(situation);\n        return this;\n      }\n      /**\n       * sets a delay before the next element of the queue is called\n       * @param delay Duration of delay in milliseconds\n       * @return this.target()\n       */\n      ,\n      delay: function delay(_delay) {\n        // The delay is performed by an empty situation with its duration\n        // attribute set to the duration of the delay\n        var situation = new SVG.Situation({\n          duration: _delay,\n          delay: 0,\n          ease: SVG.easing['-']\n        });\n        return this.queue(situation);\n      }\n      /**\n       * sets or returns the target of this animation\n       * @param null || target SVG.Element which should be set as new target\n       * @return target || this\n       */\n      ,\n      target: function target(_target) {\n        if (_target && _target instanceof SVG.Element) {\n          this._target = _target;\n          return this;\n        }\n\n        return this._target;\n      } // returns the absolute position at a given time\n      ,\n      timeToAbsPos: function timeToAbsPos(timestamp) {\n        return (timestamp - this.situation.start) / (this.situation.duration / this._speed);\n      } // returns the timestamp from a given absolute positon\n      ,\n      absPosToTime: function absPosToTime(absPos) {\n        return this.situation.duration / this._speed * absPos + this.situation.start;\n      } // starts the animationloop\n      ,\n      startAnimFrame: function startAnimFrame() {\n        this.stopAnimFrame();\n        this.animationFrame = window.requestAnimationFrame(function () {\n          this.step();\n        }.bind(this));\n      } // cancels the animationframe\n      ,\n      stopAnimFrame: function stopAnimFrame() {\n        window.cancelAnimationFrame(this.animationFrame);\n      } // kicks off the animation - only does something when the queue is currently not active and at least one situation is set\n      ,\n      start: function start() {\n        // dont start if already started\n        if (!this.active && this.situation) {\n          this.active = true;\n          this.startCurrent();\n        }\n\n        return this;\n      } // start the current situation\n      ,\n      startCurrent: function startCurrent() {\n        this.situation.start = +new Date() + this.situation.delay / this._speed;\n        this.situation.finish = this.situation.start + this.situation.duration / this._speed;\n        return this.initAnimations().step();\n      }\n      /**\n       * adds a function / Situation to the animation queue\n       * @param fn function / situation to add\n       * @return this\n       */\n      ,\n      queue: function queue(fn) {\n        if (typeof fn == 'function' || fn instanceof SVG.Situation) this.situations.push(fn);\n        if (!this.situation) this.situation = this.situations.shift();\n        return this;\n      }\n      /**\n       * pulls next element from the queue and execute it\n       * @return this\n       */\n      ,\n      dequeue: function dequeue() {\n        // stop current animation\n        this.stop(); // get next animation from queue\n\n        this.situation = this.situations.shift();\n\n        if (this.situation) {\n          if (this.situation instanceof SVG.Situation) {\n            this.start();\n          } else {\n            // If it is not a SVG.Situation, then it is a function, we execute it\n            this.situation.call(this);\n          }\n        }\n\n        return this;\n      } // updates all animations to the current state of the element\n      // this is important when one property could be changed from another property\n      ,\n      initAnimations: function initAnimations() {\n        var i, j, source;\n        var s = this.situation;\n        if (s.init) return this;\n\n        for (i in s.animations) {\n          source = this.target()[i]();\n\n          if (!Array.isArray(source)) {\n            source = [source];\n          }\n\n          if (!Array.isArray(s.animations[i])) {\n            s.animations[i] = [s.animations[i]];\n          } //if(s.animations[i].length > source.length) {\n          //  source.concat = source.concat(s.animations[i].slice(source.length, s.animations[i].length))\n          //}\n\n\n          for (j = source.length; j--;) {\n            // The condition is because some methods return a normal number instead\n            // of a SVG.Number\n            if (s.animations[i][j] instanceof SVG.Number) source[j] = new SVG.Number(source[j]);\n            s.animations[i][j] = source[j].morph(s.animations[i][j]);\n          }\n        }\n\n        for (i in s.attrs) {\n          s.attrs[i] = new SVG.MorphObj(this.target().attr(i), s.attrs[i]);\n        }\n\n        for (i in s.styles) {\n          s.styles[i] = new SVG.MorphObj(this.target().style(i), s.styles[i]);\n        }\n\n        s.initialTransformation = this.target().matrixify();\n        s.init = true;\n        return this;\n      },\n      clearQueue: function clearQueue() {\n        this.situations = [];\n        return this;\n      },\n      clearCurrent: function clearCurrent() {\n        this.situation = null;\n        return this;\n      }\n      /** stops the animation immediately\n       * @param jumpToEnd A Boolean indicating whether to complete the current animation immediately.\n       * @param clearQueue A Boolean indicating whether to remove queued animation as well.\n       * @return this\n       */\n      ,\n      stop: function stop(jumpToEnd, clearQueue) {\n        var active = this.active;\n        this.active = false;\n\n        if (clearQueue) {\n          this.clearQueue();\n        }\n\n        if (jumpToEnd && this.situation) {\n          // initialize the situation if it was not\n          !active && this.startCurrent();\n          this.atEnd();\n        }\n\n        this.stopAnimFrame();\n        return this.clearCurrent();\n      }\n      /** resets the element to the state where the current element has started\n       * @return this\n       */\n      ,\n      reset: function reset() {\n        if (this.situation) {\n          var temp = this.situation;\n          this.stop();\n          this.situation = temp;\n          this.atStart();\n        }\n\n        return this;\n      } // Stop the currently-running animation, remove all queued animations, and complete all animations for the element.\n      ,\n      finish: function finish() {\n        this.stop(true, false);\n\n        while (this.dequeue().situation && this.stop(true, false)) {\n          ;\n        }\n\n        this.clearQueue().clearCurrent();\n        return this;\n      } // set the internal animation pointer at the start position, before any loops, and updates the visualisation\n      ,\n      atStart: function atStart() {\n        return this.at(0, true);\n      } // set the internal animation pointer at the end position, after all the loops, and updates the visualisation\n      ,\n      atEnd: function atEnd() {\n        if (this.situation.loops === true) {\n          // If in a infinite loop, we end the current iteration\n          this.situation.loops = this.situation.loop + 1;\n        }\n\n        if (typeof this.situation.loops == 'number') {\n          // If performing a finite number of loops, we go after all the loops\n          return this.at(this.situation.loops, true);\n        } else {\n          // If no loops, we just go at the end\n          return this.at(1, true);\n        }\n      } // set the internal animation pointer to the specified position and updates the visualisation\n      // if isAbsPos is true, pos is treated as an absolute position\n      ,\n      at: function at(pos, isAbsPos) {\n        var durDivSpd = this.situation.duration / this._speed;\n        this.absPos = pos; // If pos is not an absolute position, we convert it into one\n\n        if (!isAbsPos) {\n          if (this.situation.reversed) this.absPos = 1 - this.absPos;\n          this.absPos += this.situation.loop;\n        }\n\n        this.situation.start = +new Date() - this.absPos * durDivSpd;\n        this.situation.finish = this.situation.start + durDivSpd;\n        return this.step(true);\n      }\n      /**\n       * sets or returns the speed of the animations\n       * @param speed null || Number The new speed of the animations\n       * @return Number || this\n       */\n      ,\n      speed: function speed(_speed) {\n        if (_speed === 0) return this.pause();\n\n        if (_speed) {\n          this._speed = _speed; // We use an absolute position here so that speed can affect the delay before the animation\n\n          return this.at(this.absPos, true);\n        } else return this._speed;\n      } // Make loopable\n      ,\n      loop: function loop(times, reverse) {\n        var c = this.last(); // store total loops\n\n        c.loops = times != null ? times : true;\n        c.loop = 0;\n        if (reverse) c.reversing = true;\n        return this;\n      } // pauses the animation\n      ,\n      pause: function pause() {\n        this.paused = true;\n        this.stopAnimFrame();\n        return this;\n      } // unpause the animation\n      ,\n      play: function play() {\n        if (!this.paused) return this;\n        this.paused = false; // We use an absolute position here so that the delay before the animation can be paused\n\n        return this.at(this.absPos, true);\n      }\n      /**\n       * toggle or set the direction of the animation\n       * true sets direction to backwards while false sets it to forwards\n       * @param reversed Boolean indicating whether to reverse the animation or not (default: toggle the reverse status)\n       * @return this\n       */\n      ,\n      reverse: function reverse(reversed) {\n        var c = this.last();\n        if (typeof reversed == 'undefined') c.reversed = !c.reversed;else c.reversed = reversed;\n        return this;\n      }\n      /**\n       * returns a float from 0-1 indicating the progress of the current animation\n       * @param eased Boolean indicating whether the returned position should be eased or not\n       * @return number\n       */\n      ,\n      progress: function progress(easeIt) {\n        return easeIt ? this.situation.ease(this.pos) : this.pos;\n      }\n      /**\n       * adds a callback function which is called when the current animation is finished\n       * @param fn Function which should be executed as callback\n       * @return number\n       */\n      ,\n      after: function after(fn) {\n        var c = this.last(),\n            wrapper = function wrapper(e) {\n          if (e.detail.situation == c) {\n            fn.call(this, c);\n            this.off('finished.fx', wrapper); // prevent memory leak\n          }\n        };\n\n        this.target().on('finished.fx', wrapper);\n        return this._callStart();\n      } // adds a callback which is called whenever one animation step is performed\n      ,\n      during: function during(fn) {\n        var c = this.last(),\n            wrapper = function wrapper(e) {\n          if (e.detail.situation == c) {\n            fn.call(this, e.detail.pos, SVG.morph(e.detail.pos), e.detail.eased, c);\n          }\n        }; // see above\n\n\n        this.target().off('during.fx', wrapper).on('during.fx', wrapper);\n        this.after(function () {\n          this.off('during.fx', wrapper);\n        });\n        return this._callStart();\n      } // calls after ALL animations in the queue are finished\n      ,\n      afterAll: function afterAll(fn) {\n        var wrapper = function wrapper(e) {\n          fn.call(this);\n          this.off('allfinished.fx', wrapper);\n        }; // see above\n\n\n        this.target().off('allfinished.fx', wrapper).on('allfinished.fx', wrapper);\n        return this._callStart();\n      } // calls on every animation step for all animations\n      ,\n      duringAll: function duringAll(fn) {\n        var wrapper = function wrapper(e) {\n          fn.call(this, e.detail.pos, SVG.morph(e.detail.pos), e.detail.eased, e.detail.situation);\n        };\n\n        this.target().off('during.fx', wrapper).on('during.fx', wrapper);\n        this.afterAll(function () {\n          this.off('during.fx', wrapper);\n        });\n        return this._callStart();\n      },\n      last: function last() {\n        return this.situations.length ? this.situations[this.situations.length - 1] : this.situation;\n      } // adds one property to the animations\n      ,\n      add: function add(method, args, type) {\n        this.last()[type || 'animations'][method] = args;\n        return this._callStart();\n      }\n      /** perform one step of the animation\n       *  @param ignoreTime Boolean indicating whether to ignore time and use position directly or recalculate position based on time\n       *  @return this\n       */\n      ,\n      step: function step(ignoreTime) {\n        // convert current time to an absolute position\n        if (!ignoreTime) this.absPos = this.timeToAbsPos(+new Date()); // This part convert an absolute position to a position\n\n        if (this.situation.loops !== false) {\n          var absPos, absPosInt, lastLoop; // If the absolute position is below 0, we just treat it as if it was 0\n\n          absPos = Math.max(this.absPos, 0);\n          absPosInt = Math.floor(absPos);\n\n          if (this.situation.loops === true || absPosInt < this.situation.loops) {\n            this.pos = absPos - absPosInt;\n            lastLoop = this.situation.loop;\n            this.situation.loop = absPosInt;\n          } else {\n            this.absPos = this.situation.loops;\n            this.pos = 1; // The -1 here is because we don't want to toggle reversed when all the loops have been completed\n\n            lastLoop = this.situation.loop - 1;\n            this.situation.loop = this.situation.loops;\n          }\n\n          if (this.situation.reversing) {\n            // Toggle reversed if an odd number of loops as occured since the last call of step\n            this.situation.reversed = this.situation.reversed != Boolean((this.situation.loop - lastLoop) % 2);\n          }\n        } else {\n          // If there are no loop, the absolute position must not be above 1\n          this.absPos = Math.min(this.absPos, 1);\n          this.pos = this.absPos;\n        } // while the absolute position can be below 0, the position must not be below 0\n\n\n        if (this.pos < 0) this.pos = 0;\n        if (this.situation.reversed) this.pos = 1 - this.pos; // apply easing\n\n        var eased = this.situation.ease(this.pos); // call once-callbacks\n\n        for (var i in this.situation.once) {\n          if (i > this.lastPos && i <= eased) {\n            this.situation.once[i].call(this.target(), this.pos, eased);\n            delete this.situation.once[i];\n          }\n        } // fire during callback with position, eased position and current situation as parameter\n\n\n        if (this.active) this.target().fire('during', {\n          pos: this.pos,\n          eased: eased,\n          fx: this,\n          situation: this.situation\n        }); // the user may call stop or finish in the during callback\n        // so make sure that we still have a valid situation\n\n        if (!this.situation) {\n          return this;\n        } // apply the actual animation to every property\n\n\n        this.eachAt(); // do final code when situation is finished\n\n        if (this.pos == 1 && !this.situation.reversed || this.situation.reversed && this.pos == 0) {\n          // stop animation callback\n          this.stopAnimFrame(); // fire finished callback with current situation as parameter\n\n          this.target().fire('finished', {\n            fx: this,\n            situation: this.situation\n          });\n\n          if (!this.situations.length) {\n            this.target().fire('allfinished'); // Recheck the length since the user may call animate in the afterAll callback\n\n            if (!this.situations.length) {\n              this.target().off('.fx'); // there shouldnt be any binding left, but to make sure...\n\n              this.active = false;\n            }\n          } // start next animation\n\n\n          if (this.active) this.dequeue();else this.clearCurrent();\n        } else if (!this.paused && this.active) {\n          // we continue animating when we are not at the end\n          this.startAnimFrame();\n        } // save last eased position for once callback triggering\n\n\n        this.lastPos = eased;\n        return this;\n      } // calculates the step for every property and calls block with it\n      ,\n      eachAt: function eachAt() {\n        var i,\n            len,\n            at,\n            self = this,\n            target = this.target(),\n            s = this.situation; // apply animations which can be called trough a method\n\n        for (i in s.animations) {\n          at = [].concat(s.animations[i]).map(function (el) {\n            return typeof el !== 'string' && el.at ? el.at(s.ease(self.pos), self.pos) : el;\n          });\n          target[i].apply(target, at);\n        } // apply animation which has to be applied with attr()\n\n\n        for (i in s.attrs) {\n          at = [i].concat(s.attrs[i]).map(function (el) {\n            return typeof el !== 'string' && el.at ? el.at(s.ease(self.pos), self.pos) : el;\n          });\n          target.attr.apply(target, at);\n        } // apply animation which has to be applied with style()\n\n\n        for (i in s.styles) {\n          at = [i].concat(s.styles[i]).map(function (el) {\n            return typeof el !== 'string' && el.at ? el.at(s.ease(self.pos), self.pos) : el;\n          });\n          target.style.apply(target, at);\n        } // animate initialTransformation which has to be chained\n\n\n        if (s.transforms.length) {\n          // get initial initialTransformation\n          at = s.initialTransformation;\n\n          for (i = 0, len = s.transforms.length; i < len; i++) {\n            // get next transformation in chain\n            var a = s.transforms[i]; // multiply matrix directly\n\n            if (a instanceof SVG.Matrix) {\n              if (a.relative) {\n                at = at.multiply(new SVG.Matrix().morph(a).at(s.ease(this.pos)));\n              } else {\n                at = at.morph(a).at(s.ease(this.pos));\n              }\n\n              continue;\n            } // when transformation is absolute we have to reset the needed transformation first\n\n\n            if (!a.relative) a.undo(at.extract()); // and reapply it after\n\n            at = at.multiply(a.at(s.ease(this.pos)));\n          } // set new matrix on element\n\n\n          target.matrix(at);\n        }\n\n        return this;\n      } // adds an once-callback which is called at a specific position and never again\n      ,\n      once: function once(pos, fn, isEased) {\n        var c = this.last();\n        if (!isEased) pos = c.ease(pos);\n        c.once[pos] = fn;\n        return this;\n      },\n      _callStart: function _callStart() {\n        setTimeout(function () {\n          this.start();\n        }.bind(this), 0);\n        return this;\n      }\n    },\n    parent: SVG.Element // Add method to parent elements\n    ,\n    construct: {\n      // Get fx module or create a new one, then animate with given duration and ease\n      animate: function animate(o, ease, delay) {\n        return (this.fx || (this.fx = new SVG.FX(this))).animate(o, ease, delay);\n      },\n      delay: function delay(_delay2) {\n        return (this.fx || (this.fx = new SVG.FX(this))).delay(_delay2);\n      },\n      stop: function stop(jumpToEnd, clearQueue) {\n        if (this.fx) this.fx.stop(jumpToEnd, clearQueue);\n        return this;\n      },\n      finish: function finish() {\n        if (this.fx) this.fx.finish();\n        return this;\n      } // Pause current animation\n      ,\n      pause: function pause() {\n        if (this.fx) this.fx.pause();\n        return this;\n      } // Play paused current animation\n      ,\n      play: function play() {\n        if (this.fx) this.fx.play();\n        return this;\n      } // Set/Get the speed of the animations\n      ,\n      speed: function speed(_speed2) {\n        if (this.fx) if (_speed2 == null) return this.fx.speed();else this.fx.speed(_speed2);\n        return this;\n      }\n    }\n  }); // MorphObj is used whenever no morphable object is given\n\n  SVG.MorphObj = SVG.invent({\n    create: function create(from, to) {\n      // prepare color for morphing\n      if (SVG.Color.isColor(to)) return new SVG.Color(from).morph(to); // check if we have a list of values\n\n      if (SVG.regex.delimiter.test(from)) {\n        // prepare path for morphing\n        if (SVG.regex.pathLetters.test(from)) return new SVG.PathArray(from).morph(to); // prepare value list for morphing\n        else return new SVG.Array(from).morph(to);\n      } // prepare number for morphing\n\n\n      if (SVG.regex.numberAndUnit.test(to)) return new SVG.Number(from).morph(to); // prepare for plain morphing\n\n      this.value = from;\n      this.destination = to;\n    },\n    extend: {\n      at: function at(pos, real) {\n        return real < 1 ? this.value : this.destination;\n      },\n      valueOf: function valueOf() {\n        return this.value;\n      }\n    }\n  });\n  SVG.extend(SVG.FX, {\n    // Add animatable attributes\n    attr: function attr(a, v, relative) {\n      // apply attributes individually\n      if (_typeof(a) == 'object') {\n        for (var key in a) {\n          this.attr(key, a[key]);\n        }\n      } else {\n        this.add(a, v, 'attrs');\n      }\n\n      return this;\n    } // Add animatable styles\n    ,\n    style: function style(s, v) {\n      if (_typeof(s) == 'object') for (var key in s) {\n        this.style(key, s[key]);\n      } else this.add(s, v, 'styles');\n      return this;\n    } // Animatable x-axis\n    ,\n    x: function x(_x2, relative) {\n      if (this.target() instanceof SVG.G) {\n        this.transform({\n          x: _x2\n        }, relative);\n        return this;\n      }\n\n      var num = new SVG.Number(_x2);\n      num.relative = relative;\n      return this.add('x', num);\n    } // Animatable y-axis\n    ,\n    y: function y(_y2, relative) {\n      if (this.target() instanceof SVG.G) {\n        this.transform({\n          y: _y2\n        }, relative);\n        return this;\n      }\n\n      var num = new SVG.Number(_y2);\n      num.relative = relative;\n      return this.add('y', num);\n    } // Animatable center x-axis\n    ,\n    cx: function cx(x) {\n      return this.add('cx', new SVG.Number(x));\n    } // Animatable center y-axis\n    ,\n    cy: function cy(y) {\n      return this.add('cy', new SVG.Number(y));\n    } // Add animatable move\n    ,\n    move: function move(x, y) {\n      return this.x(x).y(y);\n    } // Add animatable center\n    ,\n    center: function center(x, y) {\n      return this.cx(x).cy(y);\n    } // Add animatable size\n    ,\n    size: function size(width, height) {\n      if (this.target() instanceof SVG.Text) {\n        // animate font size for Text elements\n        this.attr('font-size', width);\n      } else {\n        // animate bbox based size for all other elements\n        var box;\n\n        if (!width || !height) {\n          box = this.target().bbox();\n        }\n\n        if (!width) {\n          width = box.width / box.height * height;\n        }\n\n        if (!height) {\n          height = box.height / box.width * width;\n        }\n\n        this.add('width', new SVG.Number(width)).add('height', new SVG.Number(height));\n      }\n\n      return this;\n    } // Add animatable width\n    ,\n    width: function width(_width2) {\n      return this.add('width', new SVG.Number(_width2));\n    } // Add animatable height\n    ,\n    height: function height(_height2) {\n      return this.add('height', new SVG.Number(_height2));\n    } // Add animatable plot\n    ,\n    plot: function plot(a, b, c, d) {\n      // Lines can be plotted with 4 arguments\n      if (arguments.length == 4) {\n        return this.plot([a, b, c, d]);\n      }\n\n      return this.add('plot', new (this.target().morphArray)(a));\n    } // Add leading method\n    ,\n    leading: function leading(value) {\n      return this.target().leading ? this.add('leading', new SVG.Number(value)) : this;\n    } // Add animatable viewbox\n    ,\n    viewbox: function viewbox(x, y, width, height) {\n      if (this.target() instanceof SVG.Container) {\n        this.add('viewbox', new SVG.ViewBox(x, y, width, height));\n      }\n\n      return this;\n    },\n    update: function update(o) {\n      if (this.target() instanceof SVG.Stop) {\n        if (typeof o == 'number' || o instanceof SVG.Number) {\n          return this.update({\n            offset: arguments[0],\n            color: arguments[1],\n            opacity: arguments[2]\n          });\n        }\n\n        if (o.opacity != null) this.attr('stop-opacity', o.opacity);\n        if (o.color != null) this.attr('stop-color', o.color);\n        if (o.offset != null) this.attr('offset', o.offset);\n      }\n\n      return this;\n    }\n  });\n  SVG.Box = SVG.invent({\n    create: function create(x, y, width, height) {\n      if (_typeof(x) == 'object' && !(x instanceof SVG.Element)) {\n        // chromes getBoundingClientRect has no x and y property\n        return SVG.Box.call(this, x.left != null ? x.left : x.x, x.top != null ? x.top : x.y, x.width, x.height);\n      } else if (arguments.length == 4) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n      } // add center, right, bottom...\n\n\n      fullBox(this);\n    },\n    extend: {\n      // Merge rect box with another, return a new instance\n      merge: function merge(box) {\n        var b = new this.constructor(); // merge boxes\n\n        b.x = Math.min(this.x, box.x);\n        b.y = Math.min(this.y, box.y);\n        b.width = Math.max(this.x + this.width, box.x + box.width) - b.x;\n        b.height = Math.max(this.y + this.height, box.y + box.height) - b.y;\n        return fullBox(b);\n      },\n      transform: function transform(m) {\n        var xMin = Infinity,\n            xMax = -Infinity,\n            yMin = Infinity,\n            yMax = -Infinity,\n            p,\n            bbox;\n        var pts = [new SVG.Point(this.x, this.y), new SVG.Point(this.x2, this.y), new SVG.Point(this.x, this.y2), new SVG.Point(this.x2, this.y2)];\n        pts.forEach(function (p) {\n          p = p.transform(m);\n          xMin = Math.min(xMin, p.x);\n          xMax = Math.max(xMax, p.x);\n          yMin = Math.min(yMin, p.y);\n          yMax = Math.max(yMax, p.y);\n        });\n        bbox = new this.constructor();\n        bbox.x = xMin;\n        bbox.width = xMax - xMin;\n        bbox.y = yMin;\n        bbox.height = yMax - yMin;\n        fullBox(bbox);\n        return bbox;\n      }\n    }\n  });\n  SVG.BBox = SVG.invent({\n    // Initialize\n    create: function create(element) {\n      SVG.Box.apply(this, [].slice.call(arguments)); // get values if element is given\n\n      if (element instanceof SVG.Element) {\n        var box; // yes this is ugly, but Firefox can be a pain when it comes to elements that are not yet rendered\n\n        try {\n          if (!document.documentElement.contains) {\n            // This is IE - it does not support contains() for top-level SVGs\n            var topParent = element.node;\n\n            while (topParent.parentNode) {\n              topParent = topParent.parentNode;\n            }\n\n            if (topParent != document) throw new Exception('Element not in the dom');\n          } else {\n            // the element is NOT in the dom, throw error\n            if (!document.documentElement.contains(element.node)) throw new Exception('Element not in the dom');\n          } // find native bbox\n\n\n          box = element.node.getBBox();\n        } catch (e) {\n          if (element instanceof SVG.Shape) {\n            var clone = element.clone(SVG.parser.draw.instance).show();\n            box = clone.node.getBBox();\n            clone.remove();\n          } else {\n            box = {\n              x: element.node.clientLeft,\n              y: element.node.clientTop,\n              width: element.node.clientWidth,\n              height: element.node.clientHeight\n            };\n          }\n        }\n\n        SVG.Box.call(this, box);\n      }\n    } // Define ancestor\n    ,\n    inherit: SVG.Box // Define Parent\n    ,\n    parent: SVG.Element // Constructor\n    ,\n    construct: {\n      // Get bounding box\n      bbox: function bbox() {\n        return new SVG.BBox(this);\n      }\n    }\n  });\n  SVG.BBox.prototype.constructor = SVG.BBox;\n  SVG.extend(SVG.Element, {\n    tbox: function tbox() {\n      console.warn('Use of TBox is deprecated and mapped to RBox. Use .rbox() instead.');\n      return this.rbox(this.doc());\n    }\n  });\n  SVG.RBox = SVG.invent({\n    // Initialize\n    create: function create(element) {\n      SVG.Box.apply(this, [].slice.call(arguments));\n\n      if (element instanceof SVG.Element) {\n        SVG.Box.call(this, element.node.getBoundingClientRect());\n      }\n    },\n    inherit: SVG.Box // define Parent\n    ,\n    parent: SVG.Element,\n    extend: {\n      addOffset: function addOffset() {\n        // offset by window scroll position, because getBoundingClientRect changes when window is scrolled\n        this.x += window.pageXOffset;\n        this.y += window.pageYOffset;\n        return this;\n      }\n    } // Constructor\n    ,\n    construct: {\n      // Get rect box\n      rbox: function rbox(el) {\n        if (el) return new SVG.RBox(this).transform(el.screenCTM().inverse());\n        return new SVG.RBox(this).addOffset();\n      }\n    }\n  });\n  SVG.RBox.prototype.constructor = SVG.RBox;\n  SVG.Matrix = SVG.invent({\n    // Initialize\n    create: function create(source) {\n      var i,\n          base = arrayToMatrix([1, 0, 0, 1, 0, 0]); // ensure source as object\n\n      source = source instanceof SVG.Element ? source.matrixify() : typeof source === 'string' ? arrayToMatrix(source.split(SVG.regex.delimiter).map(parseFloat)) : arguments.length == 6 ? arrayToMatrix([].slice.call(arguments)) : Array.isArray(source) ? arrayToMatrix(source) : _typeof(source) === 'object' ? source : base; // merge source\n\n      for (i = abcdef.length - 1; i >= 0; --i) {\n        this[abcdef[i]] = source[abcdef[i]] != null ? source[abcdef[i]] : base[abcdef[i]];\n      }\n    } // Add methods\n    ,\n    extend: {\n      // Extract individual transformations\n      extract: function extract() {\n        // find delta transform points\n        var px = deltaTransformPoint(this, 0, 1),\n            py = deltaTransformPoint(this, 1, 0),\n            skewX = 180 / Math.PI * Math.atan2(px.y, px.x) - 90;\n        return {\n          // translation\n          x: this.e,\n          y: this.f,\n          transformedX: (this.e * Math.cos(skewX * Math.PI / 180) + this.f * Math.sin(skewX * Math.PI / 180)) / Math.sqrt(this.a * this.a + this.b * this.b),\n          transformedY: (this.f * Math.cos(skewX * Math.PI / 180) + this.e * Math.sin(-skewX * Math.PI / 180)) / Math.sqrt(this.c * this.c + this.d * this.d) // skew\n          ,\n          skewX: -skewX,\n          skewY: 180 / Math.PI * Math.atan2(py.y, py.x) // scale\n          ,\n          scaleX: Math.sqrt(this.a * this.a + this.b * this.b),\n          scaleY: Math.sqrt(this.c * this.c + this.d * this.d) // rotation\n          ,\n          rotation: skewX,\n          a: this.a,\n          b: this.b,\n          c: this.c,\n          d: this.d,\n          e: this.e,\n          f: this.f,\n          matrix: new SVG.Matrix(this)\n        };\n      } // Clone matrix\n      ,\n      clone: function clone() {\n        return new SVG.Matrix(this);\n      } // Morph one matrix into another\n      ,\n      morph: function morph(matrix) {\n        // store new destination\n        this.destination = new SVG.Matrix(matrix);\n        return this;\n      } // Get morphed matrix at a given position\n      ,\n      at: function at(pos) {\n        // make sure a destination is defined\n        if (!this.destination) return this; // calculate morphed matrix at a given position\n\n        var matrix = new SVG.Matrix({\n          a: this.a + (this.destination.a - this.a) * pos,\n          b: this.b + (this.destination.b - this.b) * pos,\n          c: this.c + (this.destination.c - this.c) * pos,\n          d: this.d + (this.destination.d - this.d) * pos,\n          e: this.e + (this.destination.e - this.e) * pos,\n          f: this.f + (this.destination.f - this.f) * pos\n        });\n        return matrix;\n      } // Multiplies by given matrix\n      ,\n      multiply: function multiply(matrix) {\n        return new SVG.Matrix(this.native().multiply(parseMatrix(matrix).native()));\n      } // Inverses matrix\n      ,\n      inverse: function inverse() {\n        return new SVG.Matrix(this.native().inverse());\n      } // Translate matrix\n      ,\n      translate: function translate(x, y) {\n        return new SVG.Matrix(this.native().translate(x || 0, y || 0));\n      } // Scale matrix\n      ,\n      scale: function scale(x, y, cx, cy) {\n        // support uniformal scale\n        if (arguments.length == 1) {\n          y = x;\n        } else if (arguments.length == 3) {\n          cy = cx;\n          cx = y;\n          y = x;\n        }\n\n        return this.around(cx, cy, new SVG.Matrix(x, 0, 0, y, 0, 0));\n      } // Rotate matrix\n      ,\n      rotate: function rotate(r, cx, cy) {\n        // convert degrees to radians\n        r = SVG.utils.radians(r);\n        return this.around(cx, cy, new SVG.Matrix(Math.cos(r), Math.sin(r), -Math.sin(r), Math.cos(r), 0, 0));\n      } // Flip matrix on x or y, at a given offset\n      ,\n      flip: function flip(a, o) {\n        return a == 'x' ? this.scale(-1, 1, o, 0) : a == 'y' ? this.scale(1, -1, 0, o) : this.scale(-1, -1, a, o != null ? o : a);\n      } // Skew\n      ,\n      skew: function skew(x, y, cx, cy) {\n        // support uniformal skew\n        if (arguments.length == 1) {\n          y = x;\n        } else if (arguments.length == 3) {\n          cy = cx;\n          cx = y;\n          y = x;\n        } // convert degrees to radians\n\n\n        x = SVG.utils.radians(x);\n        y = SVG.utils.radians(y);\n        return this.around(cx, cy, new SVG.Matrix(1, Math.tan(y), Math.tan(x), 1, 0, 0));\n      } // SkewX\n      ,\n      skewX: function skewX(x, cx, cy) {\n        return this.skew(x, 0, cx, cy);\n      } // SkewY\n      ,\n      skewY: function skewY(y, cx, cy) {\n        return this.skew(0, y, cx, cy);\n      } // Transform around a center point\n      ,\n      around: function around(cx, cy, matrix) {\n        return this.multiply(new SVG.Matrix(1, 0, 0, 1, cx || 0, cy || 0)).multiply(matrix).multiply(new SVG.Matrix(1, 0, 0, 1, -cx || 0, -cy || 0));\n      } // Convert to native SVGMatrix\n      ,\n      native: function native() {\n        // create new matrix\n        var matrix = SVG.parser.native.createSVGMatrix(); // update with current values\n\n        for (var i = abcdef.length - 1; i >= 0; i--) {\n          matrix[abcdef[i]] = this[abcdef[i]];\n        }\n\n        return matrix;\n      } // Convert matrix to string\n      ,\n      toString: function toString() {\n        // Construct the matrix directly, avoid values that are too small\n        return 'matrix(' + float32String(this.a) + ',' + float32String(this.b) + ',' + float32String(this.c) + ',' + float32String(this.d) + ',' + float32String(this.e) + ',' + float32String(this.f) + ')';\n      }\n    } // Define parent\n    ,\n    parent: SVG.Element // Add parent method\n    ,\n    construct: {\n      // Get current matrix\n      ctm: function ctm() {\n        return new SVG.Matrix(this.node.getCTM());\n      },\n      // Get current screen matrix\n      screenCTM: function screenCTM() {\n        /* https://bugzilla.mozilla.org/show_bug.cgi?id=1344537\n           This is needed because FF does not return the transformation matrix\n           for the inner coordinate system when getScreenCTM() is called on nested svgs.\n           However all other Browsers do that */\n        if (this instanceof SVG.Nested) {\n          var rect = this.rect(1, 1);\n          var m = rect.node.getScreenCTM();\n          rect.remove();\n          return new SVG.Matrix(m);\n        }\n\n        return new SVG.Matrix(this.node.getScreenCTM());\n      }\n    }\n  });\n  SVG.Point = SVG.invent({\n    // Initialize\n    create: function create(x, y) {\n      var i,\n          source,\n          base = {\n        x: 0,\n        y: 0\n      }; // ensure source as object\n\n      source = Array.isArray(x) ? {\n        x: x[0],\n        y: x[1]\n      } : _typeof(x) === 'object' ? {\n        x: x.x,\n        y: x.y\n      } : x != null ? {\n        x: x,\n        y: y != null ? y : x\n      } : base; // If y has no value, then x is used has its value\n      // merge source\n\n      this.x = source.x;\n      this.y = source.y;\n    } // Add methods\n    ,\n    extend: {\n      // Clone point\n      clone: function clone() {\n        return new SVG.Point(this);\n      } // Morph one point into another\n      ,\n      morph: function morph(x, y) {\n        // store new destination\n        this.destination = new SVG.Point(x, y);\n        return this;\n      } // Get morphed point at a given position\n      ,\n      at: function at(pos) {\n        // make sure a destination is defined\n        if (!this.destination) return this; // calculate morphed matrix at a given position\n\n        var point = new SVG.Point({\n          x: this.x + (this.destination.x - this.x) * pos,\n          y: this.y + (this.destination.y - this.y) * pos\n        });\n        return point;\n      } // Convert to native SVGPoint\n      ,\n      native: function native() {\n        // create new point\n        var point = SVG.parser.native.createSVGPoint(); // update with current values\n\n        point.x = this.x;\n        point.y = this.y;\n        return point;\n      } // transform point with matrix\n      ,\n      transform: function transform(matrix) {\n        return new SVG.Point(this.native().matrixTransform(matrix.native()));\n      }\n    }\n  });\n  SVG.extend(SVG.Element, {\n    // Get point\n    point: function point(x, y) {\n      return new SVG.Point(x, y).transform(this.screenCTM().inverse());\n    }\n  });\n  SVG.extend(SVG.Element, {\n    // Set svg element attribute\n    attr: function attr(a, v, n) {\n      // act as full getter\n      if (a == null) {\n        // get an object of attributes\n        a = {};\n        v = this.node.attributes;\n\n        for (n = v.length - 1; n >= 0; n--) {\n          a[v[n].nodeName] = SVG.regex.isNumber.test(v[n].nodeValue) ? parseFloat(v[n].nodeValue) : v[n].nodeValue;\n        }\n\n        return a;\n      } else if (_typeof(a) == 'object') {\n        // apply every attribute individually if an object is passed\n        for (v in a) {\n          this.attr(v, a[v]);\n        }\n      } else if (v === null) {\n        // remove value\n        this.node.removeAttribute(a);\n      } else if (v == null) {\n        // act as a getter if the first and only argument is not an object\n        v = this.node.getAttribute(a);\n        return v == null ? SVG.defaults.attrs[a] : SVG.regex.isNumber.test(v) ? parseFloat(v) : v;\n      } else {\n        // BUG FIX: some browsers will render a stroke if a color is given even though stroke width is 0\n        if (a == 'stroke-width') this.attr('stroke', parseFloat(v) > 0 ? this._stroke : null);else if (a == 'stroke') this._stroke = v; // convert image fill and stroke to patterns\n\n        if (a == 'fill' || a == 'stroke') {\n          if (SVG.regex.isImage.test(v)) v = this.doc().defs().image(v, 0, 0);\n          if (v instanceof SVG.Image) v = this.doc().defs().pattern(0, 0, function () {\n            this.add(v);\n          });\n        } // ensure correct numeric values (also accepts NaN and Infinity)\n\n\n        if (typeof v === 'number') v = new SVG.Number(v); // ensure full hex color\n        else if (SVG.Color.isColor(v)) v = new SVG.Color(v); // parse array values\n          else if (Array.isArray(v)) v = new SVG.Array(v); // if the passed attribute is leading...\n\n        if (a == 'leading') {\n          // ... call the leading method instead\n          if (this.leading) this.leading(v);\n        } else {\n          // set given attribute on node\n          typeof n === 'string' ? this.node.setAttributeNS(n, a, v.toString()) : this.node.setAttribute(a, v.toString());\n        } // rebuild if required\n\n\n        if (this.rebuild && (a == 'font-size' || a == 'x')) this.rebuild(a, v);\n      }\n\n      return this;\n    }\n  });\n  SVG.extend(SVG.Element, {\n    // Add transformations\n    transform: function transform(o, relative) {\n      // get target in case of the fx module, otherwise reference this\n      var target = this,\n          matrix,\n          bbox; // act as a getter\n\n      if (_typeof(o) !== 'object') {\n        // get current matrix\n        matrix = new SVG.Matrix(target).extract();\n        return typeof o === 'string' ? matrix[o] : matrix;\n      } // get current matrix\n\n\n      matrix = new SVG.Matrix(target); // ensure relative flag\n\n      relative = !!relative || !!o.relative; // act on matrix\n\n      if (o.a != null) {\n        matrix = relative ? // relative\n        matrix.multiply(new SVG.Matrix(o)) : // absolute\n        new SVG.Matrix(o); // act on rotation\n      } else if (o.rotation != null) {\n        // ensure centre point\n        ensureCentre(o, target); // apply transformation\n\n        matrix = relative ? // relative\n        matrix.rotate(o.rotation, o.cx, o.cy) : // absolute\n        matrix.rotate(o.rotation - matrix.extract().rotation, o.cx, o.cy); // act on scale\n      } else if (o.scale != null || o.scaleX != null || o.scaleY != null) {\n        // ensure centre point\n        ensureCentre(o, target); // ensure scale values on both axes\n\n        o.scaleX = o.scale != null ? o.scale : o.scaleX != null ? o.scaleX : 1;\n        o.scaleY = o.scale != null ? o.scale : o.scaleY != null ? o.scaleY : 1;\n\n        if (!relative) {\n          // absolute; multiply inversed values\n          var e = matrix.extract();\n          o.scaleX = o.scaleX * 1 / e.scaleX;\n          o.scaleY = o.scaleY * 1 / e.scaleY;\n        }\n\n        matrix = matrix.scale(o.scaleX, o.scaleY, o.cx, o.cy); // act on skew\n      } else if (o.skew != null || o.skewX != null || o.skewY != null) {\n        // ensure centre point\n        ensureCentre(o, target); // ensure skew values on both axes\n\n        o.skewX = o.skew != null ? o.skew : o.skewX != null ? o.skewX : 0;\n        o.skewY = o.skew != null ? o.skew : o.skewY != null ? o.skewY : 0;\n\n        if (!relative) {\n          // absolute; reset skew values\n          var e = matrix.extract();\n          matrix = matrix.multiply(new SVG.Matrix().skew(e.skewX, e.skewY, o.cx, o.cy).inverse());\n        }\n\n        matrix = matrix.skew(o.skewX, o.skewY, o.cx, o.cy); // act on flip\n      } else if (o.flip) {\n        if (o.flip == 'x' || o.flip == 'y') {\n          o.offset = o.offset == null ? target.bbox()['c' + o.flip] : o.offset;\n        } else {\n          if (o.offset == null) {\n            bbox = target.bbox();\n            o.flip = bbox.cx;\n            o.offset = bbox.cy;\n          } else {\n            o.flip = o.offset;\n          }\n        }\n\n        matrix = new SVG.Matrix().flip(o.flip, o.offset); // act on translate\n      } else if (o.x != null || o.y != null) {\n        if (relative) {\n          // relative\n          matrix = matrix.translate(o.x, o.y);\n        } else {\n          // absolute\n          if (o.x != null) matrix.e = o.x;\n          if (o.y != null) matrix.f = o.y;\n        }\n      }\n\n      return this.attr('transform', matrix);\n    }\n  });\n  SVG.extend(SVG.FX, {\n    transform: function transform(o, relative) {\n      // get target in case of the fx module, otherwise reference this\n      var target = this.target(),\n          matrix,\n          bbox; // act as a getter\n\n      if (_typeof(o) !== 'object') {\n        // get current matrix\n        matrix = new SVG.Matrix(target).extract();\n        return typeof o === 'string' ? matrix[o] : matrix;\n      } // ensure relative flag\n\n\n      relative = !!relative || !!o.relative; // act on matrix\n\n      if (o.a != null) {\n        matrix = new SVG.Matrix(o); // act on rotation\n      } else if (o.rotation != null) {\n        // ensure centre point\n        ensureCentre(o, target); // apply transformation\n\n        matrix = new SVG.Rotate(o.rotation, o.cx, o.cy); // act on scale\n      } else if (o.scale != null || o.scaleX != null || o.scaleY != null) {\n        // ensure centre point\n        ensureCentre(o, target); // ensure scale values on both axes\n\n        o.scaleX = o.scale != null ? o.scale : o.scaleX != null ? o.scaleX : 1;\n        o.scaleY = o.scale != null ? o.scale : o.scaleY != null ? o.scaleY : 1;\n        matrix = new SVG.Scale(o.scaleX, o.scaleY, o.cx, o.cy); // act on skew\n      } else if (o.skewX != null || o.skewY != null) {\n        // ensure centre point\n        ensureCentre(o, target); // ensure skew values on both axes\n\n        o.skewX = o.skewX != null ? o.skewX : 0;\n        o.skewY = o.skewY != null ? o.skewY : 0;\n        matrix = new SVG.Skew(o.skewX, o.skewY, o.cx, o.cy); // act on flip\n      } else if (o.flip) {\n        if (o.flip == 'x' || o.flip == 'y') {\n          o.offset = o.offset == null ? target.bbox()['c' + o.flip] : o.offset;\n        } else {\n          if (o.offset == null) {\n            bbox = target.bbox();\n            o.flip = bbox.cx;\n            o.offset = bbox.cy;\n          } else {\n            o.flip = o.offset;\n          }\n        }\n\n        matrix = new SVG.Matrix().flip(o.flip, o.offset); // act on translate\n      } else if (o.x != null || o.y != null) {\n        matrix = new SVG.Translate(o.x, o.y);\n      }\n\n      if (!matrix) return this;\n      matrix.relative = relative;\n      this.last().transforms.push(matrix);\n      return this._callStart();\n    }\n  });\n  SVG.extend(SVG.Element, {\n    // Reset all transformations\n    untransform: function untransform() {\n      return this.attr('transform', null);\n    },\n    // merge the whole transformation chain into one matrix and returns it\n    matrixify: function matrixify() {\n      var matrix = (this.attr('transform') || ''). // split transformations\n      split(SVG.regex.transforms).slice(0, -1).map(function (str) {\n        // generate key => value pairs\n        var kv = str.trim().split('(');\n        return [kv[0], kv[1].split(SVG.regex.delimiter).map(function (str) {\n          return parseFloat(str);\n        })];\n      }) // merge every transformation into one matrix\n      .reduce(function (matrix, transform) {\n        if (transform[0] == 'matrix') return matrix.multiply(arrayToMatrix(transform[1]));\n        return matrix[transform[0]].apply(matrix, transform[1]);\n      }, new SVG.Matrix());\n      return matrix;\n    },\n    // add an element to another parent without changing the visual representation on the screen\n    toParent: function toParent(parent) {\n      if (this == parent) return this;\n      var ctm = this.screenCTM();\n      var pCtm = parent.screenCTM().inverse();\n      this.addTo(parent).untransform().transform(pCtm.multiply(ctm));\n      return this;\n    },\n    // same as above with parent equals root-svg\n    toDoc: function toDoc() {\n      return this.toParent(this.doc());\n    }\n  });\n  SVG.Transformation = SVG.invent({\n    create: function create(source, inversed) {\n      if (arguments.length > 1 && typeof inversed != 'boolean') {\n        return this.constructor.call(this, [].slice.call(arguments));\n      }\n\n      if (Array.isArray(source)) {\n        for (var i = 0, len = this.arguments.length; i < len; ++i) {\n          this[this.arguments[i]] = source[i];\n        }\n      } else if (_typeof(source) == 'object') {\n        for (var i = 0, len = this.arguments.length; i < len; ++i) {\n          this[this.arguments[i]] = source[this.arguments[i]];\n        }\n      }\n\n      this.inversed = false;\n\n      if (inversed === true) {\n        this.inversed = true;\n      }\n    },\n    extend: {\n      arguments: [],\n      method: '',\n      at: function at(pos) {\n        var params = [];\n\n        for (var i = 0, len = this.arguments.length; i < len; ++i) {\n          params.push(this[this.arguments[i]]);\n        }\n\n        var m = this._undo || new SVG.Matrix();\n        m = new SVG.Matrix().morph(SVG.Matrix.prototype[this.method].apply(m, params)).at(pos);\n        return this.inversed ? m.inverse() : m;\n      },\n      undo: function undo(o) {\n        for (var i = 0, len = this.arguments.length; i < len; ++i) {\n          o[this.arguments[i]] = typeof this[this.arguments[i]] == 'undefined' ? 0 : o[this.arguments[i]];\n        } // The method SVG.Matrix.extract which was used before calling this\n        // method to obtain a value for the parameter o doesn't return a cx and\n        // a cy so we use the ones that were provided to this object at its creation\n\n\n        o.cx = this.cx;\n        o.cy = this.cy;\n        this._undo = new SVG[capitalize(this.method)](o, true).at(1);\n        return this;\n      }\n    }\n  });\n  SVG.Translate = SVG.invent({\n    parent: SVG.Matrix,\n    inherit: SVG.Transformation,\n    create: function create(source, inversed) {\n      this.constructor.apply(this, [].slice.call(arguments));\n    },\n    extend: {\n      arguments: ['transformedX', 'transformedY'],\n      method: 'translate'\n    }\n  });\n  SVG.Rotate = SVG.invent({\n    parent: SVG.Matrix,\n    inherit: SVG.Transformation,\n    create: function create(source, inversed) {\n      this.constructor.apply(this, [].slice.call(arguments));\n    },\n    extend: {\n      arguments: ['rotation', 'cx', 'cy'],\n      method: 'rotate',\n      at: function at(pos) {\n        var m = new SVG.Matrix().rotate(new SVG.Number().morph(this.rotation - (this._undo ? this._undo.rotation : 0)).at(pos), this.cx, this.cy);\n        return this.inversed ? m.inverse() : m;\n      },\n      undo: function undo(o) {\n        this._undo = o;\n        return this;\n      }\n    }\n  });\n  SVG.Scale = SVG.invent({\n    parent: SVG.Matrix,\n    inherit: SVG.Transformation,\n    create: function create(source, inversed) {\n      this.constructor.apply(this, [].slice.call(arguments));\n    },\n    extend: {\n      arguments: ['scaleX', 'scaleY', 'cx', 'cy'],\n      method: 'scale'\n    }\n  });\n  SVG.Skew = SVG.invent({\n    parent: SVG.Matrix,\n    inherit: SVG.Transformation,\n    create: function create(source, inversed) {\n      this.constructor.apply(this, [].slice.call(arguments));\n    },\n    extend: {\n      arguments: ['skewX', 'skewY', 'cx', 'cy'],\n      method: 'skew'\n    }\n  });\n  SVG.extend(SVG.Element, {\n    // Dynamic style generator\n    style: function style(s, v) {\n      if (arguments.length == 0) {\n        // get full style\n        return this.node.style.cssText || '';\n      } else if (arguments.length < 2) {\n        // apply every style individually if an object is passed\n        if (_typeof(s) == 'object') {\n          for (v in s) {\n            this.style(v, s[v]);\n          }\n        } else if (SVG.regex.isCss.test(s)) {\n          // parse css string\n          s = s.split(/\\s*;\\s*/) // filter out suffix ; and stuff like ;;\n          .filter(function (e) {\n            return !!e;\n          }).map(function (e) {\n            return e.split(/\\s*:\\s*/);\n          }); // apply every definition individually\n\n          while (v = s.pop()) {\n            this.style(v[0], v[1]);\n          }\n        } else {\n          // act as a getter if the first and only argument is not an object\n          return this.node.style[camelCase(s)];\n        }\n      } else {\n        this.node.style[camelCase(s)] = v === null || SVG.regex.isBlank.test(v) ? '' : v;\n      }\n\n      return this;\n    }\n  });\n  SVG.Parent = SVG.invent({\n    // Initialize node\n    create: function create(element) {\n      this.constructor.call(this, element);\n    } // Inherit from\n    ,\n    inherit: SVG.Element // Add class methods\n    ,\n    extend: {\n      // Returns all child elements\n      children: function children() {\n        return SVG.utils.map(SVG.utils.filterSVGElements(this.node.childNodes), function (node) {\n          return SVG.adopt(node);\n        });\n      } // Add given element at a position\n      ,\n      add: function add(element, i) {\n        if (i == null) this.node.appendChild(element.node);else if (element.node != this.node.childNodes[i]) this.node.insertBefore(element.node, this.node.childNodes[i]);\n        return this;\n      } // Basically does the same as `add()` but returns the added element instead\n      ,\n      put: function put(element, i) {\n        this.add(element, i);\n        return element;\n      } // Checks if the given element is a child\n      ,\n      has: function has(element) {\n        return this.index(element) >= 0;\n      } // Gets index of given element\n      ,\n      index: function index(element) {\n        return [].slice.call(this.node.childNodes).indexOf(element.node);\n      } // Get a element at the given index\n      ,\n      get: function get(i) {\n        return SVG.adopt(this.node.childNodes[i]);\n      } // Get first child\n      ,\n      first: function first() {\n        return this.get(0);\n      } // Get the last child\n      ,\n      last: function last() {\n        return this.get(this.node.childNodes.length - 1);\n      } // Iterates over all children and invokes a given block\n      ,\n      each: function each(block, deep) {\n        var i,\n            il,\n            children = this.children();\n\n        for (i = 0, il = children.length; i < il; i++) {\n          if (children[i] instanceof SVG.Element) block.apply(children[i], [i, children]);\n          if (deep && children[i] instanceof SVG.Container) children[i].each(block, deep);\n        }\n\n        return this;\n      } // Remove a given child\n      ,\n      removeElement: function removeElement(element) {\n        this.node.removeChild(element.node);\n        return this;\n      } // Remove all elements in this container\n      ,\n      clear: function clear() {\n        // remove children\n        while (this.node.hasChildNodes()) {\n          this.node.removeChild(this.node.lastChild);\n        } // remove defs reference\n\n\n        delete this._defs;\n        return this;\n      },\n      // Get defs\n      defs: function defs() {\n        return this.doc().defs();\n      }\n    }\n  });\n  SVG.extend(SVG.Parent, {\n    ungroup: function ungroup(parent, depth) {\n      if (depth === 0 || this instanceof SVG.Defs || this.node == SVG.parser.draw) return this;\n      parent = parent || (this instanceof SVG.Doc ? this : this.parent(SVG.Parent));\n      depth = depth || Infinity;\n      this.each(function () {\n        if (this instanceof SVG.Defs) return this;\n        if (this instanceof SVG.Parent) return this.ungroup(parent, depth - 1);\n        return this.toParent(parent);\n      });\n      this.node.firstChild || this.remove();\n      return this;\n    },\n    flatten: function flatten(parent, depth) {\n      return this.ungroup(parent, depth);\n    }\n  });\n  SVG.Container = SVG.invent({\n    // Initialize node\n    create: function create(element) {\n      this.constructor.call(this, element);\n    } // Inherit from\n    ,\n    inherit: SVG.Parent\n  });\n  SVG.ViewBox = SVG.invent({\n    create: function create(source) {\n      var i,\n          base = [0, 0, 0, 0];\n      var x,\n          y,\n          width,\n          height,\n          box,\n          view,\n          we,\n          he,\n          wm = 1 // width multiplier\n      ,\n          hm = 1 // height multiplier\n      ,\n          reg = /[+-]?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?/gi;\n\n      if (source instanceof SVG.Element) {\n        we = source;\n        he = source;\n        view = (source.attr('viewBox') || '').match(reg);\n        box = source.bbox; // get dimensions of current node\n\n        width = new SVG.Number(source.width());\n        height = new SVG.Number(source.height()); // find nearest non-percentual dimensions\n\n        while (width.unit == '%') {\n          wm *= width.value;\n          width = new SVG.Number(we instanceof SVG.Doc ? we.parent().offsetWidth : we.parent().width());\n          we = we.parent();\n        }\n\n        while (height.unit == '%') {\n          hm *= height.value;\n          height = new SVG.Number(he instanceof SVG.Doc ? he.parent().offsetHeight : he.parent().height());\n          he = he.parent();\n        } // ensure defaults\n\n\n        this.x = 0;\n        this.y = 0;\n        this.width = width * wm;\n        this.height = height * hm;\n        this.zoom = 1;\n\n        if (view) {\n          // get width and height from viewbox\n          x = parseFloat(view[0]);\n          y = parseFloat(view[1]);\n          width = parseFloat(view[2]);\n          height = parseFloat(view[3]); // calculate zoom accoring to viewbox\n\n          this.zoom = this.width / this.height > width / height ? this.height / height : this.width / width; // calculate real pixel dimensions on parent SVG.Doc element\n\n          this.x = x;\n          this.y = y;\n          this.width = width;\n          this.height = height;\n        }\n      } else {\n        // ensure source as object\n        source = typeof source === 'string' ? source.match(reg).map(function (el) {\n          return parseFloat(el);\n        }) : Array.isArray(source) ? source : _typeof(source) == 'object' ? [source.x, source.y, source.width, source.height] : arguments.length == 4 ? [].slice.call(arguments) : base;\n        this.x = source[0];\n        this.y = source[1];\n        this.width = source[2];\n        this.height = source[3];\n      }\n    },\n    extend: {\n      toString: function toString() {\n        return this.x + ' ' + this.y + ' ' + this.width + ' ' + this.height;\n      },\n      morph: function morph(x, y, width, height) {\n        this.destination = new SVG.ViewBox(x, y, width, height);\n        return this;\n      },\n      at: function at(pos) {\n        if (!this.destination) return this;\n        return new SVG.ViewBox([this.x + (this.destination.x - this.x) * pos, this.y + (this.destination.y - this.y) * pos, this.width + (this.destination.width - this.width) * pos, this.height + (this.destination.height - this.height) * pos]);\n      }\n    } // Define parent\n    ,\n    parent: SVG.Container // Add parent method\n    ,\n    construct: {\n      // get/set viewbox\n      viewbox: function viewbox(x, y, width, height) {\n        if (arguments.length == 0) // act as a getter if there are no arguments\n          return new SVG.ViewBox(this); // otherwise act as a setter\n\n        return this.attr('viewBox', new SVG.ViewBox(x, y, width, height));\n      }\n    }\n  }) // Add events to elements\n  ;\n  ['click', 'dblclick', 'mousedown', 'mouseup', 'mouseover', 'mouseout', 'mousemove', 'mouseenter', 'mouseleave', 'touchstart', 'touchmove', 'touchleave', 'touchend', 'touchcancel'].forEach(function (event) {\n    // add event to SVG.Element\n    SVG.Element.prototype[event] = function (f) {\n      // bind event to element rather than element node\n      if (f == null) {\n        SVG.off(this, event);\n      } else {\n        SVG.on(this, event, f);\n      }\n\n      return this;\n    };\n  });\n  SVG.listenerId = 0; // Add event binder in the SVG namespace\n\n  SVG.on = function (node, events, listener, binding, options) {\n    var l = listener.bind(binding || node);\n    var n = node instanceof SVG.Element ? node.node : node; // ensure instance object for nodes which are not adopted\n\n    n.instance = n.instance || {\n      _events: {}\n    };\n    var bag = n.instance._events; // add id to listener\n\n    if (!listener._svgjsListenerId) {\n      listener._svgjsListenerId = ++SVG.listenerId;\n    }\n\n    events.split(SVG.regex.delimiter).forEach(function (event) {\n      var ev = event.split('.')[0];\n      var ns = event.split('.')[1] || '*'; // ensure valid object\n\n      bag[ev] = bag[ev] || {};\n      bag[ev][ns] = bag[ev][ns] || {}; // reference listener\n\n      bag[ev][ns][listener._svgjsListenerId] = l; // add listener\n\n      n.addEventListener(ev, l, options || false);\n    });\n  }; // Add event unbinder in the SVG namespace\n\n\n  SVG.off = function (node, events, listener, options) {\n    var n = node instanceof SVG.Element ? node.node : node;\n    if (!n.instance) return; // listener can be a function or a number\n\n    if (typeof listener === 'function') {\n      listener = listener._svgjsListenerId;\n      if (!listener) return;\n    }\n\n    var bag = n.instance._events;\n    (events || '').split(SVG.regex.delimiter).forEach(function (event) {\n      var ev = event && event.split('.')[0];\n      var ns = event && event.split('.')[1];\n      var namespace, l;\n\n      if (listener) {\n        // remove listener reference\n        if (bag[ev] && bag[ev][ns || '*']) {\n          // removeListener\n          n.removeEventListener(ev, bag[ev][ns || '*'][listener], options || false);\n          delete bag[ev][ns || '*'][listener];\n        }\n      } else if (ev && ns) {\n        // remove all listeners for a namespaced event\n        if (bag[ev] && bag[ev][ns]) {\n          for (l in bag[ev][ns]) {\n            SVG.off(n, [ev, ns].join('.'), l);\n          }\n\n          delete bag[ev][ns];\n        }\n      } else if (ns) {\n        // remove all listeners for a specific namespace\n        for (event in bag) {\n          for (namespace in bag[event]) {\n            if (ns === namespace) {\n              SVG.off(n, [event, ns].join('.'));\n            }\n          }\n        }\n      } else if (ev) {\n        // remove all listeners for the event\n        if (bag[ev]) {\n          for (namespace in bag[ev]) {\n            SVG.off(n, [ev, namespace].join('.'));\n          }\n\n          delete bag[ev];\n        }\n      } else {\n        // remove all listeners on a given node\n        for (event in bag) {\n          SVG.off(n, event);\n        }\n\n        n.instance._events = {};\n      }\n    });\n  };\n\n  SVG.extend(SVG.Element, {\n    // Bind given event to listener\n    on: function on(event, listener, binding, options) {\n      SVG.on(this, event, listener, binding, options);\n      return this;\n    },\n    // Unbind event from listener\n    off: function off(event, listener) {\n      SVG.off(this.node, event, listener);\n      return this;\n    },\n    fire: function fire(event, data) {\n      // Dispatch event\n      if (event instanceof window.Event) {\n        this.node.dispatchEvent(event);\n      } else {\n        this.node.dispatchEvent(event = new SVG.CustomEvent(event, {\n          detail: data,\n          cancelable: true\n        }));\n      }\n\n      this._event = event;\n      return this;\n    },\n    event: function event() {\n      return this._event;\n    }\n  });\n  SVG.Defs = SVG.invent({\n    // Initialize node\n    create: 'defs' // Inherit from\n    ,\n    inherit: SVG.Container\n  });\n  SVG.G = SVG.invent({\n    // Initialize node\n    create: 'g' // Inherit from\n    ,\n    inherit: SVG.Container // Add class methods\n    ,\n    extend: {\n      // Move over x-axis\n      x: function x(_x3) {\n        return _x3 == null ? this.transform('x') : this.transform({\n          x: _x3 - this.x()\n        }, true);\n      } // Move over y-axis\n      ,\n      y: function y(_y3) {\n        return _y3 == null ? this.transform('y') : this.transform({\n          y: _y3 - this.y()\n        }, true);\n      } // Move by center over x-axis\n      ,\n      cx: function cx(x) {\n        return x == null ? this.gbox().cx : this.x(x - this.gbox().width / 2);\n      } // Move by center over y-axis\n      ,\n      cy: function cy(y) {\n        return y == null ? this.gbox().cy : this.y(y - this.gbox().height / 2);\n      },\n      gbox: function gbox() {\n        var bbox = this.bbox(),\n            trans = this.transform();\n        bbox.x += trans.x;\n        bbox.x2 += trans.x;\n        bbox.cx += trans.x;\n        bbox.y += trans.y;\n        bbox.y2 += trans.y;\n        bbox.cy += trans.y;\n        return bbox;\n      }\n    } // Add parent method\n    ,\n    construct: {\n      // Create a group element\n      group: function group() {\n        return this.put(new SVG.G());\n      }\n    }\n  });\n  SVG.Doc = SVG.invent({\n    // Initialize node\n    create: function create(element) {\n      if (element) {\n        // ensure the presence of a dom element\n        element = typeof element == 'string' ? document.getElementById(element) : element; // If the target is an svg element, use that element as the main wrapper.\n        // This allows svg.js to work with svg documents as well.\n\n        if (element.nodeName == 'svg') {\n          this.constructor.call(this, element);\n        } else {\n          this.constructor.call(this, SVG.create('svg'));\n          element.appendChild(this.node);\n          this.size('100%', '100%');\n        } // set svg element attributes and ensure defs node\n\n\n        this.namespace().defs();\n      }\n    } // Inherit from\n    ,\n    inherit: SVG.Container // Add class methods\n    ,\n    extend: {\n      // Add namespaces\n      namespace: function namespace() {\n        return this.attr({\n          xmlns: SVG.ns,\n          version: '1.1'\n        }).attr('xmlns:xlink', SVG.xlink, SVG.xmlns).attr('xmlns:svgjs', SVG.svgjs, SVG.xmlns);\n      } // Creates and returns defs element\n      ,\n      defs: function defs() {\n        if (!this._defs) {\n          var defs; // Find or create a defs element in this instance\n\n          if (defs = this.node.getElementsByTagName('defs')[0]) this._defs = SVG.adopt(defs);else this._defs = new SVG.Defs(); // Make sure the defs node is at the end of the stack\n\n          this.node.appendChild(this._defs.node);\n        }\n\n        return this._defs;\n      } // custom parent method\n      ,\n      parent: function parent() {\n        if (!this.node.parentNode || this.node.parentNode.nodeName == '#document' || this.node.parentNode.nodeName == '#document-fragment') return null;\n        return this.node.parentNode;\n      } // Fix for possible sub-pixel offset. See:\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=608812\n      ,\n      spof: function spof() {\n        var pos = this.node.getScreenCTM();\n        if (pos) this.style('left', -pos.e % 1 + 'px').style('top', -pos.f % 1 + 'px');\n        return this;\n      } // Removes the doc from the DOM\n      ,\n      remove: function remove() {\n        if (this.parent()) {\n          this.parent().removeChild(this.node);\n        }\n\n        return this;\n      },\n      clear: function clear() {\n        // remove children\n        while (this.node.hasChildNodes()) {\n          this.node.removeChild(this.node.lastChild);\n        } // remove defs reference\n\n\n        delete this._defs; // add back parser\n\n        if (!SVG.parser.draw.parentNode) this.node.appendChild(SVG.parser.draw);\n        return this;\n      },\n      clone: function clone(parent) {\n        // write dom data to the dom so the clone can pickup the data\n        this.writeDataToDom(); // get reference to node\n\n        var node = this.node; // clone element and assign new id\n\n        var clone = assignNewId(node.cloneNode(true)); // insert the clone in the given parent or after myself\n\n        if (parent) {\n          (parent.node || parent).appendChild(clone.node);\n        } else {\n          node.parentNode.insertBefore(clone.node, node.nextSibling);\n        }\n\n        return clone;\n      }\n    }\n  }); // ### This module adds backward / forward functionality to elements.\n  //\n\n  SVG.extend(SVG.Element, {\n    // Get all siblings, including myself\n    siblings: function siblings() {\n      return this.parent().children();\n    } // Get the curent position siblings\n    ,\n    position: function position() {\n      return this.parent().index(this);\n    } // Get the next element (will return null if there is none)\n    ,\n    next: function next() {\n      return this.siblings()[this.position() + 1];\n    } // Get the next element (will return null if there is none)\n    ,\n    previous: function previous() {\n      return this.siblings()[this.position() - 1];\n    } // Send given element one step forward\n    ,\n    forward: function forward() {\n      var i = this.position() + 1,\n          p = this.parent(); // move node one step forward\n\n      p.removeElement(this).add(this, i); // make sure defs node is always at the top\n\n      if (p instanceof SVG.Doc) p.node.appendChild(p.defs().node);\n      return this;\n    } // Send given element one step backward\n    ,\n    backward: function backward() {\n      var i = this.position();\n      if (i > 0) this.parent().removeElement(this).add(this, i - 1);\n      return this;\n    } // Send given element all the way to the front\n    ,\n    front: function front() {\n      var p = this.parent(); // Move node forward\n\n      p.node.appendChild(this.node); // Make sure defs node is always at the top\n\n      if (p instanceof SVG.Doc) p.node.appendChild(p.defs().node);\n      return this;\n    } // Send given element all the way to the back\n    ,\n    back: function back() {\n      if (this.position() > 0) this.parent().removeElement(this).add(this, 0);\n      return this;\n    } // Inserts a given element before the targeted element\n    ,\n    before: function before(element) {\n      element.remove();\n      var i = this.position();\n      this.parent().add(element, i);\n      return this;\n    } // Insters a given element after the targeted element\n    ,\n    after: function after(element) {\n      element.remove();\n      var i = this.position();\n      this.parent().add(element, i + 1);\n      return this;\n    }\n  });\n  SVG.Mask = SVG.invent({\n    // Initialize node\n    create: function create() {\n      this.constructor.call(this, SVG.create('mask')); // keep references to masked elements\n\n      this.targets = [];\n    } // Inherit from\n    ,\n    inherit: SVG.Container // Add class methods\n    ,\n    extend: {\n      // Unmask all masked elements and remove itself\n      remove: function remove() {\n        // unmask all targets\n        for (var i = this.targets.length - 1; i >= 0; i--) {\n          if (this.targets[i]) this.targets[i].unmask();\n        }\n\n        this.targets = []; // remove mask from parent\n\n        SVG.Element.prototype.remove.call(this);\n        return this;\n      }\n    } // Add parent method\n    ,\n    construct: {\n      // Create masking element\n      mask: function mask() {\n        return this.defs().put(new SVG.Mask());\n      }\n    }\n  });\n  SVG.extend(SVG.Element, {\n    // Distribute mask to svg element\n    maskWith: function maskWith(element) {\n      // use given mask or create a new one\n      this.masker = element instanceof SVG.Mask ? element : this.parent().mask().add(element); // store reverence on self in mask\n\n      this.masker.targets.push(this); // apply mask\n\n      return this.attr('mask', 'url(\"#' + this.masker.attr('id') + '\")');\n    } // Unmask element\n    ,\n    unmask: function unmask() {\n      delete this.masker;\n      return this.attr('mask', null);\n    }\n  });\n  SVG.ClipPath = SVG.invent({\n    // Initialize node\n    create: function create() {\n      this.constructor.call(this, SVG.create('clipPath')); // keep references to clipped elements\n\n      this.targets = [];\n    } // Inherit from\n    ,\n    inherit: SVG.Container // Add class methods\n    ,\n    extend: {\n      // Unclip all clipped elements and remove itself\n      remove: function remove() {\n        // unclip all targets\n        for (var i = this.targets.length - 1; i >= 0; i--) {\n          if (this.targets[i]) this.targets[i].unclip();\n        }\n\n        this.targets = []; // remove clipPath from parent\n\n        this.parent().removeElement(this);\n        return this;\n      }\n    } // Add parent method\n    ,\n    construct: {\n      // Create clipping element\n      clip: function clip() {\n        return this.defs().put(new SVG.ClipPath());\n      }\n    }\n  }); //\n\n  SVG.extend(SVG.Element, {\n    // Distribute clipPath to svg element\n    clipWith: function clipWith(element) {\n      // use given clip or create a new one\n      this.clipper = element instanceof SVG.ClipPath ? element : this.parent().clip().add(element); // store reverence on self in mask\n\n      this.clipper.targets.push(this); // apply mask\n\n      return this.attr('clip-path', 'url(\"#' + this.clipper.attr('id') + '\")');\n    } // Unclip element\n    ,\n    unclip: function unclip() {\n      delete this.clipper;\n      return this.attr('clip-path', null);\n    }\n  });\n  SVG.Gradient = SVG.invent({\n    // Initialize node\n    create: function create(type) {\n      this.constructor.call(this, SVG.create(type + 'Gradient')); // store type\n\n      this.type = type;\n    } // Inherit from\n    ,\n    inherit: SVG.Container // Add class methods\n    ,\n    extend: {\n      // Add a color stop\n      at: function at(offset, color, opacity) {\n        return this.put(new SVG.Stop()).update(offset, color, opacity);\n      } // Update gradient\n      ,\n      update: function update(block) {\n        // remove all stops\n        this.clear(); // invoke passed block\n\n        if (typeof block == 'function') block.call(this, this);\n        return this;\n      } // Return the fill id\n      ,\n      fill: function fill() {\n        return 'url(#' + this.id() + ')';\n      } // Alias string convertion to fill\n      ,\n      toString: function toString() {\n        return this.fill();\n      } // custom attr to handle transform\n      ,\n      attr: function attr(a, b, c) {\n        if (a == 'transform') a = 'gradientTransform';\n        return SVG.Container.prototype.attr.call(this, a, b, c);\n      }\n    } // Add parent method\n    ,\n    construct: {\n      // Create gradient element in defs\n      gradient: function gradient(type, block) {\n        return this.defs().gradient(type, block);\n      }\n    }\n  }); // Add animatable methods to both gradient and fx module\n\n  SVG.extend(SVG.Gradient, SVG.FX, {\n    // From position\n    from: function from(x, y) {\n      return (this._target || this).type == 'radial' ? this.attr({\n        fx: new SVG.Number(x),\n        fy: new SVG.Number(y)\n      }) : this.attr({\n        x1: new SVG.Number(x),\n        y1: new SVG.Number(y)\n      });\n    } // To position\n    ,\n    to: function to(x, y) {\n      return (this._target || this).type == 'radial' ? this.attr({\n        cx: new SVG.Number(x),\n        cy: new SVG.Number(y)\n      }) : this.attr({\n        x2: new SVG.Number(x),\n        y2: new SVG.Number(y)\n      });\n    }\n  }); // Base gradient generation\n\n  SVG.extend(SVG.Defs, {\n    // define gradient\n    gradient: function gradient(type, block) {\n      return this.put(new SVG.Gradient(type)).update(block);\n    }\n  });\n  SVG.Stop = SVG.invent({\n    // Initialize node\n    create: 'stop' // Inherit from\n    ,\n    inherit: SVG.Element // Add class methods\n    ,\n    extend: {\n      // add color stops\n      update: function update(o) {\n        if (typeof o == 'number' || o instanceof SVG.Number) {\n          o = {\n            offset: arguments[0],\n            color: arguments[1],\n            opacity: arguments[2]\n          };\n        } // set attributes\n\n\n        if (o.opacity != null) this.attr('stop-opacity', o.opacity);\n        if (o.color != null) this.attr('stop-color', o.color);\n        if (o.offset != null) this.attr('offset', new SVG.Number(o.offset));\n        return this;\n      }\n    }\n  });\n  SVG.Pattern = SVG.invent({\n    // Initialize node\n    create: 'pattern' // Inherit from\n    ,\n    inherit: SVG.Container // Add class methods\n    ,\n    extend: {\n      // Return the fill id\n      fill: function fill() {\n        return 'url(#' + this.id() + ')';\n      } // Update pattern by rebuilding\n      ,\n      update: function update(block) {\n        // remove content\n        this.clear(); // invoke passed block\n\n        if (typeof block == 'function') block.call(this, this);\n        return this;\n      } // Alias string convertion to fill\n      ,\n      toString: function toString() {\n        return this.fill();\n      } // custom attr to handle transform\n      ,\n      attr: function attr(a, b, c) {\n        if (a == 'transform') a = 'patternTransform';\n        return SVG.Container.prototype.attr.call(this, a, b, c);\n      }\n    } // Add parent method\n    ,\n    construct: {\n      // Create pattern element in defs\n      pattern: function pattern(width, height, block) {\n        return this.defs().pattern(width, height, block);\n      }\n    }\n  });\n  SVG.extend(SVG.Defs, {\n    // Define gradient\n    pattern: function pattern(width, height, block) {\n      return this.put(new SVG.Pattern()).update(block).attr({\n        x: 0,\n        y: 0,\n        width: width,\n        height: height,\n        patternUnits: 'userSpaceOnUse'\n      });\n    }\n  });\n  SVG.Shape = SVG.invent({\n    // Initialize node\n    create: function create(element) {\n      this.constructor.call(this, element);\n    } // Inherit from\n    ,\n    inherit: SVG.Element\n  });\n  SVG.Bare = SVG.invent({\n    // Initialize\n    create: function create(element, inherit) {\n      // construct element\n      this.constructor.call(this, SVG.create(element)); // inherit custom methods\n\n      if (inherit) for (var method in inherit.prototype) {\n        if (typeof inherit.prototype[method] === 'function') this[method] = inherit.prototype[method];\n      }\n    } // Inherit from\n    ,\n    inherit: SVG.Element // Add methods\n    ,\n    extend: {\n      // Insert some plain text\n      words: function words(text) {\n        // remove contents\n        while (this.node.hasChildNodes()) {\n          this.node.removeChild(this.node.lastChild);\n        } // create text node\n\n\n        this.node.appendChild(document.createTextNode(text));\n        return this;\n      }\n    }\n  });\n  SVG.extend(SVG.Parent, {\n    // Create an element that is not described by SVG.js\n    element: function element(_element, inherit) {\n      return this.put(new SVG.Bare(_element, inherit));\n    }\n  });\n  SVG.Symbol = SVG.invent({\n    // Initialize node\n    create: 'symbol' // Inherit from\n    ,\n    inherit: SVG.Container,\n    construct: {\n      // create symbol\n      symbol: function symbol() {\n        return this.put(new SVG.Symbol());\n      }\n    }\n  });\n  SVG.Use = SVG.invent({\n    // Initialize node\n    create: 'use' // Inherit from\n    ,\n    inherit: SVG.Shape // Add class methods\n    ,\n    extend: {\n      // Use element as a reference\n      element: function element(_element2, file) {\n        // Set lined element\n        return this.attr('href', (file || '') + '#' + _element2, SVG.xlink);\n      }\n    } // Add parent method\n    ,\n    construct: {\n      // Create a use element\n      use: function use(element, file) {\n        return this.put(new SVG.Use()).element(element, file);\n      }\n    }\n  });\n  SVG.Rect = SVG.invent({\n    // Initialize node\n    create: 'rect' // Inherit from\n    ,\n    inherit: SVG.Shape // Add parent method\n    ,\n    construct: {\n      // Create a rect element\n      rect: function rect(width, height) {\n        return this.put(new SVG.Rect()).size(width, height);\n      }\n    }\n  });\n  SVG.Circle = SVG.invent({\n    // Initialize node\n    create: 'circle' // Inherit from\n    ,\n    inherit: SVG.Shape // Add parent method\n    ,\n    construct: {\n      // Create circle element, based on ellipse\n      circle: function circle(size) {\n        return this.put(new SVG.Circle()).rx(new SVG.Number(size).divide(2)).move(0, 0);\n      }\n    }\n  });\n  SVG.extend(SVG.Circle, SVG.FX, {\n    // Radius x value\n    rx: function rx(_rx) {\n      return this.attr('r', _rx);\n    } // Alias radius x value\n    ,\n    ry: function ry(_ry) {\n      return this.rx(_ry);\n    }\n  });\n  SVG.Ellipse = SVG.invent({\n    // Initialize node\n    create: 'ellipse' // Inherit from\n    ,\n    inherit: SVG.Shape // Add parent method\n    ,\n    construct: {\n      // Create an ellipse\n      ellipse: function ellipse(width, height) {\n        return this.put(new SVG.Ellipse()).size(width, height).move(0, 0);\n      }\n    }\n  });\n  SVG.extend(SVG.Ellipse, SVG.Rect, SVG.FX, {\n    // Radius x value\n    rx: function rx(_rx2) {\n      return this.attr('rx', _rx2);\n    } // Radius y value\n    ,\n    ry: function ry(_ry2) {\n      return this.attr('ry', _ry2);\n    }\n  }); // Add common method\n\n  SVG.extend(SVG.Circle, SVG.Ellipse, {\n    // Move over x-axis\n    x: function x(_x4) {\n      return _x4 == null ? this.cx() - this.rx() : this.cx(_x4 + this.rx());\n    } // Move over y-axis\n    ,\n    y: function y(_y4) {\n      return _y4 == null ? this.cy() - this.ry() : this.cy(_y4 + this.ry());\n    } // Move by center over x-axis\n    ,\n    cx: function cx(x) {\n      return x == null ? this.attr('cx') : this.attr('cx', x);\n    } // Move by center over y-axis\n    ,\n    cy: function cy(y) {\n      return y == null ? this.attr('cy') : this.attr('cy', y);\n    } // Set width of element\n    ,\n    width: function width(_width3) {\n      return _width3 == null ? this.rx() * 2 : this.rx(new SVG.Number(_width3).divide(2));\n    } // Set height of element\n    ,\n    height: function height(_height3) {\n      return _height3 == null ? this.ry() * 2 : this.ry(new SVG.Number(_height3).divide(2));\n    } // Custom size function\n    ,\n    size: function size(width, height) {\n      var p = proportionalSize(this, width, height);\n      return this.rx(new SVG.Number(p.width).divide(2)).ry(new SVG.Number(p.height).divide(2));\n    }\n  });\n  SVG.Line = SVG.invent({\n    // Initialize node\n    create: 'line' // Inherit from\n    ,\n    inherit: SVG.Shape // Add class methods\n    ,\n    extend: {\n      // Get array\n      array: function array() {\n        return new SVG.PointArray([[this.attr('x1'), this.attr('y1')], [this.attr('x2'), this.attr('y2')]]);\n      } // Overwrite native plot() method\n      ,\n      plot: function plot(x1, y1, x2, y2) {\n        if (x1 == null) return this.array();else if (typeof y1 !== 'undefined') x1 = {\n          x1: x1,\n          y1: y1,\n          x2: x2,\n          y2: y2\n        };else x1 = new SVG.PointArray(x1).toLine();\n        return this.attr(x1);\n      } // Move by left top corner\n      ,\n      move: function move(x, y) {\n        return this.attr(this.array().move(x, y).toLine());\n      } // Set element size to given width and height\n      ,\n      size: function size(width, height) {\n        var p = proportionalSize(this, width, height);\n        return this.attr(this.array().size(p.width, p.height).toLine());\n      }\n    } // Add parent method\n    ,\n    construct: {\n      // Create a line element\n      line: function line(x1, y1, x2, y2) {\n        // make sure plot is called as a setter\n        // x1 is not necessarily a number, it can also be an array, a string and a SVG.PointArray\n        return SVG.Line.prototype.plot.apply(this.put(new SVG.Line()), x1 != null ? [x1, y1, x2, y2] : [0, 0, 0, 0]);\n      }\n    }\n  });\n  SVG.Polyline = SVG.invent({\n    // Initialize node\n    create: 'polyline' // Inherit from\n    ,\n    inherit: SVG.Shape // Add parent method\n    ,\n    construct: {\n      // Create a wrapped polyline element\n      polyline: function polyline(p) {\n        // make sure plot is called as a setter\n        return this.put(new SVG.Polyline()).plot(p || new SVG.PointArray());\n      }\n    }\n  });\n  SVG.Polygon = SVG.invent({\n    // Initialize node\n    create: 'polygon' // Inherit from\n    ,\n    inherit: SVG.Shape // Add parent method\n    ,\n    construct: {\n      // Create a wrapped polygon element\n      polygon: function polygon(p) {\n        // make sure plot is called as a setter\n        return this.put(new SVG.Polygon()).plot(p || new SVG.PointArray());\n      }\n    }\n  }); // Add polygon-specific functions\n\n  SVG.extend(SVG.Polyline, SVG.Polygon, {\n    // Get array\n    array: function array() {\n      return this._array || (this._array = new SVG.PointArray(this.attr('points')));\n    } // Plot new path\n    ,\n    plot: function plot(p) {\n      return p == null ? this.array() : this.clear().attr('points', typeof p == 'string' ? p : this._array = new SVG.PointArray(p));\n    } // Clear array cache\n    ,\n    clear: function clear() {\n      delete this._array;\n      return this;\n    } // Move by left top corner\n    ,\n    move: function move(x, y) {\n      return this.attr('points', this.array().move(x, y));\n    } // Set element size to given width and height\n    ,\n    size: function size(width, height) {\n      var p = proportionalSize(this, width, height);\n      return this.attr('points', this.array().size(p.width, p.height));\n    }\n  }); // unify all point to point elements\n\n  SVG.extend(SVG.Line, SVG.Polyline, SVG.Polygon, {\n    // Define morphable array\n    morphArray: SVG.PointArray // Move by left top corner over x-axis\n    ,\n    x: function x(_x5) {\n      return _x5 == null ? this.bbox().x : this.move(_x5, this.bbox().y);\n    } // Move by left top corner over y-axis\n    ,\n    y: function y(_y5) {\n      return _y5 == null ? this.bbox().y : this.move(this.bbox().x, _y5);\n    } // Set width of element\n    ,\n    width: function width(_width4) {\n      var b = this.bbox();\n      return _width4 == null ? b.width : this.size(_width4, b.height);\n    } // Set height of element\n    ,\n    height: function height(_height4) {\n      var b = this.bbox();\n      return _height4 == null ? b.height : this.size(b.width, _height4);\n    }\n  });\n  SVG.Path = SVG.invent({\n    // Initialize node\n    create: 'path' // Inherit from\n    ,\n    inherit: SVG.Shape // Add class methods\n    ,\n    extend: {\n      // Define morphable array\n      morphArray: SVG.PathArray // Get array\n      ,\n      array: function array() {\n        return this._array || (this._array = new SVG.PathArray(this.attr('d')));\n      } // Plot new path\n      ,\n      plot: function plot(d) {\n        return d == null ? this.array() : this.clear().attr('d', typeof d == 'string' ? d : this._array = new SVG.PathArray(d));\n      } // Clear array cache\n      ,\n      clear: function clear() {\n        delete this._array;\n        return this;\n      } // Move by left top corner\n      ,\n      move: function move(x, y) {\n        return this.attr('d', this.array().move(x, y));\n      } // Move by left top corner over x-axis\n      ,\n      x: function x(_x6) {\n        return _x6 == null ? this.bbox().x : this.move(_x6, this.bbox().y);\n      } // Move by left top corner over y-axis\n      ,\n      y: function y(_y6) {\n        return _y6 == null ? this.bbox().y : this.move(this.bbox().x, _y6);\n      } // Set element size to given width and height\n      ,\n      size: function size(width, height) {\n        var p = proportionalSize(this, width, height);\n        return this.attr('d', this.array().size(p.width, p.height));\n      } // Set width of element\n      ,\n      width: function width(_width5) {\n        return _width5 == null ? this.bbox().width : this.size(_width5, this.bbox().height);\n      } // Set height of element\n      ,\n      height: function height(_height5) {\n        return _height5 == null ? this.bbox().height : this.size(this.bbox().width, _height5);\n      }\n    } // Add parent method\n    ,\n    construct: {\n      // Create a wrapped path element\n      path: function path(d) {\n        // make sure plot is called as a setter\n        return this.put(new SVG.Path()).plot(d || new SVG.PathArray());\n      }\n    }\n  });\n  SVG.Image = SVG.invent({\n    // Initialize node\n    create: 'image' // Inherit from\n    ,\n    inherit: SVG.Shape // Add class methods\n    ,\n    extend: {\n      // (re)load image\n      load: function load(url) {\n        if (!url) return this;\n        var self = this,\n            img = new window.Image(); // preload image\n\n        SVG.on(img, 'load', function () {\n          SVG.off(img);\n          var p = self.parent(SVG.Pattern);\n          if (p === null) return; // ensure image size\n\n          if (self.width() == 0 && self.height() == 0) self.size(img.width, img.height); // ensure pattern size if not set\n\n          if (p && p.width() == 0 && p.height() == 0) p.size(self.width(), self.height()); // callback\n\n          if (typeof self._loaded === 'function') self._loaded.call(self, {\n            width: img.width,\n            height: img.height,\n            ratio: img.width / img.height,\n            url: url\n          });\n        });\n        SVG.on(img, 'error', function (e) {\n          SVG.off(img);\n\n          if (typeof self._error === 'function') {\n            self._error.call(self, e);\n          }\n        });\n        return this.attr('href', img.src = this.src = url, SVG.xlink);\n      } // Add loaded callback\n      ,\n      loaded: function loaded(_loaded) {\n        this._loaded = _loaded;\n        return this;\n      },\n      error: function error(_error) {\n        this._error = _error;\n        return this;\n      }\n    } // Add parent method\n    ,\n    construct: {\n      // create image element, load image and set its size\n      image: function image(source, width, height) {\n        return this.put(new SVG.Image()).load(source).size(width || 0, height || width || 0);\n      }\n    }\n  });\n  SVG.Text = SVG.invent({\n    // Initialize node\n    create: function create() {\n      this.constructor.call(this, SVG.create('text'));\n      this.dom.leading = new SVG.Number(1.3); // store leading value for rebuilding\n\n      this._rebuild = true; // enable automatic updating of dy values\n\n      this._build = false; // disable build mode for adding multiple lines\n      // set default font\n\n      this.attr('font-family', SVG.defaults.attrs['font-family']);\n    } // Inherit from\n    ,\n    inherit: SVG.Shape // Add class methods\n    ,\n    extend: {\n      // Move over x-axis\n      x: function x(_x7) {\n        // act as getter\n        if (_x7 == null) return this.attr('x');\n        return this.attr('x', _x7);\n      } // Move over y-axis\n      ,\n      y: function y(_y7) {\n        var oy = this.attr('y'),\n            o = typeof oy === 'number' ? oy - this.bbox().y : 0; // act as getter\n\n        if (_y7 == null) return typeof oy === 'number' ? oy - o : oy;\n        return this.attr('y', typeof _y7.valueOf() === 'number' ? _y7 + o : _y7);\n      } // Move center over x-axis\n      ,\n      cx: function cx(x) {\n        return x == null ? this.bbox().cx : this.x(x - this.bbox().width / 2);\n      } // Move center over y-axis\n      ,\n      cy: function cy(y) {\n        return y == null ? this.bbox().cy : this.y(y - this.bbox().height / 2);\n      } // Set the text content\n      ,\n      text: function text(_text) {\n        // act as getter\n        if (typeof _text === 'undefined') {\n          var _text = '';\n          var children = this.node.childNodes;\n\n          for (var i = 0, len = children.length; i < len; ++i) {\n            // add newline if its not the first child and newLined is set to true\n            if (i != 0 && children[i].nodeType != 3 && SVG.adopt(children[i]).dom.newLined == true) {\n              _text += '\\n';\n            } // add content of this node\n\n\n            _text += children[i].textContent;\n          }\n\n          return _text;\n        } // remove existing content\n\n\n        this.clear().build(true);\n\n        if (typeof _text === 'function') {\n          // call block\n          _text.call(this, this);\n        } else {\n          // store text and make sure text is not blank\n          _text = _text.split('\\n'); // build new lines\n\n          for (var i = 0, il = _text.length; i < il; i++) {\n            this.tspan(_text[i]).newLine();\n          }\n        } // disable build mode and rebuild lines\n\n\n        return this.build(false).rebuild();\n      } // Set font size\n      ,\n      size: function size(_size) {\n        return this.attr('font-size', _size).rebuild();\n      } // Set / get leading\n      ,\n      leading: function leading(value) {\n        // act as getter\n        if (value == null) return this.dom.leading; // act as setter\n\n        this.dom.leading = new SVG.Number(value);\n        return this.rebuild();\n      } // Get all the first level lines\n      ,\n      lines: function lines() {\n        var node = (this.textPath && this.textPath() || this).node; // filter tspans and map them to SVG.js instances\n\n        var lines = SVG.utils.map(SVG.utils.filterSVGElements(node.childNodes), function (el) {\n          return SVG.adopt(el);\n        }); // return an instance of SVG.set\n\n        return new SVG.Set(lines);\n      } // Rebuild appearance type\n      ,\n      rebuild: function rebuild(_rebuild) {\n        // store new rebuild flag if given\n        if (typeof _rebuild == 'boolean') this._rebuild = _rebuild; // define position of all lines\n\n        if (this._rebuild) {\n          var self = this,\n              blankLineOffset = 0,\n              dy = this.dom.leading * new SVG.Number(this.attr('font-size'));\n          this.lines().each(function () {\n            if (this.dom.newLined) {\n              if (!self.textPath()) this.attr('x', self.attr('x'));\n\n              if (this.text() == '\\n') {\n                blankLineOffset += dy;\n              } else {\n                this.attr('dy', dy + blankLineOffset);\n                blankLineOffset = 0;\n              }\n            }\n          });\n          this.fire('rebuild');\n        }\n\n        return this;\n      } // Enable / disable build mode\n      ,\n      build: function build(_build) {\n        this._build = !!_build;\n        return this;\n      } // overwrite method from parent to set data properly\n      ,\n      setData: function setData(o) {\n        this.dom = o;\n        this.dom.leading = new SVG.Number(o.leading || 1.3);\n        return this;\n      }\n    } // Add parent method\n    ,\n    construct: {\n      // Create text element\n      text: function text(_text2) {\n        return this.put(new SVG.Text()).text(_text2);\n      } // Create plain text element\n      ,\n      plain: function plain(text) {\n        return this.put(new SVG.Text()).plain(text);\n      }\n    }\n  });\n  SVG.Tspan = SVG.invent({\n    // Initialize node\n    create: 'tspan' // Inherit from\n    ,\n    inherit: SVG.Shape // Add class methods\n    ,\n    extend: {\n      // Set text content\n      text: function text(_text3) {\n        if (_text3 == null) return this.node.textContent + (this.dom.newLined ? '\\n' : '');\n        typeof _text3 === 'function' ? _text3.call(this, this) : this.plain(_text3);\n        return this;\n      } // Shortcut dx\n      ,\n      dx: function dx(_dx) {\n        return this.attr('dx', _dx);\n      } // Shortcut dy\n      ,\n      dy: function dy(_dy) {\n        return this.attr('dy', _dy);\n      } // Create new line\n      ,\n      newLine: function newLine() {\n        // fetch text parent\n        var t = this.parent(SVG.Text); // mark new line\n\n        this.dom.newLined = true; // apply new hy¡n\n\n        return this.dy(t.dom.leading * t.attr('font-size')).attr('x', t.x());\n      }\n    }\n  });\n  SVG.extend(SVG.Text, SVG.Tspan, {\n    // Create plain text node\n    plain: function plain(text) {\n      // clear if build mode is disabled\n      if (this._build === false) this.clear(); // create text node\n\n      this.node.appendChild(document.createTextNode(text));\n      return this;\n    } // Create a tspan\n    ,\n    tspan: function tspan(text) {\n      var node = (this.textPath && this.textPath() || this).node,\n          tspan = new SVG.Tspan(); // clear if build mode is disabled\n\n      if (this._build === false) this.clear(); // add new tspan\n\n      node.appendChild(tspan.node);\n      return tspan.text(text);\n    } // Clear all lines\n    ,\n    clear: function clear() {\n      var node = (this.textPath && this.textPath() || this).node; // remove existing child nodes\n\n      while (node.hasChildNodes()) {\n        node.removeChild(node.lastChild);\n      }\n\n      return this;\n    } // Get length of text element\n    ,\n    length: function length() {\n      return this.node.getComputedTextLength();\n    }\n  });\n  SVG.TextPath = SVG.invent({\n    // Initialize node\n    create: 'textPath' // Inherit from\n    ,\n    inherit: SVG.Parent // Define parent class\n    ,\n    parent: SVG.Text // Add parent method\n    ,\n    construct: {\n      morphArray: SVG.PathArray // Create path for text to run on\n      ,\n      path: function path(d) {\n        // create textPath element\n        var path = new SVG.TextPath(),\n            track = this.doc().defs().path(d); // move lines to textpath\n\n        while (this.node.hasChildNodes()) {\n          path.node.appendChild(this.node.firstChild);\n        } // add textPath element as child node\n\n\n        this.node.appendChild(path.node); // link textPath to path and add content\n\n        path.attr('href', '#' + track, SVG.xlink);\n        return this;\n      } // return the array of the path track element\n      ,\n      array: function array() {\n        var track = this.track();\n        return track ? track.array() : null;\n      } // Plot path if any\n      ,\n      plot: function plot(d) {\n        var track = this.track(),\n            pathArray = null;\n\n        if (track) {\n          pathArray = track.plot(d);\n        }\n\n        return d == null ? pathArray : this;\n      } // Get the path track element\n      ,\n      track: function track() {\n        var path = this.textPath();\n        if (path) return path.reference('href');\n      } // Get the textPath child\n      ,\n      textPath: function textPath() {\n        if (this.node.firstChild && this.node.firstChild.nodeName == 'textPath') return SVG.adopt(this.node.firstChild);\n      }\n    }\n  });\n  SVG.Nested = SVG.invent({\n    // Initialize node\n    create: function create() {\n      this.constructor.call(this, SVG.create('svg'));\n      this.style('overflow', 'visible');\n    } // Inherit from\n    ,\n    inherit: SVG.Container // Add parent method\n    ,\n    construct: {\n      // Create nested svg document\n      nested: function nested() {\n        return this.put(new SVG.Nested());\n      }\n    }\n  });\n  SVG.A = SVG.invent({\n    // Initialize node\n    create: 'a' // Inherit from\n    ,\n    inherit: SVG.Container // Add class methods\n    ,\n    extend: {\n      // Link url\n      to: function to(url) {\n        return this.attr('href', url, SVG.xlink);\n      } // Link show attribute\n      ,\n      show: function show(target) {\n        return this.attr('show', target, SVG.xlink);\n      } // Link target attribute\n      ,\n      target: function target(_target2) {\n        return this.attr('target', _target2);\n      }\n    } // Add parent method\n    ,\n    construct: {\n      // Create a hyperlink element\n      link: function link(url) {\n        return this.put(new SVG.A()).to(url);\n      }\n    }\n  });\n  SVG.extend(SVG.Element, {\n    // Create a hyperlink element\n    linkTo: function linkTo(url) {\n      var link = new SVG.A();\n      if (typeof url == 'function') url.call(link, link);else link.to(url);\n      return this.parent().put(link).put(this);\n    }\n  });\n  SVG.Marker = SVG.invent({\n    // Initialize node\n    create: 'marker' // Inherit from\n    ,\n    inherit: SVG.Container // Add class methods\n    ,\n    extend: {\n      // Set width of element\n      width: function width(_width6) {\n        return this.attr('markerWidth', _width6);\n      } // Set height of element\n      ,\n      height: function height(_height6) {\n        return this.attr('markerHeight', _height6);\n      } // Set marker refX and refY\n      ,\n      ref: function ref(x, y) {\n        return this.attr('refX', x).attr('refY', y);\n      } // Update marker\n      ,\n      update: function update(block) {\n        // remove all content\n        this.clear(); // invoke passed block\n\n        if (typeof block == 'function') block.call(this, this);\n        return this;\n      } // Return the fill id\n      ,\n      toString: function toString() {\n        return 'url(#' + this.id() + ')';\n      }\n    } // Add parent method\n    ,\n    construct: {\n      marker: function marker(width, height, block) {\n        // Create marker element in defs\n        return this.defs().marker(width, height, block);\n      }\n    }\n  });\n  SVG.extend(SVG.Defs, {\n    // Create marker\n    marker: function marker(width, height, block) {\n      // Set default viewbox to match the width and height, set ref to cx and cy and set orient to auto\n      return this.put(new SVG.Marker()).size(width, height).ref(width / 2, height / 2).viewbox(0, 0, width, height).attr('orient', 'auto').update(block);\n    }\n  });\n  SVG.extend(SVG.Line, SVG.Polyline, SVG.Polygon, SVG.Path, {\n    // Create and attach markers\n    marker: function marker(_marker, width, height, block) {\n      var attr = ['marker']; // Build attribute name\n\n      if (_marker != 'all') attr.push(_marker);\n      attr = attr.join('-'); // Set marker attribute\n\n      _marker = arguments[1] instanceof SVG.Marker ? arguments[1] : this.doc().marker(width, height, block);\n      return this.attr(attr, _marker);\n    }\n  }); // Define list of available attributes for stroke and fill\n\n  var sugar = {\n    stroke: ['color', 'width', 'opacity', 'linecap', 'linejoin', 'miterlimit', 'dasharray', 'dashoffset'],\n    fill: ['color', 'opacity', 'rule'],\n    prefix: function prefix(t, a) {\n      return a == 'color' ? t : t + '-' + a;\n    }\n  } // Add sugar for fill and stroke\n  ;\n  ['fill', 'stroke'].forEach(function (m) {\n    var i,\n        extension = {};\n\n    extension[m] = function (o) {\n      if (typeof o == 'undefined') return this;\n      if (typeof o == 'string' || SVG.Color.isRgb(o) || o && typeof o.fill === 'function') this.attr(m, o);else // set all attributes from sugar.fill and sugar.stroke list\n        for (i = sugar[m].length - 1; i >= 0; i--) {\n          if (o[sugar[m][i]] != null) this.attr(sugar.prefix(m, sugar[m][i]), o[sugar[m][i]]);\n        }\n      return this;\n    };\n\n    SVG.extend(SVG.Element, SVG.FX, extension);\n  });\n  SVG.extend(SVG.Element, SVG.FX, {\n    // Map rotation to transform\n    rotate: function rotate(d, cx, cy) {\n      return this.transform({\n        rotation: d,\n        cx: cx,\n        cy: cy\n      });\n    } // Map skew to transform\n    ,\n    skew: function skew(x, y, cx, cy) {\n      return arguments.length == 1 || arguments.length == 3 ? this.transform({\n        skew: x,\n        cx: y,\n        cy: cx\n      }) : this.transform({\n        skewX: x,\n        skewY: y,\n        cx: cx,\n        cy: cy\n      });\n    } // Map scale to transform\n    ,\n    scale: function scale(x, y, cx, cy) {\n      return arguments.length == 1 || arguments.length == 3 ? this.transform({\n        scale: x,\n        cx: y,\n        cy: cx\n      }) : this.transform({\n        scaleX: x,\n        scaleY: y,\n        cx: cx,\n        cy: cy\n      });\n    } // Map translate to transform\n    ,\n    translate: function translate(x, y) {\n      return this.transform({\n        x: x,\n        y: y\n      });\n    } // Map flip to transform\n    ,\n    flip: function flip(a, o) {\n      o = typeof a == 'number' ? a : o;\n      return this.transform({\n        flip: a || 'both',\n        offset: o\n      });\n    } // Map matrix to transform\n    ,\n    matrix: function matrix(m) {\n      return this.attr('transform', new SVG.Matrix(arguments.length == 6 ? [].slice.call(arguments) : m));\n    } // Opacity\n    ,\n    opacity: function opacity(value) {\n      return this.attr('opacity', value);\n    } // Relative move over x axis\n    ,\n    dx: function dx(x) {\n      return this.x(new SVG.Number(x).plus(this instanceof SVG.FX ? 0 : this.x()), true);\n    } // Relative move over y axis\n    ,\n    dy: function dy(y) {\n      return this.y(new SVG.Number(y).plus(this instanceof SVG.FX ? 0 : this.y()), true);\n    } // Relative move over x and y axes\n    ,\n    dmove: function dmove(x, y) {\n      return this.dx(x).dy(y);\n    }\n  });\n  SVG.extend(SVG.Rect, SVG.Ellipse, SVG.Circle, SVG.Gradient, SVG.FX, {\n    // Add x and y radius\n    radius: function radius(x, y) {\n      var type = (this._target || this).type;\n      return type == 'radial' || type == 'circle' ? this.attr('r', new SVG.Number(x)) : this.rx(x).ry(y == null ? x : y);\n    }\n  });\n  SVG.extend(SVG.Path, {\n    // Get path length\n    length: function length() {\n      return this.node.getTotalLength();\n    } // Get point at length\n    ,\n    pointAt: function pointAt(length) {\n      return this.node.getPointAtLength(length);\n    }\n  });\n  SVG.extend(SVG.Parent, SVG.Text, SVG.Tspan, SVG.FX, {\n    // Set font\n    font: function font(a, v) {\n      if (_typeof(a) == 'object') {\n        for (v in a) {\n          this.font(v, a[v]);\n        }\n      }\n\n      return a == 'leading' ? this.leading(v) : a == 'anchor' ? this.attr('text-anchor', v) : a == 'size' || a == 'family' || a == 'weight' || a == 'stretch' || a == 'variant' || a == 'style' ? this.attr('font-' + a, v) : this.attr(a, v);\n    }\n  });\n  SVG.Set = SVG.invent({\n    // Initialize\n    create: function create(members) {\n      if (members instanceof SVG.Set) {\n        this.members = members.members.slice();\n      } else {\n        Array.isArray(members) ? this.members = members : this.clear();\n      }\n    } // Add class methods\n    ,\n    extend: {\n      // Add element to set\n      add: function add() {\n        var i,\n            il,\n            elements = [].slice.call(arguments);\n\n        for (i = 0, il = elements.length; i < il; i++) {\n          this.members.push(elements[i]);\n        }\n\n        return this;\n      } // Remove element from set\n      ,\n      remove: function remove(element) {\n        var i = this.index(element); // remove given child\n\n        if (i > -1) this.members.splice(i, 1);\n        return this;\n      } // Iterate over all members\n      ,\n      each: function each(block) {\n        for (var i = 0, il = this.members.length; i < il; i++) {\n          block.apply(this.members[i], [i, this.members]);\n        }\n\n        return this;\n      } // Restore to defaults\n      ,\n      clear: function clear() {\n        // initialize store\n        this.members = [];\n        return this;\n      } // Get the length of a set\n      ,\n      length: function length() {\n        return this.members.length;\n      } // Checks if a given element is present in set\n      ,\n      has: function has(element) {\n        return this.index(element) >= 0;\n      } // retuns index of given element in set\n      ,\n      index: function index(element) {\n        return this.members.indexOf(element);\n      } // Get member at given index\n      ,\n      get: function get(i) {\n        return this.members[i];\n      } // Get first member\n      ,\n      first: function first() {\n        return this.get(0);\n      } // Get last member\n      ,\n      last: function last() {\n        return this.get(this.members.length - 1);\n      } // Default value\n      ,\n      valueOf: function valueOf() {\n        return this.members;\n      } // Get the bounding box of all members included or empty box if set has no items\n      ,\n      bbox: function bbox() {\n        // return an empty box of there are no members\n        if (this.members.length == 0) return new SVG.RBox(); // get the first rbox and update the target bbox\n\n        var rbox = this.members[0].rbox(this.members[0].doc());\n        this.each(function () {\n          // user rbox for correct position and visual representation\n          rbox = rbox.merge(this.rbox(this.doc()));\n        });\n        return rbox;\n      }\n    } // Add parent method\n    ,\n    construct: {\n      // Create a new set\n      set: function set(members) {\n        return new SVG.Set(members);\n      }\n    }\n  });\n  SVG.FX.Set = SVG.invent({\n    // Initialize node\n    create: function create(set) {\n      // store reference to set\n      this.set = set;\n    }\n  }); // Alias methods\n\n  SVG.Set.inherit = function () {\n    var m,\n        methods = []; // gather shape methods\n\n    for (var m in SVG.Shape.prototype) {\n      if (typeof SVG.Shape.prototype[m] == 'function' && typeof SVG.Set.prototype[m] != 'function') methods.push(m);\n    } // apply shape aliasses\n\n\n    methods.forEach(function (method) {\n      SVG.Set.prototype[method] = function () {\n        for (var i = 0, il = this.members.length; i < il; i++) {\n          if (this.members[i] && typeof this.members[i][method] == 'function') this.members[i][method].apply(this.members[i], arguments);\n        }\n\n        return method == 'animate' ? this.fx || (this.fx = new SVG.FX.Set(this)) : this;\n      };\n    }); // clear methods for the next round\n\n    methods = []; // gather fx methods\n\n    for (var m in SVG.FX.prototype) {\n      if (typeof SVG.FX.prototype[m] == 'function' && typeof SVG.FX.Set.prototype[m] != 'function') methods.push(m);\n    } // apply fx aliasses\n\n\n    methods.forEach(function (method) {\n      SVG.FX.Set.prototype[method] = function () {\n        for (var i = 0, il = this.set.members.length; i < il; i++) {\n          this.set.members[i].fx[method].apply(this.set.members[i].fx, arguments);\n        }\n\n        return this;\n      };\n    });\n  };\n\n  SVG.extend(SVG.Element, {\n    // Store data values on svg nodes\n    data: function data(a, v, r) {\n      if (_typeof(a) == 'object') {\n        for (v in a) {\n          this.data(v, a[v]);\n        }\n      } else if (arguments.length < 2) {\n        try {\n          return JSON.parse(this.attr('data-' + a));\n        } catch (e) {\n          return this.attr('data-' + a);\n        }\n      } else {\n        this.attr('data-' + a, v === null ? null : r === true || typeof v === 'string' || typeof v === 'number' ? v : JSON.stringify(v));\n      }\n\n      return this;\n    }\n  });\n  SVG.extend(SVG.Element, {\n    // Remember arbitrary data\n    remember: function remember(k, v) {\n      // remember every item in an object individually\n      if (_typeof(arguments[0]) == 'object') for (var v in k) {\n        this.remember(v, k[v]);\n      } // retrieve memory\n      else if (arguments.length == 1) return this.memory()[k]; // store memory\n        else this.memory()[k] = v;\n      return this;\n    } // Erase a given memory\n    ,\n    forget: function forget() {\n      if (arguments.length == 0) this._memory = {};else for (var i = arguments.length - 1; i >= 0; i--) {\n        delete this.memory()[arguments[i]];\n      }\n      return this;\n    } // Initialize or return local memory object\n    ,\n    memory: function memory() {\n      return this._memory || (this._memory = {});\n    }\n  }); // Method for getting an element by id\n\n  SVG.get = function (id) {\n    var node = document.getElementById(idFromReference(id) || id);\n    return SVG.adopt(node);\n  }; // Select elements by query string\n\n\n  SVG.select = function (query, parent) {\n    return new SVG.Set(SVG.utils.map((parent || document).querySelectorAll(query), function (node) {\n      return SVG.adopt(node);\n    }));\n  };\n\n  SVG.extend(SVG.Parent, {\n    // Scoped select method\n    select: function select(query) {\n      return SVG.select(query, this.node);\n    }\n  });\n\n  function pathRegReplace(a, b, c, d) {\n    return c + d.replace(SVG.regex.dots, ' .');\n  } // creates deep clone of array\n\n\n  function array_clone(arr) {\n    var clone = arr.slice(0);\n\n    for (var i = clone.length; i--;) {\n      if (Array.isArray(clone[i])) {\n        clone[i] = array_clone(clone[i]);\n      }\n    }\n\n    return clone;\n  } // tests if a given element is instance of an object\n\n\n  function _is(el, obj) {\n    return el instanceof obj;\n  } // tests if a given selector matches an element\n\n\n  function _matches(el, selector) {\n    return (el.matches || el.matchesSelector || el.msMatchesSelector || el.mozMatchesSelector || el.webkitMatchesSelector || el.oMatchesSelector).call(el, selector);\n  } // Convert dash-separated-string to camelCase\n\n\n  function camelCase(s) {\n    return s.toLowerCase().replace(/-(.)/g, function (m, g) {\n      return g.toUpperCase();\n    });\n  } // Capitalize first letter of a string\n\n\n  function capitalize(s) {\n    return s.charAt(0).toUpperCase() + s.slice(1);\n  } // Ensure to six-based hex\n\n\n  function fullHex(hex) {\n    return hex.length == 4 ? ['#', hex.substring(1, 2), hex.substring(1, 2), hex.substring(2, 3), hex.substring(2, 3), hex.substring(3, 4), hex.substring(3, 4)].join('') : hex;\n  } // Component to hex value\n\n\n  function compToHex(comp) {\n    var hex = comp.toString(16);\n    return hex.length == 1 ? '0' + hex : hex;\n  } // Calculate proportional width and height values when necessary\n\n\n  function proportionalSize(element, width, height) {\n    if (width == null || height == null) {\n      var box = element.bbox();\n      if (width == null) width = box.width / box.height * height;else if (height == null) height = box.height / box.width * width;\n    }\n\n    return {\n      width: width,\n      height: height\n    };\n  } // Delta transform point\n\n\n  function deltaTransformPoint(matrix, x, y) {\n    return {\n      x: x * matrix.a + y * matrix.c + 0,\n      y: x * matrix.b + y * matrix.d + 0\n    };\n  } // Map matrix array to object\n\n\n  function arrayToMatrix(a) {\n    return {\n      a: a[0],\n      b: a[1],\n      c: a[2],\n      d: a[3],\n      e: a[4],\n      f: a[5]\n    };\n  } // Parse matrix if required\n\n\n  function parseMatrix(matrix) {\n    if (!(matrix instanceof SVG.Matrix)) matrix = new SVG.Matrix(matrix);\n    return matrix;\n  } // Add centre point to transform object\n\n\n  function ensureCentre(o, target) {\n    o.cx = o.cx == null ? target.bbox().cx : o.cx;\n    o.cy = o.cy == null ? target.bbox().cy : o.cy;\n  } // PathArray Helpers\n\n\n  function arrayToString(a) {\n    for (var i = 0, il = a.length, s = ''; i < il; i++) {\n      s += a[i][0];\n\n      if (a[i][1] != null) {\n        s += a[i][1];\n\n        if (a[i][2] != null) {\n          s += ' ';\n          s += a[i][2];\n\n          if (a[i][3] != null) {\n            s += ' ';\n            s += a[i][3];\n            s += ' ';\n            s += a[i][4];\n\n            if (a[i][5] != null) {\n              s += ' ';\n              s += a[i][5];\n              s += ' ';\n              s += a[i][6];\n\n              if (a[i][7] != null) {\n                s += ' ';\n                s += a[i][7];\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s + ' ';\n  } // Deep new id assignment\n\n\n  function assignNewId(node) {\n    // do the same for SVG child nodes as well\n    for (var i = node.childNodes.length - 1; i >= 0; i--) {\n      if (node.childNodes[i] instanceof window.SVGElement) assignNewId(node.childNodes[i]);\n    }\n\n    return SVG.adopt(node).id(SVG.eid(node.nodeName));\n  } // Add more bounding box properties\n\n\n  function fullBox(b) {\n    if (b.x == null) {\n      b.x = 0;\n      b.y = 0;\n      b.width = 0;\n      b.height = 0;\n    }\n\n    b.w = b.width;\n    b.h = b.height;\n    b.x2 = b.x + b.width;\n    b.y2 = b.y + b.height;\n    b.cx = b.x + b.width / 2;\n    b.cy = b.y + b.height / 2;\n    return b;\n  } // Get id from reference string\n\n\n  function idFromReference(url) {\n    var m = (url || '').toString().match(SVG.regex.reference);\n    if (m) return m[1];\n  } // If values like 1e-88 are passed, this is not a valid 32 bit float,\n  // but in those cases, we are so close to 0 that 0 works well!\n\n\n  function float32String(v) {\n    return Math.abs(v) > 1e-37 ? v : 0;\n  } // Create matrix array for looping\n\n\n  var abcdef = 'abcdef'.split(''); // Add CustomEvent to IE9 and IE10\n\n  if (typeof window.CustomEvent !== 'function') {\n    // Code from: https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent\n    var CustomEventPoly = function CustomEventPoly(event, options) {\n      options = options || {\n        bubbles: false,\n        cancelable: false,\n        detail: undefined\n      };\n      var e = document.createEvent('CustomEvent');\n      e.initCustomEvent(event, options.bubbles, options.cancelable, options.detail);\n      return e;\n    };\n\n    CustomEventPoly.prototype = window.Event.prototype;\n    SVG.CustomEvent = CustomEventPoly;\n  } else {\n    SVG.CustomEvent = window.CustomEvent;\n  } // requestAnimationFrame / cancelAnimationFrame Polyfill with fallback based on Paul Irish\n\n\n  (function (w) {\n    var lastTime = 0;\n    var vendors = ['moz', 'webkit'];\n\n    for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n      w.requestAnimationFrame = w[vendors[x] + 'RequestAnimationFrame'];\n      w.cancelAnimationFrame = w[vendors[x] + 'CancelAnimationFrame'] || w[vendors[x] + 'CancelRequestAnimationFrame'];\n    }\n\n    w.requestAnimationFrame = w.requestAnimationFrame || function (callback) {\n      var currTime = new Date().getTime();\n      var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n      var id = w.setTimeout(function () {\n        callback(currTime + timeToCall);\n      }, timeToCall);\n      lastTime = currTime + timeToCall;\n      return id;\n    };\n\n    w.cancelAnimationFrame = w.cancelAnimationFrame || w.clearTimeout;\n  })(window);\n\n  return SVG;\n});\n\n//# sourceURL=webpack:///./js/vendor/svg.js?")},"./js/vendor/svg.resize.js":function(module,exports){eval("/*!\n* svg.resize.js - An extension for svg.js which allows to resize elements which are selected\n* @version 1.4.3\n* https://github.com/svgdotjs/svg.resize.js\n*\n* @copyright [object Object]\n* @license MIT\n*/\n;\n;\n\n(function () {\n  \"use strict\";\n\n  ;\n  (function () {\n    function ResizeHandler(el) {\n      el.remember('_resizeHandler', this);\n      this.el = el;\n      this.parameters = {};\n      this.lastUpdateCall = null;\n      this.p = el.doc().node.createSVGPoint();\n    }\n\n    ResizeHandler.prototype.transformPoint = function (x, y, m) {\n      this.p.x = x - (this.offset.x - window.pageXOffset);\n      this.p.y = y - (this.offset.y - window.pageYOffset);\n      return this.p.matrixTransform(m || this.m);\n    };\n\n    ResizeHandler.prototype._extractPosition = function (event) {\n      // Extract a position from a mouse/touch event.\n      // Returns { x: .., y: .. }\n      return {\n        x: event.clientX != null ? event.clientX : event.touches[0].clientX,\n        y: event.clientY != null ? event.clientY : event.touches[0].clientY\n      };\n    };\n\n    ResizeHandler.prototype.init = function (options) {\n      var _this = this;\n\n      this.stop();\n\n      if (options === 'stop') {\n        return;\n      }\n\n      this.options = {}; // Merge options and defaults\n\n      for (var i in this.el.resize.defaults) {\n        this.options[i] = this.el.resize.defaults[i];\n\n        if (typeof options[i] !== 'undefined') {\n          this.options[i] = options[i];\n        }\n      } // We listen to all these events which are specifying different edges\n\n\n      this.el.on('lt.resize', function (e) {\n        _this.resize(e || window.event);\n      }); // Left-Top\n\n      this.el.on('rt.resize', function (e) {\n        _this.resize(e || window.event);\n      }); // Right-Top\n\n      this.el.on('rb.resize', function (e) {\n        _this.resize(e || window.event);\n      }); // Right-Bottom\n\n      this.el.on('lb.resize', function (e) {\n        _this.resize(e || window.event);\n      }); // Left-Bottom\n\n      this.el.on('t.resize', function (e) {\n        _this.resize(e || window.event);\n      }); // Top\n\n      this.el.on('r.resize', function (e) {\n        _this.resize(e || window.event);\n      }); // Right\n\n      this.el.on('b.resize', function (e) {\n        _this.resize(e || window.event);\n      }); // Bottom\n\n      this.el.on('l.resize', function (e) {\n        _this.resize(e || window.event);\n      }); // Left\n\n      this.el.on('rot.resize', function (e) {\n        _this.resize(e || window.event);\n      }); // Rotation\n\n      this.el.on('point.resize', function (e) {\n        _this.resize(e || window.event);\n      }); // Point-Moving\n      // This call ensures, that the plugin reacts to a change of snapToGrid immediately\n\n      this.update();\n    };\n\n    ResizeHandler.prototype.stop = function () {\n      this.el.off('lt.resize');\n      this.el.off('rt.resize');\n      this.el.off('rb.resize');\n      this.el.off('lb.resize');\n      this.el.off('t.resize');\n      this.el.off('r.resize');\n      this.el.off('b.resize');\n      this.el.off('l.resize');\n      this.el.off('rot.resize');\n      this.el.off('point.resize');\n      return this;\n    };\n\n    ResizeHandler.prototype.resize = function (event) {\n      var _this = this;\n\n      this.m = this.el.node.getScreenCTM().inverse();\n      this.offset = {\n        x: window.pageXOffset,\n        y: window.pageYOffset\n      };\n\n      var txPt = this._extractPosition(event.detail.event);\n\n      this.parameters = {\n        type: this.el.type,\n        // the type of element\n        p: this.transformPoint(txPt.x, txPt.y),\n        x: event.detail.x,\n        // x-position of the mouse when resizing started\n        y: event.detail.y,\n        // y-position of the mouse when resizing started\n        box: this.el.bbox(),\n        // The bounding-box of the element\n        rotation: this.el.transform().rotation // The current rotation of the element\n\n      };\n      this.resizeLimits = this.options.resizeLimits || this.resize.defaults.resizeLimits; // Add font-size parameter if the element type is text\n\n      if (this.el.type === \"text\") {\n        this.parameters.fontSize = this.el.attr()[\"font-size\"];\n      } // the i-param in the event holds the index of the point which is moved, when using `deepSelect`\n\n\n      if (event.detail.i !== undefined) {\n        // get the point array\n        var array = this.el.array().valueOf(); // Save the index and the point which is moved\n\n        this.parameters.i = event.detail.i;\n        this.parameters.pointCoords = [array[event.detail.i][0], array[event.detail.i][1]];\n      }\n\n      this._resizeLeft = function (snap, resizeFont, checkAspectRatio, checkAspectRatioReverse, updateOnlyChanges) {\n        if (this.parameters.box.width - snap[0] >= this.resizeLimits.width) {\n          if (checkAspectRatio) {\n            snap = this.checkAspectRatio(snap, checkAspectRatioReverse);\n          }\n\n          if (this.parameters.type === \"text\") {\n            if (resizeFont) {\n              this.el.move(this.parameters.box.x + snap[0], this.parameters.box.y);\n              this.el.attr(\"font-size\", this.parameters.fontSize - snap[0]);\n            }\n\n            return;\n          }\n\n          this.el.width(this.parameters.box.width - snap[0]);\n\n          if (updateOnlyChanges) {\n            this.el.x(this.parameters.box.x + snap[0]);\n          } else {\n            this.el.move(this.parameters.box.x + snap[0], this.parameters.box.y);\n          }\n        }\n      };\n\n      this._resizeRight = function (snap, resizeFont, checkAspectRatio, checkAspectRatioReverse) {\n        if (this.parameters.box.width + snap[0] >= this.resizeLimits.width) {\n          if (checkAspectRatio) {\n            snap = this.checkAspectRatio(snap, checkAspectRatioReverse);\n          }\n\n          if (this.parameters.type === \"text\") {\n            if (resizeFont) {\n              this.el.move(this.parameters.box.x - snap[0], this.parameters.box.y);\n              this.el.attr(\"font-size\", this.parameters.fontSize + snap[0]);\n            }\n\n            return;\n          }\n\n          this.el.x(this.parameters.box.x).width(this.parameters.box.width + snap[0]);\n        }\n      };\n\n      this._resizeTop = function (snap, checkAspectRatio, checkAspectRatioReverse, updateOnlyChanges) {\n        if (this.parameters.box.height - snap[1] >= this.resizeLimits.height) {\n          if (checkAspectRatio) {\n            snap = this.checkAspectRatio(snap, checkAspectRatioReverse);\n          } // Disable the font-resizing if it is not from the corner of bounding-box\n\n\n          if (this.parameters.type === \"text\") {\n            return;\n          }\n\n          this.el.height(this.parameters.box.height - snap[1]);\n\n          if (updateOnlyChanges) {\n            this.el.y(this.parameters.box.y + snap[1]);\n          } else {\n            this.el.move(this.parameters.box.x, this.parameters.box.y + snap[1]);\n          }\n        }\n      };\n\n      this._resizeBottom = function (snap, checkAspectRatio, checkAspectRatioReverse) {\n        if (this.parameters.box.height + snap[1] >= this.resizeLimits.height) {\n          if (checkAspectRatio) {\n            snap = this.checkAspectRatio(snap, checkAspectRatioReverse);\n          }\n\n          if (this.parameters.type === \"text\") {\n            return;\n          }\n\n          this.el.y(this.parameters.box.y).height(this.parameters.box.height + snap[1]);\n        }\n      }; // Lets check which edge of the bounding-box was clicked and resize the this.el according to this\n\n\n      switch (event.type) {\n        // Left-Top-Edge\n        case 'lt':\n          // We build a calculating function for every case which gives us the new position of the this.el\n          this.calc = function (diffX, diffY) {\n            // The procedure is always the same\n            // First we snap the edge to the given grid (snapping to 1px grid is normal resizing)\n            var snap = this.snapToGrid(diffX, diffY);\n\n            this._resizeTop(snap, true, false, true);\n\n            this._resizeLeft(snap, true, true, false, true);\n          };\n\n          break;\n        // Right-Top\n\n        case 'rt':\n          // s.a.\n          this.calc = function (diffX, diffY) {\n            var snap = this.snapToGrid(diffX, diffY, 1 << 1);\n\n            this._resizeTop(snap, true, true, true);\n\n            this._resizeRight(snap, true, true, true);\n          };\n\n          break;\n        // Right-Bottom\n\n        case 'rb':\n          // s.a.\n          this.calc = function (diffX, diffY) {\n            var snap = this.snapToGrid(diffX, diffY, 0);\n\n            this._resizeBottom(snap, true);\n\n            this._resizeRight(snap, true, true);\n          };\n\n          break;\n        // Left-Bottom\n\n        case 'lb':\n          // s.a.\n          this.calc = function (diffX, diffY) {\n            var snap = this.snapToGrid(diffX, diffY, 1);\n\n            this._resizeBottom(snap, true, true);\n\n            this._resizeLeft(snap, true, true, true, true);\n          };\n\n          break;\n        // Top\n\n        case 't':\n          // s.a.\n          this.calc = function (diffX, diffY) {\n            var snap = this.snapToGrid(diffX, diffY, 1 << 1);\n\n            this._resizeTop(snap);\n          };\n\n          break;\n        // Right\n\n        case 'r':\n          // s.a.\n          this.calc = function (diffX, diffY) {\n            var snap = this.snapToGrid(diffX, diffY, 0);\n\n            this._resizeRight(snap);\n          };\n\n          break;\n        // Bottom\n\n        case 'b':\n          // s.a.\n          this.calc = function (diffX, diffY) {\n            var snap = this.snapToGrid(diffX, diffY, 0);\n\n            this._resizeBottom(snap);\n          };\n\n          break;\n        // Left\n\n        case 'l':\n          // s.a.\n          this.calc = function (diffX, diffY) {\n            var snap = this.snapToGrid(diffX, diffY, 1);\n\n            this._resizeLeft(snap);\n          };\n\n          break;\n        // Rotation\n\n        case 'rot':\n          // s.a.\n          this.calc = function (diffX, diffY) {\n            // yes this is kinda stupid but we need the mouse coords back...\n            var current = {\n              x: diffX + this.parameters.p.x,\n              y: diffY + this.parameters.p.y\n            }; // start minus middle\n\n            var sAngle = Math.atan2(this.parameters.p.y - this.parameters.box.y - this.parameters.box.height / 2, this.parameters.p.x - this.parameters.box.x - this.parameters.box.width / 2); // end minus middle\n\n            var pAngle = Math.atan2(current.y - this.parameters.box.y - this.parameters.box.height / 2, current.x - this.parameters.box.x - this.parameters.box.width / 2);\n            var angle = this.parameters.rotation + (pAngle - sAngle) * 180 / Math.PI + this.options.snapToAngle / 2; // We have to move the element to the center of the box first and change the rotation afterwards\n            // because rotation always works around a rotation-center, which is changed when moving the element\n            // We also set the new rotation center to the center of the box.\n\n            this.el.center(this.parameters.box.cx, this.parameters.box.cy).rotate(angle - angle % this.options.snapToAngle, this.parameters.box.cx, this.parameters.box.cy);\n          };\n\n          break;\n        // Moving one single Point (needed when an element is deepSelected which means you can move every single point of the object)\n\n        case 'point':\n          this.calc = function (diffX, diffY) {\n            // Snapping the point to the grid\n            var snap = this.snapToGrid(diffX, diffY, this.parameters.pointCoords[0], this.parameters.pointCoords[1]); // Get the point array\n\n            var array = this.el.array().valueOf(); // Changing the moved point in the array\n\n            array[this.parameters.i][0] = this.parameters.pointCoords[0] + snap[0];\n            array[this.parameters.i][1] = this.parameters.pointCoords[1] + snap[1]; // And plot the new this.el\n\n            this.el.plot(array);\n          };\n\n      }\n\n      this.el.fire('resizestart', {\n        dx: this.parameters.x,\n        dy: this.parameters.y,\n        event: event\n      }); // When resizing started, we have to register events for...\n      // Touches.\n\n      SVG.on(window, 'touchmove.resize', function (e) {\n        _this.update(e || window.event);\n      });\n      SVG.on(window, 'touchend.resize', function () {\n        _this.done();\n      }); // Mouse.\n\n      SVG.on(window, 'mousemove.resize', function (e) {\n        _this.update(e || window.event);\n      });\n      SVG.on(window, 'mouseup.resize', function () {\n        _this.done();\n      });\n    }; // The update-function redraws the element every time the mouse is moving\n\n\n    ResizeHandler.prototype.update = function (event) {\n      if (!event) {\n        if (this.lastUpdateCall) {\n          this.calc(this.lastUpdateCall[0], this.lastUpdateCall[1]);\n        }\n\n        return;\n      } // Calculate the difference between the mouseposition at start and now\n\n\n      var txPt = this._extractPosition(event);\n\n      var p = this.transformPoint(txPt.x, txPt.y);\n      var diffX = p.x - this.parameters.p.x,\n          diffY = p.y - this.parameters.p.y;\n      this.lastUpdateCall = [diffX, diffY]; // Calculate the new position and height / width of the element\n\n      this.calc(diffX, diffY); // Emit an event to say we have changed.\n\n      this.el.fire('resizing', {\n        dx: diffX,\n        dy: diffY,\n        event: event\n      });\n    }; // Is called on mouseup.\n    // Removes the update-function from the mousemove event\n\n\n    ResizeHandler.prototype.done = function () {\n      this.lastUpdateCall = null;\n      SVG.off(window, 'mousemove.resize');\n      SVG.off(window, 'mouseup.resize');\n      SVG.off(window, 'touchmove.resize');\n      SVG.off(window, 'touchend.resize');\n      this.el.fire('resizedone');\n    }; // The flag is used to determine whether the resizing is used with a left-Point (first bit) and top-point (second bit)\n    // In this cases the temp-values are calculated differently\n\n\n    ResizeHandler.prototype.snapToGrid = function (diffX, diffY, flag, pointCoordsY) {\n      var temp; // If `pointCoordsY` is given, a single Point has to be snapped (deepSelect). That's why we need a different temp-value\n\n      if (typeof pointCoordsY !== 'undefined') {\n        // Note that flag = pointCoordsX in this case\n        temp = [(flag + diffX) % this.options.snapToGrid, (pointCoordsY + diffY) % this.options.snapToGrid];\n      } else {\n        // We check if the flag is set and if not we set a default-value (both bits set - which means upper-left-edge)\n        flag = flag == null ? 1 | 1 << 1 : flag;\n        temp = [(this.parameters.box.x + diffX + (flag & 1 ? 0 : this.parameters.box.width)) % this.options.snapToGrid, (this.parameters.box.y + diffY + (flag & 1 << 1 ? 0 : this.parameters.box.height)) % this.options.snapToGrid];\n      }\n\n      if (diffX < 0) {\n        temp[0] -= this.options.snapToGrid;\n      }\n\n      if (diffY < 0) {\n        temp[1] -= this.options.snapToGrid;\n      }\n\n      diffX -= Math.abs(temp[0]) < this.options.snapToGrid / 2 ? temp[0] : temp[0] - (diffX < 0 ? -this.options.snapToGrid : this.options.snapToGrid);\n      diffY -= Math.abs(temp[1]) < this.options.snapToGrid / 2 ? temp[1] : temp[1] - (diffY < 0 ? -this.options.snapToGrid : this.options.snapToGrid);\n      return this.constraintToBox(diffX, diffY, flag, pointCoordsY);\n    }; // keep element within constrained box\n\n\n    ResizeHandler.prototype.constraintToBox = function (diffX, diffY, flag, pointCoordsY) {\n      //return [diffX, diffY]\n      var c = this.options.constraint || {};\n      var orgX, orgY;\n\n      if (typeof pointCoordsY !== 'undefined') {\n        orgX = flag;\n        orgY = pointCoordsY;\n      } else {\n        orgX = this.parameters.box.x + (flag & 1 ? 0 : this.parameters.box.width);\n        orgY = this.parameters.box.y + (flag & 1 << 1 ? 0 : this.parameters.box.height);\n      }\n\n      if (typeof c.minX !== 'undefined' && orgX + diffX < c.minX) {\n        diffX = c.minX - orgX;\n      }\n\n      if (typeof c.maxX !== 'undefined' && orgX + diffX > c.maxX) {\n        diffX = c.maxX - orgX;\n      }\n\n      if (typeof c.minY !== 'undefined' && orgY + diffY < c.minY) {\n        diffY = c.minY - orgY;\n      }\n\n      if (typeof c.maxY !== 'undefined' && orgY + diffY > c.maxY) {\n        diffY = c.maxY - orgY;\n      }\n\n      return [diffX, diffY];\n    };\n\n    ResizeHandler.prototype.checkAspectRatio = function (snap, isReverse) {\n      if (!this.options.saveAspectRatio) {\n        return snap;\n      }\n\n      var updatedSnap = snap.slice();\n      var aspectRatio = this.parameters.box.width / this.parameters.box.height;\n      var newW = this.parameters.box.width + snap[0];\n      var newH = this.parameters.box.height - snap[1];\n      var newAspectRatio = newW / newH;\n\n      if (newAspectRatio < aspectRatio) {\n        // Height is too big. Adapt it\n        updatedSnap[1] = newW / aspectRatio - this.parameters.box.height;\n        isReverse && (updatedSnap[1] = -updatedSnap[1]);\n      } else if (newAspectRatio > aspectRatio) {\n        // Width is too big. Adapt it\n        updatedSnap[0] = this.parameters.box.width - newH * aspectRatio;\n        isReverse && (updatedSnap[0] = -updatedSnap[0]);\n      }\n\n      return updatedSnap;\n    };\n\n    SVG.extend(SVG.Element, {\n      // Resize element with mouse\n      resize: function resize(options) {\n        (this.remember('_resizeHandler') || new ResizeHandler(this)).init(options || {});\n        return this;\n      }\n    });\n    SVG.Element.prototype.resize.defaults = {\n      snapToAngle: 0.1,\n      // Specifies the speed the rotation is happening when moving the mouse\n      snapToGrid: 1,\n      // Snaps to a grid of `snapToGrid` Pixels\n      constraint: {},\n      // keep element within constrained box\n      resizeLimits: {\n        width: 0,\n        height: 0\n      },\n      // rect limit size on resize\n      saveAspectRatio: false // Save aspect ratio when resizing using lt, rt, rb or lb points\n\n    };\n  }).call(this);\n})();\n\n//# sourceURL=webpack:///./js/vendor/svg.resize.js?")},"./js/vendor/svg.select.js":function(module,exports){eval("function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*!\n* svg.select.js - An extension of svg.js which allows to select elements with mouse\n* @version 3.0.1\n* https://github.com/svgdotjs/svg.select.js\n*\n* @copyright Ulrich-Matthias Schäfer\n* @license MIT\n*/\n;\n;\n\n(function () {\n  \"use strict\";\n\n  function SelectHandler(el) {\n    this.el = el;\n    el.remember('_selectHandler', this);\n    this.pointSelection = {\n      isSelected: false\n    };\n    this.rectSelection = {\n      isSelected: false\n    }; // helper list with position settings of each type of point\n\n    this.pointsList = {\n      lt: [0, 0],\n      rt: ['width', 0],\n      rb: ['width', 'height'],\n      lb: [0, 'height'],\n      t: ['width', 0],\n      r: ['width', 'height'],\n      b: ['width', 'height'],\n      l: [0, 'height']\n    }; // helper function to get point coordinates based on settings above and an object (bbox in our case)\n\n    this.pointCoord = function (setting, object, isPointCentered) {\n      var coord = typeof setting !== 'string' ? setting : object[setting]; // Top, bottom, right and left points are placed in the center of element width/height\n\n      return isPointCentered ? coord / 2 : coord;\n    };\n\n    this.pointCoords = function (point, object) {\n      var settings = this.pointsList[point];\n      return {\n        x: this.pointCoord(settings[0], object, point === 't' || point === 'b'),\n        y: this.pointCoord(settings[1], object, point === 'r' || point === 'l')\n      };\n    };\n  }\n\n  SelectHandler.prototype.init = function (value, options) {\n    var bbox = this.el.bbox();\n    this.options = {}; // store defaults list of points in order to verify users config\n\n    var points = this.el.selectize.defaults.points; // Merging the defaults and the options-object together\n\n    for (var i in this.el.selectize.defaults) {\n      this.options[i] = this.el.selectize.defaults[i];\n\n      if (options[i] !== undefined) {\n        this.options[i] = options[i];\n      }\n    } // prepare & validate list of points to be added (or excluded)\n\n\n    var pointsLists = ['points', 'pointsExclude'];\n\n    for (var i in pointsLists) {\n      var option = this.options[pointsLists[i]];\n\n      if (typeof option === 'string') {\n        if (option.length > 0) {\n          // if set as comma separated string list => convert it into an array\n          option = option.split(/\\s*,\\s*/i);\n        } else {\n          option = [];\n        }\n      } else if (typeof option === 'boolean' && pointsLists[i] === 'points') {\n        // this is not needed, but let's have it for legacy support\n        option = option ? points : [];\n      }\n\n      this.options[pointsLists[i]] = option;\n    } // intersect correct all points options with users config (exclude unwanted points)\n    // ES5 -> NO arrow functions nor Array.includes()\n\n\n    this.options.points = [points, this.options.points].reduce(function (a, b) {\n      return a.filter(function (c) {\n        return b.indexOf(c) > -1;\n      });\n    }); // exclude pointsExclude, if wanted\n\n    this.options.points = [this.options.points, this.options.pointsExclude].reduce(function (a, b) {\n      return a.filter(function (c) {\n        return b.indexOf(c) < 0;\n      });\n    });\n    this.parent = this.el.parent();\n    this.nested = this.nested || this.parent.group();\n    this.nested.matrix(new SVG.Matrix(this.el).translate(bbox.x, bbox.y)); // When deepSelect is enabled and the element is a line/polyline/polygon, draw only points for moving\n\n    if (this.options.deepSelect && ['line', 'polyline', 'polygon'].indexOf(this.el.type) !== -1) {\n      this.selectPoints(value);\n    } else {\n      this.selectRect(value);\n    }\n\n    this.observe();\n    this.cleanup();\n  };\n\n  SelectHandler.prototype.selectPoints = function (value) {\n    this.pointSelection.isSelected = value; // When set is already there we dont have to create one\n\n    if (this.pointSelection.set) {\n      return this;\n    } // Create our set of elements\n\n\n    this.pointSelection.set = this.parent.set(); // draw the points and mark the element as selected\n\n    this.drawPoints();\n    return this;\n  }; // create the point-array which contains the 2 points of a line or simply the points-array of polyline/polygon\n\n\n  SelectHandler.prototype.getPointArray = function () {\n    var bbox = this.el.bbox();\n    return this.el.array().valueOf().map(function (el) {\n      return [el[0] - bbox.x, el[1] - bbox.y];\n    });\n  }; // Draws a points\n\n\n  SelectHandler.prototype.drawPoints = function () {\n    var _this = this,\n        array = this.getPointArray(); // go through the array of points\n\n\n    for (var i = 0, len = array.length; i < len; ++i) {\n      var curriedEvent = function (k) {\n        return function (ev) {\n          ev = ev || window.event;\n          ev.preventDefault ? ev.preventDefault() : ev.returnValue = false;\n          ev.stopPropagation();\n          var x = ev.pageX || ev.touches[0].pageX;\n          var y = ev.pageY || ev.touches[0].pageY;\n\n          _this.el.fire('point', {\n            x: x,\n            y: y,\n            i: k,\n            event: ev\n          });\n        };\n      }(i); // add every point to the set\n      // add css-classes and a touchstart-event which fires our event for moving points\n\n\n      var point = this.drawPoint(array[i][0], array[i][1]).addClass(this.options.classPoints).addClass(this.options.classPoints + '_point').on('touchstart', curriedEvent).on('mousedown', curriedEvent);\n      this.pointSelection.set.add(point);\n    }\n  }; // The function to draw single point\n\n\n  SelectHandler.prototype.drawPoint = function (cx, cy) {\n    var pointType = this.options.pointType;\n\n    switch (pointType) {\n      case 'circle':\n        return this.drawCircle(cx, cy);\n\n      case 'rect':\n        return this.drawRect(cx, cy);\n\n      default:\n        if (typeof pointType === 'function') {\n          return pointType.call(this, cx, cy);\n        }\n\n        throw new Error('Unknown ' + pointType + ' point type!');\n    }\n  }; // The function to draw the circle point\n\n\n  SelectHandler.prototype.drawCircle = function (cx, cy) {\n    return this.nested.circle(this.options.pointSize).stroke(this.options.pointStroke).fill(this.options.pointFill).center(cx, cy);\n  }; // The function to draw the rect point\n\n\n  SelectHandler.prototype.drawRect = function (cx, cy) {\n    return this.nested.rect(this.options.pointSize, this.options.pointSize).stroke(this.options.pointStroke).fill(this.options.pointFill).center(cx, cy);\n  }; // every time a point is moved, we have to update the positions of our point\n\n\n  SelectHandler.prototype.updatePointSelection = function () {\n    var array = this.getPointArray();\n    this.pointSelection.set.each(function (i) {\n      if (this.cx() === array[i][0] && this.cy() === array[i][1]) {\n        return;\n      }\n\n      this.center(array[i][0], array[i][1]);\n    });\n  };\n\n  SelectHandler.prototype.updateRectSelection = function () {\n    var _this = this,\n        bbox = this.el.bbox();\n\n    this.rectSelection.set.get(0).attr({\n      width: bbox.width,\n      height: bbox.height\n    }); // set.get(1) is always in the upper left corner. no need to move it\n\n    if (this.options.points.length) {\n      this.options.points.map(function (point, index) {\n        var coords = _this.pointCoords(point, bbox);\n\n        _this.rectSelection.set.get(index + 1).center(coords.x, coords.y);\n      });\n    }\n\n    if (this.options.rotationPoint) {\n      var length = this.rectSelection.set.length();\n      this.rectSelection.set.get(length - 1).center(bbox.width / 2, 20);\n    }\n  };\n\n  SelectHandler.prototype.selectRect = function (value) {\n    var _this = this,\n        bbox = this.el.bbox();\n\n    this.rectSelection.isSelected = value; // when set is already p\n\n    this.rectSelection.set = this.rectSelection.set || this.parent.set(); // helperFunction to create a mouse-down function which triggers the event specified in `eventName`\n\n    function getMoseDownFunc(eventName) {\n      return function (ev) {\n        ev = ev || window.event;\n        ev.preventDefault ? ev.preventDefault() : ev.returnValue = false;\n        ev.stopPropagation();\n        var x = ev.pageX || ev.touches[0].pageX;\n        var y = ev.pageY || ev.touches[0].pageY;\n\n        _this.el.fire(eventName, {\n          x: x,\n          y: y,\n          event: ev\n        });\n      };\n    } // create the selection-rectangle and add the css-class\n\n\n    if (!this.rectSelection.set.get(0)) {\n      this.rectSelection.set.add(this.nested.rect(bbox.width, bbox.height).addClass(this.options.classRect));\n    } // Draw Points at the edges, if enabled\n\n\n    if (this.options.points.length && this.rectSelection.set.length() < 2) {\n      var ename = \"touchstart\",\n          mname = \"mousedown\";\n      this.options.points.map(function (point, index) {\n        var coords = _this.pointCoords(point, bbox);\n\n        var pointElement = _this.drawPoint(coords.x, coords.y).attr('class', _this.options.classPoints + '_' + point).on(mname, getMoseDownFunc(point)).on(ename, getMoseDownFunc(point));\n\n        _this.rectSelection.set.add(pointElement);\n      });\n      this.rectSelection.set.each(function () {\n        this.addClass(_this.options.classPoints);\n      });\n    } // draw rotationPint, if enabled\n\n\n    if (this.options.rotationPoint && (this.options.points && !this.rectSelection.set.get(9) || !this.options.points && !this.rectSelection.set.get(1))) {\n      var curriedEvent = function curriedEvent(ev) {\n        ev = ev || window.event;\n        ev.preventDefault ? ev.preventDefault() : ev.returnValue = false;\n        ev.stopPropagation();\n        var x = ev.pageX || ev.touches[0].pageX;\n        var y = ev.pageY || ev.touches[0].pageY;\n\n        _this.el.fire('rot', {\n          x: x,\n          y: y,\n          event: ev\n        });\n      };\n\n      var pointElement = this.drawPoint(bbox.width / 2, 20).attr('class', this.options.classPoints + '_rot').on(\"touchstart\", curriedEvent).on(\"mousedown\", curriedEvent);\n      this.rectSelection.set.add(pointElement);\n    }\n  };\n\n  SelectHandler.prototype.handler = function () {\n    var bbox = this.el.bbox();\n    this.nested.matrix(new SVG.Matrix(this.el).translate(bbox.x, bbox.y));\n\n    if (this.rectSelection.isSelected) {\n      this.updateRectSelection();\n    }\n\n    if (this.pointSelection.isSelected) {\n      this.updatePointSelection();\n    }\n  };\n\n  SelectHandler.prototype.observe = function () {\n    var _this = this;\n\n    if (MutationObserver) {\n      if (this.rectSelection.isSelected || this.pointSelection.isSelected) {\n        this.observerInst = this.observerInst || new MutationObserver(function () {\n          _this.handler();\n        });\n        this.observerInst.observe(this.el.node, {\n          attributes: true\n        });\n      } else {\n        try {\n          this.observerInst.disconnect();\n          delete this.observerInst;\n        } catch (e) {}\n      }\n    } else {\n      this.el.off('DOMAttrModified.select');\n\n      if (this.rectSelection.isSelected || this.pointSelection.isSelected) {\n        this.el.on('DOMAttrModified.select', function () {\n          _this.handler();\n        });\n      }\n    }\n  };\n\n  SelectHandler.prototype.cleanup = function () {\n    //var _this = this;\n    if (!this.rectSelection.isSelected && this.rectSelection.set) {\n      // stop watching the element, remove the selection\n      this.rectSelection.set.each(function () {\n        this.remove();\n      });\n      this.rectSelection.set.clear();\n      delete this.rectSelection.set;\n    }\n\n    if (!this.pointSelection.isSelected && this.pointSelection.set) {\n      // Remove all points, clear the set, stop watching the element\n      this.pointSelection.set.each(function () {\n        this.remove();\n      });\n      this.pointSelection.set.clear();\n      delete this.pointSelection.set;\n    }\n\n    if (!this.pointSelection.isSelected && !this.rectSelection.isSelected) {\n      this.nested.remove();\n      delete this.nested;\n    }\n  };\n\n  SVG.extend(SVG.Element, {\n    // Select element with mouse\n    selectize: function selectize(value, options) {\n      // Check the parameters and reassign if needed\n      if (_typeof(value) === 'object') {\n        options = value;\n        value = true;\n      }\n\n      var selectHandler = this.remember('_selectHandler') || new SelectHandler(this);\n      selectHandler.init(value === undefined ? true : value, options || {});\n      return this;\n    }\n  });\n  SVG.Element.prototype.selectize.defaults = {\n    points: ['lt', 'rt', 'rb', 'lb', 't', 'r', 'b', 'l'],\n    // which points to draw, default all\n    pointsExclude: [],\n    // easier option if to exclude few than rewrite all\n    classRect: 'svg_select_boundingRect',\n    // Css-class added to the rect\n    classPoints: 'svg_select_points',\n    // Css-class added to the points\n    pointSize: 7,\n    // size of point\n    rotationPoint: true,\n    // If true, rotation point is drawn. Needed for rotation!\n    deepSelect: false,\n    // If true, moving of single points is possible (only line, polyline, polyon)\n    pointType: 'circle',\n    // Point type: circle or rect, default circle\n    pointFill: \"#000\",\n    // Point fill color\n    pointStroke: {\n      width: 1,\n      color: \"#000\"\n    } // Point stroke properties\n\n  };\n})();\n\n//# sourceURL=webpack:///./js/vendor/svg.select.js?")}});

